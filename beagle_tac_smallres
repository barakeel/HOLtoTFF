Unsatisfiable:  [] |- 1 < dimword (:α)
Unknown:  [∀f. SUM n (λi. SBIT (f i) i) < 2 ** n, SBIT (f n) n ≤ 2 ** n]
|- SBIT (f n) n + SUM n (λi. SBIT (f i) i) < 2 ** SUC n
Parsing failed:  [n ≤ i, BIT i (SUM n (λj. SBIT (f j) j)) ⇔ f i ∧ i < n]
|- SUM n (λi. SBIT (f i) i) < 2 ** n
Unsatisfiable:  [] |- ∀n. n MOD dimindex (:α) < dimword (:α)
Unknown: 
[P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n)),
 n < dimword (:α) ⇒ P (n2w n)] |- SUC n < dimword (:α) ⇒ P (n2w (SUC n))
Unsatisfiable:  [P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n))]
|- 0 < dimword (:α) ⇒ P 0w
Parsing failed:  [Abbrev (WL = dimword (:α)), 0 < WL, WL = 2 * INT_MIN (:α)]
|- (n = n DIV WL * WL + n MOD WL) ∧ n MOD WL < WL
Parsing failed: 
[Abbrev (q = (q * (2 * INT_MIN (:α)) + r) DIV (2 * INT_MIN (:α))),
 Abbrev (r = (q * (2 * INT_MIN (:α)) + r) MOD (2 * INT_MIN (:α))),
 Abbrev (2 * INT_MIN (:α) = dimword (:α)), ¬(INT_MIN (:α) ≤ r),
 r < INT_MIN (:α), r < 2 * INT_MIN (:α), 0 < 2 * INT_MIN (:α),
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- (q * (2 * INT_MIN (:α)) + r) DIV INT_MIN (:α) = 2 * q
Parsing failed: 
[Abbrev (WL = dimword (:α)), Abbrev (q = n DIV WL),
 Abbrev (r = n MOD WL), ¬(INT_MIN (:α) ≤ r), r < WL, r < INT_MIN (:α),
 0 < WL, WL = 2 * INT_MIN (:α), n = q * WL + r,
 n DIV INT_MIN (:α) = 2 * q,
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- F
Error in SML code: 
Unsatisfiable:  [¬(dimindex (:β) < dimindex (:α) ∧ dimindex (:β) < dimindex (:γ))]
|- sw2sw (sw2sw w) = sw2sw w
Unsatisfiable: 
[T, i < dimindex (:α), 0 < dimindex (:α) − l, l ≤ dimindex (:α) − 1,
 dimindex (:α) ≤ SUC h] |- ∃x. dimindex (:α) − l = SUC x
Unsatisfiable: 
[T, i < dimindex (:α), SUC x ≤ i, dimindex (:α) ≤ SUC h,
 dimindex (:α) ≤ i + (l + 1), l + x = dimindex (:α) − 1,
 dimindex (:α) − l = SUC x] |- BIT (dimindex (:α) − 1) n ⇔ BIT (l + x) n
Unsatisfiable: 
[T, i < SUC x, dimindex (:α) ≤ SUC h, dimindex (:α) ≤ i + (l + 1),
 i + l = dimindex (:α) − 1, dimindex (:α) − l = SUC x]
|- BIT (dimindex (:α) − 1) n ⇔ BIT (i + l) n
Unsatisfiable: 
[i < SUC (h − l), i < dimindex (:α), SUC h < dimindex (:α), h ≤ i + l,
 l ≤ h, i + l = h] |- BIT h n ⇔ BIT (i + l) n
Unsatisfiable:  [] |- ∀w. w2n (w2w w) < dimword (:α)
Unsatisfiable:  [] |- 2 ≤ 2 ** dimindex (:α)
Unsatisfiable:  [] |- w2n (w2w ((h -- l) w)) < 2 ** (SUC h − l)
Unknown: 
[i < dimindex (:α), i < dimindex (:γ), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ), dimindex (:β) ≤ i, dimindex (:β) ≤ i + l]
|- 0 < i + l
Unsatisfiable: 
[i < dimindex (:α), i < dimindex (:β), i < dimindex (:γ),
 i + l < dimindex (:β), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ)]
|- i + l ≤ h ∧ i + (l + n) ≤ m ∧ w ' (i + (l + n)) ⇔
   (i + (l + n) ≤ m ∧ i + (l + n) ≤ h + n) ∧ w ' (i + (l + n))
Unknown: 
[FINITE 𝕌(:β), FINITE 𝕌(:γ), i < dimindex (:α), i < dimindex (:δ),
 dimindex (:γ) ≤ i, m + 1 ≤ l, h = m + dimindex (:β), dimindex (:γ) = 0,
 h + 1 = l + dimindex (:δ)]
|- i + (m + 1) ≤ dimindex (:α) − 1 ∧ w ' (i + (m + 1)) ⇔
   i + l ≤ dimindex (:α) − 1 ∧ w ' (i + l)
Parsing failed:  [Abbrev (A = dimindex (:α)), ¬(i < A), i < dimindex (:β), 0 < A]
|- ∃x. i = x + A
Unsatisfiable: 
[∀m. m < n' ⇒ ¬BIT (dimindex (:α) − (m + 1)) n, n ≠ 0,
 n MOD 2 ** dimindex (:α) ≠ 0, n < 2 ** dimindex (:α),
 2 ** SUC (dimindex (:α) − (n' + 1)) ≤ n,
 BIT (dimindex (:α) − (n' + 1)) n]
|- ∃i. SUC (dimindex (:α) − (n' + 1)) ≤ i ∧ i < dimindex (:α) ∧ BIT i n
Unknown:  [n ≠ 0, n < 2 ** dimindex (:α)] |- ∃i. i < dimindex (:α) ∧ BIT i n
Unsatisfiable:  [n ≠ 0, i < dimindex (:α), n < 2 ** dimindex (:α), BIT i n]
|- ∃n'. n2w n ' n'
Unsatisfiable: 
[T, w ≠ UINT_MAXw, i ≠ n, ¬w ' i, i < n, i < dimindex (:α),
 n < i + (1 + n), 0 < n, 0 < 1 + n, dimindex (:α) = SUC n, w ' n,
 w ' (n − SUC (n − i − 1))] |- F
Unsatisfiable: 
[T, w ≠ 0w, i ≠ n, ¬w ' n, ¬w ' (n − SUC (n − i − 1)), i < n,
 i < dimindex (:α), n < i + (1 + n), 0 < n, 0 < 1 + n,
 dimindex (:α) = SUC n, w ' i] |- F
Unsatisfiable:  [] |- ∀w. w + -w = 0w
Unsatisfiable:  [] |- ∀v w x. (v + w = x) ⇔ (v = x − w)
Unsatisfiable:  [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
Unsatisfiable:  [-v + v + (-w + w) = 0w, -v + v + (-w + w) = -v + -w + (v + w)]
|- -(v + w) = -v + -w
Unsatisfiable:  [- -w + -w = w + -w] |- - -w = w
Unsatisfiable:  [] |- ∀v w x. (v = w − x) ⇔ (v + x = w)
Unsatisfiable:  [] |- ∀v w x. (v − w = x) ⇔ (v = x + w)
Unsatisfiable:  [] |- ∀w x. (-w = -x) ⇔ (w = x)
Unsatisfiable:  [] |- ∀a b. (a + b = 0w) ⇔ (a = -b)
Time out:  [] |- ∀x. x * -1w = -x
Unsatisfiable:  [T, dimindex (:α) = SUC m] |- BIT m (2 ** m + BITS m 1 a)
Unsatisfiable:  [n < dimindex (:α)] |- 2 ** n < dimword (:α)
Unsatisfiable: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 2 ** n < dimword (:α)] |- w2n m DIV 2 ** n < w2n m
Unsatisfiable: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 w2n m DIV 2 ** n < w2n m, 2 ** n < dimword (:α)]
|- w2n m DIV 2 ** n < dimword (:α)
Unsatisfiable:  [a < dimword (:α), n < dimindex (:α)] |- 2 ** n < dimword (:α)
Unsatisfiable:  [] |- n MOD dimindex (:α) < dimword (:α)
Unsatisfiable:  [] |- n MOD dimindex (:α) < dimword (:α)
Unknown: 
[1 ≤ m, dimindex (:α) = SUC m, BITS m 0 n = 2 ** m + BITS (m − 1) 0 n,
 BIT m n] |- 2 ** m − n MOD 2 ** m < 2 ** SUC m
Unsatisfiable:  [¬BIT m n, SUC m ≤ 1, dimindex (:α) = SUC m] |- BITS m 0 n = 0
Unsatisfiable:  [] |- ∀a. (dimindex (:α) − 1 = 0) ∧ word_msb a ⇒ (w2n a = 1)
Unsatisfiable:  [¬word_msb a, ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))]
|- word_msb (-a)
Unsatisfiable: 
[word_msb a, word_msb (-a),
 ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))] |- F
Unsatisfiable:  [m ≠ 0, dimindex (:α) − 1 ≠ 0, n < dimword (:α), dimindex (:α) = SUC m]
|- SLICE m 0 n = SLICE m m n + SLICE (m − 1) 0 n
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), word_msb a,
 word_msb b, dimindex (:α) − 1 ≠ 0, x < y, y = x + (p + 1),
 w2n a = 2 ** (dimindex (:α) − 1) + x,
 w2n b = 2 ** (dimindex (:α) − 1) + y,
 w2n (-b) = 2 ** (dimindex (:α) − 1) − y]
|- y < 2 ** (dimindex (:α) − 1)
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, ¬(w2n a < w2n b), b ≠ 0w, dimindex (:α) − 1 ≠ 0,
 w2n a = x, w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, ¬(w2n a < w2n b), b ≠ 0w, dimindex (:α) − 1 ≠ 0,
 y ≤ 2 ** (dimindex (:α) − 1), w2n a = x, w2n b = y,
 w2n (-b) = 2 ** dimindex (:α) − y] |- y ≤ 2 ** dimindex (:α)
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, y ≤ x,
 y ≤ 2 ** dimindex (:α), y ≤ 2 ** (dimindex (:α) − 1), w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- x < 2 ** (dimindex (:α) − 1)
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, w2n a < w2n b, w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)
Parsing failed: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, w2n a < w2n b,
 y ≤ 2 ** (dimindex (:α) − 1), w2n a = x, w2n b = y,
 w2n (-b) = 2 ** dimindex (:α) − y] |- y ≤ 2 ** dimindex (:α)
Unsatisfiable:  [dimindex (:α) − 1 ≠ 0]
|- a < b ⇔
   (word_msb a ⇔ word_msb b) ∧ w2n a < w2n b ∨ word_msb a ∧ ¬word_msb b
Unsatisfiable: 
[m ≠ 0, ¬BIT m n, 1 ≤ m, dimindex (:α) = SUC m,
 SLICE m m n + SLICE (m − 1) 0 n = SLICE m 0 n, SLICE m m n = 0]
|- SLICE m 0 n ≤ 2 ** m − 1
Unsatisfiable:  [] |- ∀a b. word_abs (a − b) = word_abs (b − a)
Time out:  [] |- -a + -1w + b + 1w = b + -a
Time out:  [] |- a + (-b + -1w) + 1w = a + -b
Unsatisfiable:  []
|- (word_msb x ⇔ ¬word_msb y) ∧ (word_msb x ⇎ word_msb (x + ¬y + 1w)) ⇔
   (word_msb x ⇎ word_msb y) ∧ (word_msb (x + ¬y + 1w) ⇎ word_msb x)
Time out: 
[n < dimword (:α), n < 2 ** (dimindex (:α) − 1), n' < dimword (:α),
 n' < 2 ** (dimindex (:α) − 1)] |- n + n' < 2 ** dimindex (:α)
Unknown: 
[T, n < dimword (:α), UINT_MAX (:β) MOD dimword (:α) ≤ n,
 dimindex (:β) = dimindex (:α), dimword (:β) = dimword (:α),
 UINT_MAX (:β) ≤ n ∧ n < dimword (:α) ⇒ (n = UINT_MAX (:β))]
|- UINT_MAX (:β) < dimword (:α)
Unsatisfiable:  [] |- ∀n. (UINT_MAXw = n) ⇔ (n = UINT_MAXw)
Unsatisfiable:  [] |- ∀w n. word_reverse (w ⋙ n) = word_reverse w ≪ n
Parsing failed:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- ∃n'. (n2w n = n2w n') ∧ (n' < k ∨ (n' = k))
Parsing failed:  [FINITE {n2w n | n < k}, x = n2w k, {n2w n | F} = ∅]
|- ∃n. (n2w k = n2w n) ∧ (n < k ∨ (n = k))
Parsing failed:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- (n2w n = n2w k) ∨ ∃n'. (n2w n = n2w n') ∧ n' < k
Unsatisfiable:  [] |- 0 < 2 ** n
Unsatisfiable:  [y ≠ 0w, 0 < m] |- w2n y ≠ 0
Unsatisfiable:  [y ≠ 0w, w2n y ≠ 0, 0 < m] |- w2n y DIV 2 ** m < w2n y
Unsatisfiable:  [n < dimword (:α), n' < dimword (:α), n' ≤ n] |- ∃k. n = k + n'
Unsatisfiable: 
[0w = x − y, 0w ≤ 0w ⇒ 0w ≤ y − 0w, y ≤ x, 0w ≤ y, 0w ≤ x − y, y < x,
 0w < y] |- 0w < x − y
Unsatisfiable:  [0w = y, y ≤ x, 0w ≤ y, y < x] |- x − y < x ∨ (x − y = x)
Unsatisfiable:  [y = x, y ≤ x, 0w ≤ y, 0w < y] |- 0w < x ∨ (0w = x)
Unsatisfiable: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) x,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) y]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n
Unsatisfiable: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) y,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) x]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n
Time out: 
[BITS n 0 x + BITS n 0 y + 1 ≠ 0, BITS n 0 x + BITS n 0 y ≠ 0,
 ¬BIT (SUC n) x, ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y + 1),
 BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC (SUC n),
 BITS n 0 x < 2 ** SUC n, BITS n 0 y < 2 ** SUC n, BIT (SUC n) y]
|- BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC n
Unsatisfiable: 
[BITS n 0 x + BITS n 0 y + 1 ≠ 0, BITS n 0 x + BITS n 0 y ≠ 0,
 ¬BIT (SUC n) y, ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y + 1),
 BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC (SUC n),
 BITS n 0 x < 2 ** SUC n, BITS n 0 y < 2 ** SUC n, BIT (SUC n) x]
|- BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC n
Time out: 
[∀x y c.
   BSUM i (λi. BIT i x) (λi. BIT i y) c ⇔
   BIT i (x + y + if c then 1 else 0)]
|- ((BIT (SUC i) x ⇔ ¬BIT (SUC i) y) ⇔
    ¬BIT (SUC i) (BITS i 0 x + BITS i 0 y)) ⇔ BIT (SUC i) (x + y)
Time out: 
[∀x y c.
   BSUM i (λi. BIT i x) (λi. BIT i y) c ⇔
   BIT i (x + y + if c then 1 else 0)]
|- ((BIT (SUC i) x ⇔ ¬BIT (SUC i) y) ⇔
    ¬BIT (SUC i) (BITS i 0 x + BITS i 0 y + 1)) ⇔
   BIT (SUC i) (x + y + 1)
Error in SML code: 
Error in SML code: 
Error in SML code: 
Unsatisfiable: 
[∀i.
   i < dimindex (:α) ⇒
   ¬(h + (i + 1) ≤ dimindex (:α) − 1) ∨ ¬w ' (h + (i + 1)),
 i < dimindex (:α), h + 1 ≤ dimindex (:α) − 1,
 h + (i + 1) ≤ dimindex (:α) − 1, a ' (h + (i + 1))]
|- ¬w ' (h + (i + 1))
Unsatisfiable: 
[P x, x < n, 0 < n − 1, 1 < n, n − 1 < 2 ** SUC (LOG 2 (n − 1)),
 n ≤ dimindex (:α), x ≤ n − 1, 2 ** LOG 2 (n − 1) ≤ n − 1]
|- x < 2 ** (LOG2 (n − 1) + 1)
Unsatisfiable: 
[P x, x < n, x < 2 ** (LOG2 (n − 1) + 1), 0 < n − 1, 1 < n,
 n − 1 < 2 ** SUC (LOG 2 (n − 1)), n ≤ dimindex (:α), x ≤ n − 1,
 2 ** LOG 2 (n − 1) ≤ n − 1,
 (dimindex (:α) − 1 -- LOG2 (n − 1) + 1) (n2w x) = 0w]
|- (m = n2w x) ⇔
   ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w) ∧
   ((LOG2 (n − 1) -- 0) m = n2w x)
Error in SML code: 
Error in SML code: 
Error in SML code: 
Unsatisfiable:  [(n DIV 2 ** (dimindex (:α) − 1)) MOD 2 ≠ 1]
|- ¬(2 ** (dimindex (:α) − 1) ≤ n ∧ n < 2 ** dimindex (:α)) ⇒
   ¬(2 ** (dimindex (:α) − 1) ≤ n) ∨ ¬(n < 2 ** dimindex (:α))
Unknown: 
[&(2 * INT_MIN (:α)) ≠ 0, n ≠ 0, 0 < dimword (:α),
 n MOD (2 * INT_MIN (:α)) < 2 * INT_MIN (:α), 1 ≤ INT_MIN (:α),
 1 ≤ dimword (:α), i = -&n, dimword (:α) = 2 * INT_MIN (:α), i < 0]
|- (&(2 * INT_MIN (:α)) − &n) % &(2 * INT_MIN (:α)) =
   (&(2 * INT_MIN (:α)) − &n % &(2 * INT_MIN (:α))) %
   &(2 * INT_MIN (:α))
Unsatisfiable:  [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) < dimword (:α)
Unsatisfiable: 
[Num (-i) ≤ 2 ** (dimindex (:α) − 1), dimindex (:α) ≤ dimindex (:β),
 INT_MIN (:α) ≤ i, i < 0] |- 2 ** dimindex (:α) ≤ 2 ** dimindex (:β)
Unknown: 
[Num (-i) ≤ 2 ** (dimindex (:α) − 1), dimindex (:α) ≤ dimindex (:β),
 2 ** dimindex (:α) ≤ 2 ** dimindex (:β), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) < 2 ** dimindex (:α) ∧ Num (-i) < 2 ** dimindex (:β)
Unknown: 
[¬(i < dimindex (:β)), ¬(0 < i), ¬(j < 0), i < dimindex (:α),
 dimindex (:β) ≤ dimindex (:α), dimindex (:β) = 0, j ≤ INT_MAX (:β),
 INT_MIN (:β) ≤ j] |- F
Unknown: 
[i < dimindex (:α), 0 < i, Num j < 2 ** (dimindex (:β) − 1),
 2 ** (dimindex (:β) − 1) < 2 ** i, dimindex (:β) ≤ i,
 dimindex (:β) ≤ dimindex (:α), INT_MIN (:β) ≤ j, 0 ≤ j,
 j < &(2 ** (dimindex (:β) − 1))] |- Num j < 2 ** i
Unknown: 
[i < dimindex (:α), dimindex (:β) ≤ dimindex (:α), j ≤ INT_MAX (:β),
 INT_MIN (:β) ≤ j, j < 0]
|- ∃n.
     INT_MIN (:β) ≤ n ∧ n < dimword (:β) ∧ (-n2w (Num (-j)) = n2w n) ∧
     (-n2w (Num (-j)) =
      n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n))
Unsatisfiable: 
[i < dimindex (:α), n < dimword (:β), INT_MIN (:β) ≤ n,
 dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:α) = k + i
Unsatisfiable: 
[i < dimindex (:α), n < dimword (:β), INT_MIN (:β) ≤ n,
 dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, 2 ** dimindex (:α) MOD 2 ** i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- 2 ** i < 2 ** dimindex (:α) ∧ 2 ** dimindex (:β) ≤ 2 ** i
Time out: 
[i < dimindex (:α), n < dimword (:β), 2 ** i < 2 ** dimindex (:α),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 2 ** dimindex (:β) ≤ 2 ** i,
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n,
 2 ** dimindex (:α) − 2 ** dimindex (:β) =
 (2 ** (dimindex (:α) − i) − 1) * 2 ** i +
 (2 ** i − 2 ** dimindex (:β)), 2 ** dimindex (:α) MOD 2 ** i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- 2 ** i − 2 ** dimindex (:β) + n < 2 ** i
Unsatisfiable: 
[i < dimindex (:α), 2 ** (0 − 1) + p < dimword (:β), 0 ≤ dimindex (:α),
 dimindex (:β) = 0, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0] |- F
Unsatisfiable: 
[i < dimindex (:α), i < dimindex (:β), n < dimword (:β),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:α) = k + SUC i
Unsatisfiable: 
[i < dimindex (:α), i < dimindex (:β), n < dimword (:β),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, 2 ** dimindex (:α) MOD 2 ** SUC i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:β) = k + SUC i
Unsatisfiable:  [¬b ' (dimindex (:α) − 1), a ' (dimindex (:α) − 1)]
|- ∃i. i < dimindex (:α) ∧ a ' i
Unsatisfiable: 
[BIT (dimindex (:α)) (w2n a + w2n (-b)), a ' (dimindex (:α) − 1),
 b ' (dimindex (:α) − 1)]
|- ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   (∃i. i < dimindex (:α) ∧ b ' i) ⇔
   ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   ∃i. i < dimindex (:α) ∧ a ' i
Unsatisfiable: 
[¬BIT (dimindex (:α)) (w2n a + w2n (-b)), a ' (dimindex (:α) − 1),
 b ' (dimindex (:α) − 1)]
|- ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   (∃i. i < dimindex (:α) ∧ b ' i) ⇔
   ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   ∃i. i < dimindex (:α) ∧ a ' i
Unsatisfiable:  [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) < dimword (:α)
Unsatisfiable: 
[i' < dimindex (:α), n < dimindex (:α),
 Num i < 2 ** (dimindex (:α) − 1), dimindex (:α) − 1 < i' + n,
 dimindex (:α) ≤ i' + n, INT_MIN (:α) ≤ i, 0 ≤ i,
 i < &(2 ** (dimindex (:α) − 1))] |- Num i < 2 ** (i' + n)
Unsatisfiable: 
[Num (-i) ≠ 0, Num (-i) MOD 2 ** n ≠ 0, i' < dimindex (:α),
 n < dimindex (:α), Num (-i) < 2 ** dimindex (:α),
 dimindex (:α) ≤ i' + n, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) < 2 ** (i' + n)
Unsatisfiable: 
[Num (-i) ≠ 0, Num (-i) MOD 2 ** n ≠ 0, i' < dimindex (:α),
 n < dimindex (:α), 1 < 2 ** n, Num (-i) < 2 ** dimindex (:α),
 Num (-i) < 2 ** (i' + n), Num (-i) DIV 2 ** n < Num (-i),
 dimindex (:α) ≤ i' + n, Num (-i) DIV 2 ** n + 1 ≤ Num (-i),
 i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) DIV 2 ** n + 1 < 2 ** dimindex (:α)
Unsatisfiable: 
[Num (-i) ≠ 0, Num (-i) MOD 2 ** n ≠ 0, i' < dimindex (:α),
 n < dimindex (:α), 1 < 2 ** n, Num (-i) < 2 ** dimindex (:α),
 Num (-i) DIV 2 ** n < Num (-i), Num (-i) ≤ 2 ** (dimindex (:α) − 1),
 dimindex (:α) ≤ i' + n, Num (-i) DIV 2 ** n + 1 ≤ Num (-i),
 i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) DIV 2 ** n + 1 < 2 ** dimindex (:α)
Unsatisfiable: 
[Num (-i) ≠ 0, i' < dimindex (:α), n < dimindex (:α),
 Num (-i) < 2 ** dimindex (:α), dimindex (:α) ≤ i' + n,
 2 ** n ≤ Num (-i), Num (-i) DIV 2 ** n − 1 = (Num (-i) − 1) DIV 2 ** n,
 Num (-i) MOD 2 ** n = 0, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) < 2 ** (i' + n)
Unsatisfiable: 
[Num (-i) ≠ 0, i' < dimindex (:α), n < dimindex (:α),
 Num (-i) < 2 ** dimindex (:α), dimindex (:α) ≤ i' + n,
 Num (-i) MOD 2 ** n = 0, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) DIV 2 ** n ≠ 0
Unknown: 
[¬(INT_MIN (:β) ≤ i ∧ i ≤ INT_MAX (:β)), dimindex (:β) ≤ dimindex (:α),
 i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i]
|- (i = w2i (i2w i)) ⇔ (i = w2i (sw2sw (i2w i)))
Unknown:  [n < dimword (:α)] |- INT_MIN (:β) < dimword (:β)
Parsing failed: 
[n ≠ 0, n ≠ UINT_MAX (:α),
 UINT_MAX (:α) ≤ n ∧ n ≠ UINT_MAX (:α) ⇔ dimword (:α) ≤ n]
|- (if UINT_MAX (:α) ≤ n then n2w (UINT_MAX (:α)) else n2w n) =
   if dimword (:α) ≤ n then n2w (UINT_MAX (:α)) else n2w n
Unknown:  [n < INT_MIN (:α), n < dimword (:α), dimindex (:β) ≤ dimindex (:α)]
|- UINT_MAX (:β) < dimword (:β)
Unsatisfiable: 
[llist_rep (llist_abs r1) = r1, llist_rep (llist_abs r2) = r2,
 llist_abs r1 = llist_abs r2] |- r1 = r2
Parsing failed: 
[P f,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- ((λn. if n = 0 then SOME h else f (n − 1)) = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     ((λn. if n = 0 then SOME h else f (n − 1)) =
      (λn. if n = 0 then SOME h' else t (n − 1)))
Parsing failed: 
[P f, P g,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- (g = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     (g = (λn. if n = 0 then SOME h' else t (n − 1)))
Unknown: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x))]
|- (f a = NONE) ∨ ∃a' b. f a = SOME (a',b)
Unknown: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x)), LHD (g a) = NONE,
 LHD (g' a) = NONE, f a = NONE] |- (g a = [||]) ∧ (g' a = [||])
Satisfiable: 
[∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x), f x = NONE] |- g x = [||]
Satisfiable: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
Satisfiable: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
Satisfiable: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
Satisfiable: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
Satisfiable: 
[∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀g g'.
   ((∀x. LHD (g x) = OPTION_MAP SND (f x)) ∧
    ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)) ∧
   (∀x. LHD (g' x) = OPTION_MAP SND (f x)) ∧
   (∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x)) ⇒
   (g = g'), f x = NONE] |- g x = [||]
Satisfiable:  []
|- ∃LUNFOLD.
     ∀f x.
       LUNFOLD f x =
       case f x of NONE => [||] | SOME (v1,v2) => v2:::LUNFOLD f v1
Error in SML code: 
Unsatisfiable: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4)), R ll1 ll2,
 R ll3 ll4]
|- (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4))
Unsatisfiable: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2,
 R ll1 ll2, R ll3 ll4]
|- (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2
Unsatisfiable:  [LNTH n ll1 = NONE, LTAKE n ll1 = SOME x, LTAKE n ll2 = NONE]
|- NONE = LNTH n ll2
Unsatisfiable:  [LNTH n ll2 = NONE, LTAKE n ll1 = NONE, LTAKE n ll2 = SOME x]
|- LNTH n ll1 = NONE
Unsatisfiable:  [LTAKE n ll1 = NONE, LTAKE n ll2 = NONE] |- LNTH n ll1 = LNTH n ll2
Unsatisfiable:  []
|- (∀n ll. (LTAKE n ll = NONE) ⇒ LFINITE ll) ⇒
   (∃n. LTAKE n ll = NONE) ⇒
   LFINITE ll
Unknown:  [llength_rel t n] |- ∃n. llength_rel (h:::t) n
Unsatisfiable:  [] |- ∃n. llength_rel [||] n
Unsatisfiable:  []
|- (∀t n. llength_rel t n ⇒ ∀m. llength_rel t m ⇒ (m = n)) ⇒
   ∀t m n. llength_rel t n ∧ llength_rel t m ⇒ (m = n)
Unknown:  [LFINITE t] |- ∃n. llength_rel t n
Unknown:  [LFINITE t, llength_rel t n] |- ∀m. llength_rel t m ⇔ (m = n)
Unsatisfiable: 
[∀ll.
   ¬LFINITE ll ⇒
   (LAPPEND (fromList (THE (LTAKE n ll))) (THE (LDROP n ll)) = ll),
 ¬LFINITE t, LTAKE n t = SOME y]
|- (y = THE (LTAKE n t)) ⇒ (LAPPEND (fromList y) (THE (LDROP n t)) = t)
Unsatisfiable:  []
|- (∀n l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l) ⇒
   ∀l n e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l
Unsatisfiable:  [P e, ∀l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l, SOME e = LNTH n t]
|- P h ∨ exists P t
Unsatisfiable:  [P e] |- P e ∨ exists P t
Unsatisfiable:  []
|- (∀n ll a t. (LDROP n ll = SOME (a:::t)) ∧ P a ⇒ exists P ll) ⇒
   (∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a) ⇒
   exists P ll
Unknown:  []
|- (∀ll. exists P ll ⇒ ∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a) ⇒
   exists P ll ⇒
   ∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a
Unsatisfiable:  [∀h t. Q (h:::t) ⇒ P h ∧ Q t]
|- (∀ll. exists ($~ o P) ll ⇒ ¬Q ll) ⇒ ∀ll. Q ll ⇒ ¬exists ($~ o P) ll
Unsatisfiable:  [Q (h:::ll), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- Q ll
Unsatisfiable:  [Q (h:::t), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- P h
Unknown: 
[P n, P p, P (SUC n'), ∀m. m < n' ⇒ ¬P (SUC m), ∀m. m < p ⇒ ¬P m, ¬P 0,
 ¬(SUC n' < p), p < SUC n'] |- ∃p0. p = SUC p0
Unsatisfiable:  [P n, P n', P 0, ∀m. m < n' ⇒ ¬P m, n' ≠ 0, 0 < n'] |- F
Parsing failed: 
[∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 ¬P (THE (LHD ll)), exists P ll] |- ∃h t. ll = h:::t
Parsing failed: 
[P (THE (LHD ll)),
 ∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 exists P ll] |- ∃h t. ll = h:::t
Parsing failed: 
[∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ¬P h, exists P t] |- ∃m e. (SOME e = LNTH m t) ∧ P e
Time out: 
[P e, P h,
 ∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ∀m. m < n ⇒ ∀e. SOME e ≠ LNTH m (h:::t) ∨ ¬P e, n ≠ 0, 0 < n,
 SOME e = LNTH n (h:::t)] |- F
Error in SML code: 
Unsatisfiable:  [[||] ≠ e, h = [||], SOME e = LNTH n t]
|- ∃n e. (SOME e = LNTH n t) ∧ e ≠ [||]
Error in SML code: 
Error in SML code: 
Unsatisfiable: 
[∀x.
   (f x = [||]) ∧ (g x = [||]) ∨
   ∃h y. (f x = h:::f y) ∧ (g x = h:::g y)]
|- (f x = [||]) ∧ (g x = [||]) ∨
   ∃h t1 t2.
     (f x = h:::t1) ∧ (g x = h:::t2) ∧ ∃x. (t1 = f x) ∧ (t2 = g x)
Unsatisfiable: 
[∀x.
   (f x = [||]) ∧ (g x = [||]) ∨
   ∃h y. (f x = h:::f y) ∧ (g x = h:::g y)]
|- ∃x'. (f x = f x') ∧ (g x = g x')
Unsatisfiable: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll] |- ∃s'. (LUNFOLD f s = LUNFOLD f s') ∧ R s' ll
Unsatisfiable: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll, R s' ll4, R s'' ll', R s''' ll'',
 LUNFOLD f s = x':::LUNFOLD f s''', LUNFOLD f s' = x:::LUNFOLD f s'',
 LHD ll = SOME x', LHD ll4 = SOME x, LTL ll = SOME ll'',
 LTL ll4 = SOME ll', f s = SOME (s''',x'), f s' = SOME (s'',x)]
|- ∃s''''. (LUNFOLD f s'' = LUNFOLD f s'''') ∧ R s'''' ll'
Unsatisfiable: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s [||], R s' ll4, R s'' ll', LUNFOLD f s = [||],
 LUNFOLD f s' = x:::LUNFOLD f s'', LHD ll4 = SOME x, LTL ll4 = SOME ll',
 f s = NONE, f s' = SOME (s'',x)]
|- ∃s'''. (LUNFOLD f s'' = LUNFOLD f s''') ∧ R s''' ll'
Unsatisfiable: 
[∀ll l. (LTAKE n ll = SOME l) ⇒ (n = LENGTH l),
 LTAKE (SUC n) ll = SOME l] |- (ll = [||]) ∨ ∃h t. ll = h:::t
Unsatisfiable: 
[∀ll l. (LTAKE n ll = SOME l) ⇒ (n = LENGTH l), l = h::z,
 LTAKE n t = SOME z] |- n = LENGTH z
Unsatisfiable: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∈ X, finite_prefixes lo X,
 linear_order lo X] |- SING (minimal_elements X lo)
Parsing failed: 
[∀x y z. (x,y) ∈ lo ∧ (y,z) ∈ lo ⇒ (x,z) ∈ lo,
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x y. (x,y) ∈ lo ∧ (y,x) ∈ lo ⇒ (x = y),
 ∀x. x ∈ X ∧ (∀x''. x'' ∈ X ∧ (x'',x) ∈ lo ⇒ (x = x'')) ⇔ (x = x'),
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     (domain lo' ⊆ X' ∧ range lo' ⊆ X' ∧
      (∀x y z. (x,y) ∈ lo' ∧ (y,z) ∈ lo' ⇒ (x,z) ∈ lo') ∧
      (∀x y. (x,y) ∈ lo' ∧ (y,x) ∈ lo' ⇒ (x = y)) ∧
      ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, x ∈ X, domain lo ⊆ X, range lo ⊆ X,
 finite_prefixes lo X]
|- ∃x''. (x'',x) ∈ lo ∧ (x'' ∈ X ∧ x'' ≠ x') ∧ x ≠ x' ⇎ (x'',x) ∈ lo
Unsatisfiable: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X]
|- linear_order (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)
Unsatisfiable: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)
Unknown: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, ¬(x ∉ X DIFF minimal_elements X lo),
 minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∃i.
     LNTH i
       (LUNFOLD linear_order_to_list_f
          (rrestrict lo (X DIFF minimal_elements X lo))) =
     SOME x
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X, x'' ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x'''. (∃y. (x''',y) ∈ lo) ∨ (∃x. (x,x''') ∈ lo) ⇔ x''' ∈ X
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. x ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Unsatisfiable: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo ≠ ∅,
 x ∉ minimal_elements X lo, domain lo ∪ range lo = X,
 minimal_elements X lo = {x'},
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- LNTH i
     (LUNFOLD linear_order_to_list_f (rrestrict lo (X DIFF {x'}))) =
   SOME x
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∈ X,
 x ∈ minimal_elements X lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∉ X, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Unsatisfiable: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Unsatisfiable: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Unsatisfiable: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Unsatisfiable: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X
Unsatisfiable: 
[∀x' y.
   (((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
    x' ∉ minimal_elements (domain lo ∪ range lo) lo) ∧
   ((∃y'. (y,y') ∈ lo) ∨ ∃x. (x,y) ∈ lo) ∧
   y ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   (x',y) ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo) ∨
   (y,x') ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃x.
      (x,x') ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃y.
      (x',y) ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   x' ∈ X,
 ∀x. (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒ x ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo,
 antisym
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)), transitive lo,
 transitive
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo, (x',x) ∈ lo] |- x ∈ X
Unsatisfiable: 
[∀x' y.
   (((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
    x' ∉ minimal_elements (domain lo ∪ range lo) lo) ∧
   ((∃y'. (y,y') ∈ lo) ∨ ∃x. (x,y) ∈ lo) ∧
   y ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   (x',y) ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo) ∨
   (y,x') ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃x.
      (x,x') ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃y.
      (x',y) ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   x' ∈ X,
 ∀x. (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒ x ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo,
 antisym
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)), transitive lo,
 transitive
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo, (x,y) ∈ lo] |- x ∈ X
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (x',
  CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
       (x = x')}) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x''.
        ((∃y. (x'',y) ∈ lo) ∨ ∃x. (x,x'') ∈ lo) ∧ (x'',x) ∈ lo ⇒
        (x = x'')} ∈ X
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')},
  y) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x'.
        ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
        (x = x')} ∈ X
Parsing failed: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x' y'.
     (x',y') ∈ lo' ∧ (s' = {z | (z,x') ∈ lo'}) ∧
     ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
      (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, antisym lo, transitive lo, (x,y) ∈ lo,
 finite_prefixes lo X] |- x ∈ X ∧ y ∈ X
Parsing failed: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∈ X, y ∈ X, (x,y) ∈ lo,
 finite_prefixes lo X, linear_order lo X]
|- SING (minimal_elements X lo)
Parsing failed: 
[∀x y z. (x,y) ∈ lo ∧ (y,z) ∈ lo ⇒ (x,z) ∈ lo,
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x y. (x,y) ∈ lo ∧ (y,x) ∈ lo ⇒ (x = y),
 ∀x. x ∈ X ∧ (∀x''. x'' ∈ X ∧ (x'',x) ∈ lo ⇒ (x = x'')) ⇔ (x = x'),
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     (domain lo' ⊆ X' ∧ range lo' ⊆ X' ∧
      (∀x y z. (x,y) ∈ lo' ∧ (y,z) ∈ lo' ⇒ (x,z) ∈ lo') ∧
      (∀x y. (x,y) ∈ lo' ∧ (y,x) ∈ lo' ⇒ (x = y)) ∧
      ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, x ∈ X, y ∈ X, (x,y) ∈ lo, domain lo ⊆ X,
 range lo ⊆ X, finite_prefixes lo X]
|- ∃x''. (x'',x) ∈ lo ∧ (x'' ∈ X ∧ x'' ≠ x') ∧ x ≠ x' ⇎ (x'',x) ∈ lo
Parsing failed: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X, y ∈ X,
 (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X]
|- linear_order (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)
Parsing failed: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X, y ∈ X,
 (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)
Parsing failed: 
[T,
 ∀x''.
   x'' ∈ X ∧ (∀x'. x' ∈ X ∧ (x',x'') ∈ lo ⇒ (x'' = x')) ⇔ (x'' = x'),
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     linear_order lo' X' ∧ finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, x ≠ x'', x ∈ X, x'' ∈ X, y ∈ X, (x,y) ∈ lo,
 (x'',x) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}),
 linear_order lo X,
 linear_order
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})]
|- y ≠ x'
Parsing failed: 
[T,
 ∀x''.
   x'' ∈ X ∧ (∀x'. x' ∈ X ∧ (x',x'') ∈ lo ⇒ (x'' = x')) ⇔ (x'' = x'),
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     linear_order lo' X' ∧ finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, x ∉ X, x ∈ X, y ∈ X, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}),
 linear_order lo X,
 linear_order
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})]
|- y ≠ x'
Parsing failed: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, ¬(x ∉ X DIFF minimal_elements X lo),
 y ∉ minimal_elements X lo, minimal_elements X lo = {x'}, x ∈ X, y ∈ X,
 (x,y) ∈ lo, (x,y) ∈ rrestrict lo (X DIFF minimal_elements X lo),
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∃i j.
     i ≤ j ∧
     (LNTH i
        (LUNFOLD linear_order_to_list_f
           (rrestrict lo (X DIFF minimal_elements X lo))) =
      SOME x) ∧
     (LNTH j
        (LUNFOLD linear_order_to_list_f
           (rrestrict lo (X DIFF minimal_elements X lo))) =
      SOME y)
Parsing failed: 
[T,
 ∀x' y'.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y' ∈ X ∧
   y' ∉ minimal_elements X lo ⇒
   (x',y') ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y',x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 Abbrev (∀x. x ∈ min ⇔ x ∈ minimal_elements (domain lo ∪ range lo) lo),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo, y ∉ minimal_elements X lo, i ≤ j,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x,
 LNTH j
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME y, x ∈ X, x'' ∈ min, y ∈ X, (x,y) ∈ lo,
 (x,y) ∈ rrestrict lo (X DIFF minimal_elements X lo),
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x'''. (∃y. (x''',y) ∈ lo) ∨ (∃x. (x,x''') ∈ lo) ⇔ x''' ∈ X
Parsing failed: 
[T,
 ∀x' y'.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y' ∈ X ∧
   y' ∉ minimal_elements X lo ⇒
   (x',y') ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y',x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 Abbrev (∀x. x ∉ minimal_elements (domain lo ∪ range lo) lo),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo, y ∉ minimal_elements X lo, i ≤ j,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x,
 LNTH j
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME y, x ∈ X, y ∈ X, (x,y) ∈ lo,
 (x,y) ∈ rrestrict lo (X DIFF minimal_elements X lo),
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Parsing failed: 
[T,
 ∀x' y'.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y' ∈ X ∧
   y' ∉ minimal_elements X lo ⇒
   (x',y') ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y',x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 Abbrev (∀x. x ∈ min ⇔ x ∈ minimal_elements (domain lo ∪ range lo) lo),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo, y ∉ minimal_elements X lo, i ≤ j,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x,
 LNTH j
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME y, x ∈ X, x'' ∈ min, y ∈ X, (x,y) ∈ lo,
 (x,y) ∈ rrestrict lo (X DIFF minimal_elements X lo),
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x'''. (∃y. (x''',y) ∈ lo) ∨ (∃x. (x,x''') ∈ lo) ⇔ x''' ∈ X
Parsing failed: 
[T,
 ∀x' y'.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y' ∈ X ∧
   y' ∉ minimal_elements X lo ⇒
   (x',y') ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y',x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 Abbrev (∀x. x ∉ minimal_elements (domain lo ∪ range lo) lo),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo, y ∉ minimal_elements X lo, i ≤ j,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x,
 LNTH j
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME y, x ∈ X, y ∈ X, (x,y) ∈ lo,
 (x,y) ∈ rrestrict lo (X DIFF minimal_elements X lo),
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Parsing failed: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ X DIFF minimal_elements X lo,
 minimal_elements X lo = {x'}, x ∈ X, y ∈ X, (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∃j. LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∈ X,
 x ∈ minimal_elements X lo, y ∈ X, (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Parsing failed: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∉ X, x ∈ X,
 y ∈ X, (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ range lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 y ∈ range lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ domain lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 y ∈ domain lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ range lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 y ∈ range lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ domain lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Parsing failed: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 y ∈ domain lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀j lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME x') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   (i = j), antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀j lo' X' x.
   ((∀x. (∃y. (x,y) ∈ lo') ⇒ x ∈ X') ∧
    (∀x. (∃x'. (x',x) ∈ lo') ⇒ x ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME x) ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x) ⇒
   (i = j), antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x.
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     x ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x ∈ X
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X
Unsatisfiable: 
[∀j lo X x.
   linear_order lo X ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
   (i = j),
 ¬(LNTH i
     (LUNFOLD linear_order_to_list_f
        (rrestrict lo
           (domain lo ∪ range lo DIFF
            minimal_elements (domain lo ∪ range lo) lo))) ≠
   SOME (CHOICE (minimal_elements (domain lo ∪ range lo) lo))),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
   domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo
Unsatisfiable: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- x ∈
   domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo
Unsatisfiable: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x, x ∈ range lo,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ≠ x
Unsatisfiable: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x, x ∈ domain lo,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ≠ x
Time out:  [finite_prefixes lo X, linear_order lo X]
|- x ∈ X ⇔ ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x
Unsatisfiable: 
[LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME x,
 finite_prefixes lo X, linear_order lo X] |- i = j
Unsatisfiable:  [(q,r) ∈ lo, finite_prefixes lo X, linear_order lo X]
|- ∃y z. (q,r) = (y,z)
Unsatisfiable: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X, ∀x. x ∈ range lo ⇒ x ∈ X, antisym lo,
 transitive lo, (y,z) ∈ lo, finite_prefixes lo X] |- y ∈ X
Parsing failed:  [y ∈ X, (y,z) ∈ lo, finite_prefixes lo X, linear_order lo X]
|- ∃i j.
     i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME y) ∧
     (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME z)
Unsatisfiable: 
[lbtree_rep (lbtree_abs f1) = f1, lbtree_rep (lbtree_abs f2) = f2,
 lbtree_abs f1 = lbtree_abs f2] |- f1 = f2
Unsatisfiable: 
[P t1, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (Ndrep a t1 t2 = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧
     (Ndrep a t1 t2 = Ndrep a' t1' t2')
Unsatisfiable: 
[P t1, P' t, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (t = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧ (t = Ndrep a' t1' t2')
Unsatisfiable: 
[P t, P t1, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (t = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧ (t = Ndrep a' t1' t2')
Unsatisfiable:  []
|- (∀f. (∃x. f = path_follow g x) ⇒ is_lbtree f) ⇒
   is_lbtree (path_follow g x)
Satisfiable:  [] |- (g x = NONE) ∨ ∃a b1 b2. g x = SOME (a,b1,b2)
Unsatisfiable:  [g x = SOME (a,b1,b2)] |- ∃x. path_follow g b2 = path_follow g x
Unsatisfiable:  [g x = SOME (a,b1,b2)] |- ∃x. path_follow g b1 = path_follow g x
Satisfiable:  [is_lbtree t1, is_lbtree t2]
|- (Ndrep a t1 t2 = Lfrep) ∨
   ∃a' t1' t2'.
     Ndrep a t1 t2 = Ndrep a' (lbtree_rep t1') (lbtree_rep t2')
Error in SML code: 
Error in SML code: 
Satisfiable:  [] |- (f x = NONE) ∨ ∃a b1 b2. f x = SOME (a,b1,b2)
Error in SML code: 
Unsatisfiable: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u] |- (p_2 = Lf) ∨ ∃a u1 u2. p_2 = Nd a u1 u2
Time out: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_2 = Nd a u1 u2]
|- ∃t1 t2. (p_1 = Nd a t1 t2) ∧ R t1 u1 ∧ R t2 u2
Satisfiable: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_2 = Lf] |- p_1 = Lf
Unsatisfiable: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u] |- (p_1 = Lf) ∨ ∃a t1 t2. p_1 = Nd a t1 t2
Time out: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_1 = Nd a t1 t2]
|- ∃u1 u2. (p_2 = Nd a u1 u2) ∧ R t1 u1 ∧ R t2 u2
Unsatisfiable:  [] |- (t = Lf) ∨ ∃a u1 u2. t = Nd a u1 u2
Unsatisfiable: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u]
|- (t' = Lf) ∨ ∃a t1 t2. t' = Nd a t1 t2
Unsatisfiable: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u,
 R t' u']
|- (t' = u') ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t' = Nd a t1 t2) ∧ (u' = Nd a u1 u2)
Unsatisfiable: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u,
 R t' t'] |- (t' = Lf) ∨ ∃a t1 t2. t' = Nd a t1 t2
Unsatisfiable:  [] |- (b = a) ∨ mem a t1 ∨ mem a t2 ⇔ (a = b) ∨ mem a t1 ∨ mem a t2
Satisfiable:  [] |- (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Satisfiable:  [] |- (t = Lf) ∨ ∃a' t1' t2'. t = Nd a' t1' t2'
Unsatisfiable:  []
|- (f a' = a) ∧ (map f t1' = t1) ∧ (map f t2' = t2) ⇔
   (a = f a') ∧ (t1 = map f t1') ∧ (t2 = map f t2')
Unsatisfiable:  []
|- (∀t. finite t ⇒ finite (map f t)) ∧
   (∀t. finite t ⇒ ∀t'. (t = map f t') ⇒ finite t') ⇒
   (finite (map f t) ⇔ finite t)
Error in SML code: 
Unsatisfiable:  []
|- (∀l.
      exists ($= x) l ⇒
      ∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist) ⇒
   exists ($= x) (bf_flatten tlist) ⇒
   EXISTS (mem x) tlist
Unsatisfiable: 
[∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist,
 h:::l = bf_flatten tlist] |- ¬EVERY ($= Lf) tlist
Satisfiable: 
[∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist,
 ¬EVERY ($= Lf) tlist, h:::l = bf_flatten tlist,
 EXISTS ($~ o $= Lf) tlist]
|- ∃l1 y l2.
     EVERY ($~ o $~ o $= Lf) l1 ∧ ($~ o $= Lf) y ∧ (tlist = l1 ++ y::l2)
Error in SML code: 
Unsatisfiable: 
[h = a, l = bf_flatten (l2 ++ [t1; t2]),
 bf_flatten (l1 ++ [Nd a t1 t2] ++ l2) =
 a:::bf_flatten (l2 ++ [t1; t2]),
 (l = bf_flatten (l2 ++ [t1; t2])) ⇒
 EXISTS (mem x) l2 ∨ mem x t1 ∨ mem x t2, EVERY ($= Lf) l1,
 EVERY ($~ o $~ o $= Lf) l1]
|- (EXISTS (mem x) l1 ∨ (x = a) ∨ mem x t1 ∨ mem x t2) ∨
   EXISTS (mem x) l2
Unsatisfiable:  [h:::t = bf_flatten tlist] |- ¬EVERY ($= Lf) tlist
Satisfiable: 
[¬EVERY ($= Lf) tlist, h:::t = bf_flatten tlist,
 EXISTS ($~ o $= Lf) tlist]
|- ∃l1 x l2.
     EVERY ($~ o $~ o $= Lf) l1 ∧ ($~ o $= Lf) x ∧ (tlist = l1 ++ x::l2)
Error in SML code: 
Unknown:  [depth x t n] |- ∃n. depth x (Nd b t1 t) n
Unknown:  [depth x t n] |- ∃n. depth x (Nd b t t2) n
Unsatisfiable:  [] |- ∃n. depth x (Nd x t1 t2) n
Unknown:  [∀m. m < n ⇒ ¬depth x t2 m, x ≠ a, ¬mem x t1, mem x t2, depth x t2 n]
|- ∃n. depth x (Nd a t1 t2) n
Unsatisfiable: 
[∀m. m < n ⇒ ¬depth x t2 m, ∀m. m < n' ⇒ ¬depth x (Nd a t1 t2) m, x ≠ a,
 ¬mem x t1, mem x t2, depth x t2 n] |- ∀n. ¬depth x t1 n
Unknown: 
[∀n. ¬depth x t1 n, ∀m. m < n ⇒ ¬depth x t2 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t1, n < m,
 mem x t2, depth x t2 m, depth x t2 n] |- F
Unsatisfiable: 
[∀n. ¬depth x t1 n, ∀m. m < n ⇒ ¬depth x t2 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t1, m < n,
 mem x t2, depth x t2 m, depth x t2 n] |- F
Unknown:  [∀m. m < n ⇒ ¬depth x t1 m, x ≠ a, ¬mem x t2, mem x t1, depth x t1 n]
|- ∃n. depth x (Nd a t1 t2) n
Unsatisfiable: 
[∀m. m < n ⇒ ¬depth x t1 m, ∀m. m < n' ⇒ ¬depth x (Nd a t1 t2) m, x ≠ a,
 ¬mem x t2, mem x t1, depth x t1 n] |- ∀n. ¬depth x t2 n
Unknown: 
[∀n. ¬depth x t2 n, ∀m. m < n ⇒ ¬depth x t1 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t2, n < m,
 mem x t1, depth x t1 m, depth x t1 n] |- F
Unsatisfiable: 
[∀n. ¬depth x t2 n, ∀m. m < n ⇒ ¬depth x t1 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t2, m < n,
 mem x t1, depth x t1 m, depth x t1 n] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m, x ≠ a,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 t2d]
|- (∃m. depth x t1 m) ∨ ∃m. depth x t2 m
Unknown: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, t2d < m,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, m < t2d,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Unknown: 
[∀m'. m' < m ⇒ ¬depth x t2 m', ∀m. m < t1d ⇒ ¬depth x t1 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, t1d < m, mem x t1,
 mem x t2, depth x t1 t1d, depth x t2 m] |- m = t1d
Unknown: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, t1d < m,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, m < t1d,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Unknown: 
[∀m'. m' < m ⇒ ¬depth x t1 m', ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', ¬(m < t2d), x ≠ a, m ≠ t2d,
 t2d < m, mem x t1, mem x t2, depth x t1 m, depth x t2 t2d] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m, x ≠ a,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 t2d]
|- (∃m. depth x t1 m) ∨ ∃m. depth x t2 m
Unknown: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, t2d < m,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, m < t2d,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Unknown: 
[∀m'. m' < m ⇒ ¬depth x t2 m', ∀m. m < t1d ⇒ ¬depth x t1 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, t1d < m, mem x t1,
 mem x t2, depth x t1 t1d, depth x t2 m] |- m = t1d
Unknown: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, t1d < m,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Unsatisfiable: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, m < t1d,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Unknown: 
[∀m'. m' < m ⇒ ¬depth x t1 m', ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', ¬(m < t2d), x ≠ a, m ≠ t2d,
 t2d < m, mem x t1, mem x t2, depth x t1 m, depth x t2 t2d] |- F
Unsatisfiable:  [] |- ∃n. depth a (Nd a t1 t2) n
Parsing failed:  [] |- ∀x t. mem x t ⇒ ∃n. mindepth x t = SOME n
Unknown:  [mem x t] |- ∃n. depth x t n
Unknown:  [f e = SOME n, MEM e l] |- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)
Parsing failed: 
[∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME min_d,
 Abbrev
   (min_d = LEAST x. (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) x),
 i < n, i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME min_d, EXISTS (λe. ∃n. f e = SOME n) l,
 (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) d]
|- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME x)
Parsing failed: 
[P d, P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
Parsing failed: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
Parsing failed: 
[P d, P m, P n', P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 ∀m. m < n' ⇒ ¬P m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- n' = m
Parsing failed: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m'. m' < n ⇒ ¬(m' < LENGTH l) ∨ f (EL m' l) ≠ SOME m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x, f (EL n l) = SOME m,
 EXISTS (λe. ∃n. f e = SOME n) l] |- m ≤ x
Parsing failed: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m'. m' < n ⇒ ¬(m' < LENGTH l) ∨ f (EL m' l) ≠ SOME m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, m ≤ x, f (EL i l) = SOME x,
 f (EL n l) = SOME m, EXISTS (λe. ∃n. f e = SOME n) l] |- m ≠ x
Parsing failed: 
[∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME min_d,
 Abbrev
   (min_d = LEAST x. (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) x),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME min_d, EXISTS (λe. ∃n. f e = SOME n) l,
 (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) d]
|- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME x)
Parsing failed: 
[P d, P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
Parsing failed: 
[P d, P n', P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 ∀m. m < n' ⇒ ¬P m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- n' ≤ x
Parsing failed: 
[P d, Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 EXISTS (λe. ∃n. f e = SOME n) l] |- ∃n. P n
Unsatisfiable: 
[∀m. m < n ⇒ ∀i. ¬(i < LENGTH l) ∨ f (EL i l) ≠ SOME m, i < LENGTH l,
 i' < LENGTH l, f (EL i l) = SOME d, f (EL i' l) = SOME n,
 EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n'. n' < LENGTH l ∧ (f (EL n' l) = SOME n)
Unknown: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < LENGTH l, m < n, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
Unknown: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < LENGTH l, n < m, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
Unknown: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'), i < j,
 i < LENGTH l, j < LENGTH l, f (EL i l) = SOME m, f (EL j l) = SOME n]
|- F
Unknown: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < i, j < LENGTH l, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
Unsatisfiable: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   (∃e. MEM e tlist' ∧ mem x' e) ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   (∃e. MEM e tlist' ∧ mem x' e) ⇒
   exists ($= x') (bf_flatten tlist'), MEM e tlist, mem x e]
|- ∃e. MEM e tlist ∧ ∃n. mindepth x e = SOME n
Unknown: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'), EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- ∃i d. is_mmindex (mindepth x) tlist i d
Unknown: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'), EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist,
 is_mmindex (mindepth x) tlist i d]
|- ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d)
Unknown: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (THE (mindepth x (EL i tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE (mindepth x (EL i tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 EXISTS (mem x) tlist, EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- mindepth x (EL i tlist) = SOME d
Time out: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 mindepth x (EL i tlist) = SOME d, EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist] |- ∃h t. tlist = h::t
Unsatisfiable: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 tlist = h::t, mindepth x (EL i tlist) = SOME d, EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- (h = Lf) ∨ ∃a t1 t2. h = Nd a t1 t2
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Unknown: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) (Lf::t) j n ⇔ (j = i) ∧ (n = d),
 i = SUC i0, mindepth x (EL i (Lf::t)) = SOME d, EXISTS (mem x) (Lf::t),
 EXISTS (λe. ∃n. mindepth x e = SOME n) (Lf::t),
 is_mmindex (mindepth x) t i0 d,
 is_mmindex (mindepth x) (Lf::t) (SUC i0) d]
|- ∀j n. is_mmindex (mindepth x) t j n ⇔ (j = i0) ∧ (n = d)
Unsatisfiable:  [] |- exists ($= x) (bf_flatten tlist) ⇒ EXISTS (mem x) tlist
Unsatisfiable:  [ODD a ⇎ ODD b, ¬((ODD a ⇔ EVEN b) ∨ (a = b))] |- ODD a ⇔ EVEN b
Unsatisfiable:  [] |- ∀n a. MOD_2EXP_EQ n a a
Unsatisfiable:  [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Unsatisfiable:  []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
Unsatisfiable:  [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
Unsatisfiable: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒
   a ≠ b ⇒
   (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b), a ≠ b,
 ODD a ⇔ EVEN b, SUC v = BRANCHING_BIT a b] |- EVEN b ⇎ ODD b
Unsatisfiable:  [T, a ≠ b, ODD a ⇔ ¬ODD b] |- ¬ODD b ⇎ ODD b
Time out:  [0 = BRANCHING_BIT a b] |- BRANCHING_BIT a b = BRANCHING_BIT b a
Unsatisfiable: 
[∀a' b'.
   (BRANCHING_BIT (DIV2 a) (DIV2 b) = BRANCHING_BIT a' b') ⇒
   (BRANCHING_BIT a' b' = BRANCHING_BIT b' a'), ODD a ⇎ EVEN b,
 ODD b ⇎ EVEN a, b ≠ a, v = BRANCHING_BIT (DIV2 a) (DIV2 b)]
|- BRANCHING_BIT (a DIV 2) (b DIV 2) = BRANCHING_BIT (b DIV 2) (a DIV 2)
Unsatisfiable: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒ (BRANCHING_BIT a b = BRANCHING_BIT b a),
 ¬((ODD a ⇔ EVEN b) ∨ (a = b)), ODD b ⇔ EVEN a,
 SUC v = BRANCHING_BIT a b] |- F
Unsatisfiable: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒ (BRANCHING_BIT a b = BRANCHING_BIT b a),
 ¬((ODD b ⇔ EVEN a) ∨ (b = a)), ODD a ⇔ EVEN b,
 SUC v = BRANCHING_BIT a b] |- F
Unsatisfiable: 
[∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t ⇒ EVERY_LEAF Q t,
 ∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t' ⇒ EVERY_LEAF Q t',
 ∀k d. P k d ⇒ Q k d, EVERY_LEAF P t, EVERY_LEAF P t']
|- EVERY_LEAF Q t'
Unsatisfiable: 
[∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t ⇒ EVERY_LEAF Q t,
 ∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t' ⇒ EVERY_LEAF Q t',
 ∀k d. P k d ⇒ Q k d, EVERY_LEAF P t, EVERY_LEAF P t'] |- EVERY_LEAF Q t
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Error in SML code: 
Unsatisfiable:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q] |- BIT (BRANCHING_BIT q n) n
Unsatisfiable:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n) n q
Unknown:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP (BRANCHING_BIT q n) q < 2 ** BRANCHING_BIT q n
Unsatisfiable:  [n ≠ q, BIT (BRANCHING_BIT q n) q] |- ¬BIT (BRANCHING_BIT q n) n
Unsatisfiable:  [n ≠ q, BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n) n q
Unknown:  [n ≠ q, BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP (BRANCHING_BIT q n) q < 2 ** BRANCHING_BIT q n
