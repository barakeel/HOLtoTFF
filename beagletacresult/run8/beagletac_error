structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 1
Status: Undefined
Info: polymorph num higher-order proof 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h] |- LENGTH (SND (SPLITP P t)) < SUC (LENGTH t)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 2
Status: Undefined
Info: polymorph num proof 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [P h] |- (l ≠ "" ∨ r ≠ STRING h t) ∨ (l = "")

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 3
Status: Undefined
Info: polymorph num higher-order proof 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- ∀l. l ≠ [] ⇒ LENGTH (TL l) < LENGTH l
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h, SND (SPLITP P t) ≠ ""]
|- LENGTH (TL (SND (SPLITP P t))) < SUC (LENGTH t)

Number: 14
Status: Unknown
Info: bool num proof 
Thm list: 
 [] |- ∀m n. m * n = n * m
 [] |- ∀n q. 0 < n ⇒ (q * n DIV n = q)
 [] |- 0 < 256
Goal: 
[Abbrev (s0 = n2s (256 * s2n s DIV 256)), r0 ≠ 0, ORD c + 1 < 256,
 n2s (s2n s) = s, r0 = ORD c + 1] |- s0 = s

Number: 17
Status: Unknown
Info: num proof 
Thm list: 
 [] |- ∀n q. 0 < n ⇒ (q * n DIV n = q)
 [] |- ∀m n. m * n = n * m
 [] |- 0 < 256
Goal: 
[ORD #"\255" < 256, n2s (s2n s) = s, ORD #"\255" = 255,
 ORD #"\255" + 1 = 256] |- n2s (256 * s2n s DIV 256) = s

Number: 18
Status: Unknown
Info: num proof 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- (n2s x = n2s y) ⇔ (x = y)

Number: 20
Status: Unknown
Info: num proof 
Thm list: 
 [] |- n2s (s2n s) = s
Goal:  [] |- ∀s. ∃n. s = n2s n

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 27
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < n'' ⇒ EL m (q::MAP FST ls) ≠ FST (EL n ls), q ≠ FST (EL n ls),
 n < m, n < LENGTH ls, EL m (MAP FST ls) = FST (EL n ls),
 EL n'' (q::MAP FST ls) = FST (EL n ls)]
|- EL m (MAP SND ls) = EL n'' (r::MAP SND ls)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 28
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(n < m),
 h ≠ FST (EL n ls), EL n (MAP FST ls) ≠ FST (EL n ls), m < LENGTH ls,
 n < LENGTH ls, SUC n < z, FST (EL m ls) = FST (EL n ls),
 EL z (h::MAP FST ls) = FST (EL n ls)]
|- SND (EL m ls) = EL z (r::MAP SND ls)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 29
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[T,
 ∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < SUC z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(n < m),
 ¬(n < z), h ≠ FST (EL n ls), EL m (MAP FST ls) ≠ FST (EL n ls), m < z,
 m < LENGTH ls, n < LENGTH ls, z < LENGTH ls,
 FST (EL m ls) = FST (EL n ls), FST (EL z ls) = FST (EL n ls)]
|- SND (EL m ls) = SND (EL z ls)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 30
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < SUC z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(m < z),
 ¬(n < m), ¬(n < z), h ≠ FST (EL n ls), m < LENGTH ls, n < LENGTH ls,
 z < m, z < LENGTH ls, FST (EL m ls) = FST (EL n ls),
 FST (EL z ls) = FST (EL n ls)] |- SND (EL m ls) = SND (EL z ls)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 31
Status: Undefined
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM f,
 x ∈ FDOM g] |- ∃a. g ' x [] = SOME a

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 32
Status: Undefined
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM g,
 x ∈ FDOM f] |- ∃a. f ' x [] = SOME a

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 36
Status: Undefined
Info: polymorph higher-order proof 
Thm list: 
 [] |- ∀f g x. x ∈ FDOM g ⇒ ((f o_f g) ' x = f (g ' x))
Goal:  [∀x. x ∈ FDOM f ⇒ (toF (f ' x) = (toF o_f g) ' x), FDOM f = FDOM g]
|- ∀x. x ∈ FDOM g ⇒ (toF (f ' x) = toF (g ' x))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 38
Status: Undefined
Info: polymorph proof 
Thm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [] |- (∀ft. P ft) ⇔ ∀f. wf f ⇒ P (fromF f)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 39
Status: Undefined
Info: polymorph higher-order proof 
Thm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal: 
[P (fromF (construct a (toF o fromF o_f fm))),
 ∀k. k ∈ FDOM fm ⇒ wf (fm ' k) ∧ P (fromF (fm ' k)), x ∈ FDOM fm]
|- toF (fromF (fm ' x)) = fm ' x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 40
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ FINITE {p | ∃ft'. apply_path p (fm ' k) = SOME ft'}]
|- (∃h t ft'.
      (x = h::t) ∧ (apply_path t (fm ' h) = SOME ft') ∧ h ∈ FDOM fm) ⇔
   ∃k x' ft'.
     ((x = k::x') ∧ (apply_path x' (fm ' k) = SOME ft')) ∧ k ∈ FDOM fm

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 41
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ ∃r. relrec h (fm ' k) r]
|- ∃f. ∀k. k ∈ FDOM fm ⇒ relrec h (fm ' k) (f k)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 42
Status: Undefined
Info: polymorph lambda-lift higher-order proof 
Thm list: 
 [] |- ∀ft r1. relrec h ft r1 ⇒ ∀r2. relrec h ft r2 ⇒ (r1 = r2)
Goal: 
[∀d. d ∈ FDOM fm ⇒ relrec h (fm ' d) (rfm ' d), FDOM rfm = FDOM fm,
 x ∈ FDOM fm] |- rfm ' x = @r. relrec h (fm ' x) r

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 44
Status: Undefined
Info: polymorph bool num higher-order proof 
Thm list: 
 [] |- ∀l x. MEM x l ⇔ ∃n. n < LENGTH l ∧ (x = EL n l)
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1, x' < m2, m1 ≥ m2,
 m2 ≥ m1]
|- MEM (EL x' (FILTER ($= x) l1)) (FILTER ($= x) l1) ∧
   MEM (EL x' (FILTER ($= x) l2)) (FILTER ($= x) l2)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 45
Status: Undefined
Info: bool num higher-order proof 
Thm list: 
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1,
 x = EL x' (FILTER ($= x) l1), x = EL x' (FILTER ($= x) l2), m1 ≥ m2,
 m2 ≥ m1, MEM (EL x' (FILTER ($= x) l1)) l1,
 MEM (EL x' (FILTER ($= x) l2)) l2]
|- EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 69
Status: Undefined
Info: polymorph bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
 [] |- ∀P x. x ∈ P ⇔ P x
Goal:  [] |- ∀x. (x = BIT1C) ⇔ {BIT1C} x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 74
Status: Undefined
Info: polymorph bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
 [] |- ∀x. x ∈ 𝕌(:α)
 [] |- ∀P x. x ∈ P ⇔ P x
Goal:  [] |- 𝕌 ARB () ⇔ {()} ()

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 77
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
 [] |- (∀m. m ** 0 = 1) ∧ ∀m n. m ** SUC n = m * m ** n
 [] |- ∀a b c. a ≤ b ∧ c < b ⇒ a + c < 2 * b
Goal:  [∀f. SUM n (λi. SBIT (f i) i) < 2 ** n, SBIT (f n) n ≤ 2 ** n]
|- SBIT (f n) n + SUM n (λi. SBIT (f i) i) < 2 ** SUC n

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 78
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀n f. SUM n (λi. SBIT (f i) i) < 2 ** n
Goal:  [n ≤ i, BIT i (SUM n (λj. SBIT (f j) j)) ⇔ f i ∧ i < n]
|- SUM n (λi. SBIT (f i) i) < 2 ** n

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 80
Status: Undefined
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal: 
[P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n)),
 n < dimword (:α) ⇒ P (n2w n)] |- SUC n < dimword (:α) ⇒ P (n2w (SUC n))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 81
Status: Undefined
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal:  [P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n))]
|- 0 < dimword (:α) ⇒ P 0w

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 85
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
 []
|- ∀a b n.
     ¬BIT n a ∨ ¬BIT n b ⇒
     (SBIT (BIT n a ∨ BIT n b) n = SBIT (BIT n a) n + SBIT (BIT n b) n)
 [] |- n < SUC n
Goal: 
[∀a b.
   (∀i. i < n ⇒ ¬BIT i a ∨ ¬BIT i b) ⇒
   (SUM n (λi. SBIT (BIT i a) i) + SUM n (λi. SBIT (BIT i b) i) =
    BITWISE n $\/ a b), ∀i. i < SUC n ⇒ ¬BIT i a ∨ ¬BIT i b]
|- SBIT (BIT n a) n + SBIT (BIT n b) n + BITWISE n $\/ a b =
   SBIT (BIT n a ∨ BIT n b) n + BITWISE n $\/ a b

Number: 99
Status: Unknown
Info: num proof 
Thm list: 
 [] |- ∀b n. n ≠ 0 ∧ n < 2 ** b ⇒ ∃i. i < b ∧ BIT i n
Goal:  [n ≠ 0, n < 2 ** dimindex (:α)] |- ∃i. i < dimindex (:α) ∧ BIT i n

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 142
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- ∃n'. (n2w n = n2w n') ∧ (n' < k ∨ (n' = k))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 143
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, x = n2w k, {n2w n | F} = ∅]
|- ∃n. (n2w k = n2w n) ∧ (n < k ∨ (n = k))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 144
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- (n2w n = n2w k) ∨ ∃n'. (n2w n = n2w n') ∧ n' < k

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 156
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
 []
|- ∀n a b.
     BIT (SUC n) (a + b) ⇔
     if BIT (SUC n) (BITS n 0 a + BITS n 0 b) then
       BIT (SUC n) a ⇔ BIT (SUC n) b
     else BIT (SUC n) a ⇎ BIT (SUC n) b
 []
|- ∀n a b.
     BIT (SUC n) (a + b + 1) ⇔
     if BIT (SUC n) (BITS n 0 a + BITS n 0 b + 1) then
       BIT (SUC n) a ⇔ BIT (SUC n) b
     else BIT (SUC n) a ⇎ BIT (SUC n) b
Goal: 
[∀x y c.
   BSUM i (λi. BIT i x) (λi. BIT i y) c ⇔
   BIT i (x + y + if c then 1 else 0)]
|- ((BIT (SUC i) x ⇔ ¬BIT (SUC i) y) ⇔
    ¬BIT (SUC i) (BITS i 0 x + BITS i 0 y)) ⇔ BIT (SUC i) (x + y)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 157
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
 []
|- ∀n a b.
     BIT (SUC n) (a + b) ⇔
     if BIT (SUC n) (BITS n 0 a + BITS n 0 b) then
       BIT (SUC n) a ⇔ BIT (SUC n) b
     else BIT (SUC n) a ⇎ BIT (SUC n) b
 []
|- ∀n a b.
     BIT (SUC n) (a + b + 1) ⇔
     if BIT (SUC n) (BITS n 0 a + BITS n 0 b + 1) then
       BIT (SUC n) a ⇔ BIT (SUC n) b
     else BIT (SUC n) a ⇎ BIT (SUC n) b
Goal: 
[∀x y c.
   BSUM i (λi. BIT i x) (λi. BIT i y) c ⇔
   BIT i (x + y + if c then 1 else 0)]
|- ((BIT (SUC i) x ⇔ ¬BIT (SUC i) y) ⇔
    ¬BIT (SUC i) (BITS i 0 x + BITS i 0 y + 1)) ⇔
   BIT (SUC i) (x + y + 1)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 158
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[∀P f.
   (∀j. j < n ⇒ ¬P j) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ F), ∀j. j < n ⇒ ¬P j,
 ∀j. j < SUC n ⇒ ¬P j] |- ¬FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 159
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[P i,
 ∀f P i.
   i < n ∧ P i ∧ (∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j)) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i),
 ∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j),
 ∀i j. P i ∧ P j ∧ i < SUC n ∧ j < SUC n ⇒ (i = j), i < n, i < SUC n]
|- FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 160
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[P i,
 ∀f P i.
   i < n ∧ P i ∧ (∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j)) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i),
 ∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j), i < n, i < SUC n,
 FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i, P n ⇒ (n = i)]
|- f i ∨ P n ∧ f n ⇔ f i

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 162
Status: Undefined
Info: num higher-order proof 
Thm list: 
 [] |- LOG2 = LOG 2
 [] |- ∀m. SUC m = m + 1
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal: 
[P x, x < n, 0 < n − 1, 1 < n, n − 1 < 2 ** SUC (LOG 2 (n − 1)),
 n ≤ dimindex (:α), x ≤ n − 1, 2 ** LOG 2 (n − 1) ≤ n − 1]
|- x < 2 ** (LOG2 (n − 1) + 1)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 163
Status: Undefined
Info: polymorph num proof 
Thm list: 
 []
|- ∀h w P a.
     ((dimindex (:α) − 1 -- h + 1) w = 0w) ⇒
     (((h -- 0) a = w) ∧ ((dimindex (:α) − 1 -- h + 1) a = 0w) ⇔
      (a = w))
Goal: 
[P x, x < n, x < 2 ** (LOG2 (n − 1) + 1), 0 < n − 1, 1 < n,
 n − 1 < 2 ** SUC (LOG 2 (n − 1)), n ≤ dimindex (:α), x ≤ n − 1,
 2 ** LOG 2 (n − 1) ≤ n − 1,
 (dimindex (:α) − 1 -- LOG2 (n − 1) + 1) (n2w x) = 0w]
|- (m = n2w x) ⇔
   ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w) ∧
   ((LOG2 (n − 1) -- 0) m = n2w x)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 164
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ j ≤ i ∧ w ' (i − j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ j ≤ i ∧
        w ' (i − j)) F (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 165
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧
        i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 166
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w ⇔
   FOLDL
     (λa j.
        a ∨ ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w

Number: 168
Status: Time out
Info: num proof 
Thm list: 
 [] |- k ≠ 0 ⇒ (j % k % k = j % k)
 [] |- k ≠ 0 ⇒ ((i % k − j % k) % k = (i − j) % k)
Goal: 
[&(2 * INT_MIN (:α)) ≠ 0, n ≠ 0, 0 < dimword (:α),
 n MOD (2 * INT_MIN (:α)) < 2 * INT_MIN (:α), 1 ≤ INT_MIN (:α),
 1 ≤ dimword (:α), i = -&n, dimword (:α) = 2 * INT_MIN (:α), i < 0]
|- (&(2 * INT_MIN (:α)) − &n) % &(2 * INT_MIN (:α)) =
   (&(2 * INT_MIN (:α)) − &n % &(2 * INT_MIN (:α))) %
   &(2 * INT_MIN (:α))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 196
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[P f,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- ((λn. if n = 0 then SOME h else f (n − 1)) = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     ((λn. if n = 0 then SOME h else f (n − 1)) =
      (λn. if n = 0 then SOME h' else t (n − 1)))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 197
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[P f, P g,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- (g = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     (g = (λn. if n = 0 then SOME h' else t (n − 1)))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 198
Status: Undefined
Info: polymorph lambda-lift num higher-order proof 
Thm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x))]
|- (f a = NONE) ∨ ∃a' b. f a = SOME (a',b)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 199
Status: Undefined
Info: polymorph lambda-lift num higher-order proof 
Thm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
Goal: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x)), LHD (g a) = NONE,
 LHD (g' a) = NONE, f a = NONE] |- (g a = [||]) ∧ (g' a = [||])

Number: 206
Status: Satisfiable
Info: polymorph lambda-lift higher-order proof 
Thm list: 
 []
|- ∀f. ∃g. ∀x. g x = case f x of NONE => [||] | SOME (a,b) => b:::g a
Goal:  []
|- ∃LUNFOLD.
     ∀f x.
       LUNFOLD f x =
       case f x of NONE => [||] | SOME (v1,v2) => v2:::LUNFOLD f v1

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 207
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀l1 l2. (if R l1 l2 then l1 else [||]) = if R l1 l2 then l2 else [||],
 ∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = [||]) ∧ (ll4 = [||]) ∨
   ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2, R ll1 ll2,
 (∀x.
    (λ(l1,l2). if R l1 l2 then l1 else [||]) x =
    case
      (λ(l1,l2).
         if R l1 l2 then
           case LHD l1 of
             NONE => NONE
           | SOME h => SOME ((THE (LTL l1),THE (LTL l2)),h)
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::(λ(l1,l2). if R l1 l2 then l1 else [||]) a) ∧
 (∀x.
    (λ(l1,l2). if R l1 l2 then l2 else [||]) x =
    case
      (λ(l1,l2).
         if R l1 l2 then
           case LHD l1 of
             NONE => NONE
           | SOME h => SOME ((THE (LTL l1),THE (LTL l2)),h)
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::(λ(l1,l2). if R l1 l2 then l2 else [||]) a) ⇒
 ((λ(l1,l2). if R l1 l2 then l1 else [||]) =
  (λ(l1,l2). if R l1 l2 then l2 else [||]))] |- ll1 = ll2

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 208
Status: Undefined
Info: proof 
Thm list: 
Goal: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4)), R ll1 ll2,
 R ll3 ll4]
|- (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4))

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 209
Status: Undefined
Info: proof 
Thm list: 
Goal: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2,
 R ll1 ll2, R ll3 ll4]
|- (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2

Number: 214
Status: Unknown
Info: polymorph num proof 
Thm list: 
 []
|- llength_rel [||] 0 ∧
   ∀h n t. llength_rel t n ⇒ llength_rel (h:::t) (SUC n)
Goal:  [llength_rel t n] |- ∃n. llength_rel (h:::t) n

Number: 217
Status: Unknown
Info: polymorph num proof 
Thm list: 
 [] |- ∀t. LFINITE t ⇒ ∃n. llength_rel t n
Goal:  [LFINITE t] |- ∃n. llength_rel t n

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 220
Status: Undefined
Info: num higher-order proof 
Thm list: 
Goal:  []
|- (∀n l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l) ⇒
   ∀l n e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 221
Status: Undefined
Info: num higher-order proof 
Thm list: 
Goal:  [P e, ∀l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l, SOME e = LNTH n t]
|- P h ∨ exists P t

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 222
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal:  [P e] |- P e ∨ exists P t

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 223
Status: Undefined
Info: num higher-order proof 
Thm list: 
Goal:  []
|- (∀n ll a t. (LDROP n ll = SOME (a:::t)) ∧ P a ⇒ exists P ll) ⇒
   (∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a) ⇒
   exists P ll

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 224
Status: Undefined
Info: num higher-order proof 
Thm list: 
Goal:  []
|- (∀ll. exists P ll ⇒ ∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a) ⇒
   exists P ll ⇒
   ∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 225
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal:  [∀h t. Q (h:::t) ⇒ P h ∧ Q t]
|- (∀ll. exists ($~ o P) ll ⇒ ¬Q ll) ⇒ ∀ll. Q ll ⇒ ¬exists ($~ o P) ll

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 226
Status: Undefined
Info: proof 
Thm list: 
Goal:  [Q (h:::ll), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- Q ll

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 227
Status: Undefined
Info: proof 
Thm list: 
Goal:  [Q (h:::t), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- P h

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 228
Status: Undefined
Info: num proof 
Thm list: 
 [] |- ∀m. (m = 0) ∨ ∃n. m = SUC n
Goal: 
[P n, P p, P (SUC n'), ∀m. m < n' ⇒ ¬P (SUC m), ∀m. m < p ⇒ ¬P m, ¬P 0,
 ¬(SUC n' < p), p < SUC n'] |- ∃p0. p = SUC p0

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 229
Status: Undefined
Info: num proof 
Thm list: 
Goal:  [P n, P n', P 0, ∀m. m < n' ⇒ ¬P m, n' ≠ 0, 0 < n'] |- F

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 230
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (exists P [||] ⇔ F) ∧ (exists P (h:::t) ⇔ P h ∨ exists P t)
Goal: 
[∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 ¬P (THE (LHD ll)), exists P ll] |- ∃h t. ll = h:::t

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 231
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (exists P [||] ⇔ F) ∧ (exists P (h:::t) ⇔ P h ∨ exists P t)
Goal: 
[P (THE (LHD ll)),
 ∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 exists P ll] |- ∃h t. ll = h:::t

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 232
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀l. exists P l ⇔ ∃n e. (SOME e = LNTH n l) ∧ P e
Goal: 
[∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ¬P h, exists P t] |- ∃m e. (SOME e = LNTH m t) ∧ P e

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 233
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 []
|- (∀n. LNTH n [||] = NONE) ∧ (∀h t. LNTH 0 (h:::t) = SOME h) ∧
   ∀n h t. LNTH (SUC n) (h:::t) = LNTH n t
Goal: 
[P e, P h,
 ∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ∀m. m < n ⇒ ∀e. SOME e ≠ LNTH m (h:::t) ∨ ¬P e, n ≠ 0, 0 < n,
 SOME e = LNTH n (h:::t)] |- F

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 234
Status: Undefined
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (every P [||] ⇔ T) ∧ (every P (h:::t) ⇔ P h ∧ every P t)
Goal: 
[∀x.
   LHD (g x) =
   OPTION_MAP SND
     ((λll.
         if every ($= [||]) ll then NONE
         else
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ e ≠ [||] in
            let nlist = THE (LNTH n ll)
            in
              SOME
                (THE (LTL nlist):::THE (LDROP (SUC n) ll),
                 THE (LHD nlist)))) x),
 ∀x.
   LTL (g x) =
   OPTION_MAP (g o FST)
     ((λll.
         if every ($= [||]) ll then NONE
         else
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ e ≠ [||] in
            let nlist = THE (LNTH n ll)
            in
              SOME
                (THE (LTL nlist):::THE (LDROP (SUC n) ll),
                 THE (LHD nlist)))) x), ¬every ($= [||]) ll]
|- ∃h t. ll = h:::t

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 236
Status: Undefined
Info: num higher-order proof 
Thm list: 
Goal:  [e ≠ [||], ¬every ($= [||]) t, SOME e = LNTH n t]
|- ∃e'. (SOME e' = LNTH n t) ∧ e' ≠ [||]

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 237
Status: Undefined
Info: polymorph lambda-lift num higher-order proof 
Thm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[e ≠ [||], ¬every ($= [||]) t,
 LHD (g t) =
 SOME
   (THE
      (LHD
         (THE (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]) t)))),
 LHD (g ([||]:::t)) =
 SOME
   (THE
      (LHD
         (THE (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]) t)))),
 LTL (g t) =
 SOME
   (g
      (THE
         (LTL
            (THE
               (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||])
                  t))):::
           THE
             (LDROP (SUC (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]))
                t))),
 LTL (g ([||]:::t)) =
 SOME
   (g
      (THE
         (LTL
            (THE
               (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||])
                  t))):::
           THE
             (LDROP (SUC (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]))
                t))), SOME e = LNTH n t] |- ∃h1 t1. g t = h1:::t1

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 240
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll] |- ∃s'. (LUNFOLD f s = LUNFOLD f s') ∧ R s' ll

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 241
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll, R s' ll4, R s'' ll', R s''' ll'',
 LUNFOLD f s = x':::LUNFOLD f s''', LUNFOLD f s' = x:::LUNFOLD f s'',
 LHD ll = SOME x', LHD ll4 = SOME x, LTL ll = SOME ll'',
 LTL ll4 = SOME ll', f s = SOME (s''',x'), f s' = SOME (s'',x)]
|- ∃s''''. (LUNFOLD f s'' = LUNFOLD f s'''') ∧ R s'''' ll'

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 242
Status: Undefined
Info: higher-order proof 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s [||], R s' ll4, R s'' ll', LUNFOLD f s = [||],
 LUNFOLD f s' = x:::LUNFOLD f s'', LHD ll4 = SOME x, LTL ll4 = SOME ll',
 f s = NONE, f s' = SOME (s'',x)]
|- ∃s'''. (LUNFOLD f s'' = LUNFOLD f s''') ∧ R s''' ll'

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 245
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'.
     linear_order r s ∧ finite_prefixes r s ∧ x ∈ s' ∧ s' ⊆ s ⇒
     SING (minimal_elements s' r)
 [] |- ∀s. s ⊆ s
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∈ X, finite_prefixes lo X,
 linear_order lo X] |- SING (minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 246
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀x y z. (x,y) ∈ lo ∧ (y,z) ∈ lo ⇒ (x,z) ∈ lo,
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x y. (x,y) ∈ lo ∧ (y,x) ∈ lo ⇒ (x = y),
 ∀x. x ∈ X ∧ (∀x''. x'' ∈ X ∧ (x'',x) ∈ lo ⇒ (x = x'')) ⇔ (x = x'),
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     (domain lo' ⊆ X' ∧ range lo' ⊆ X' ∧
      (∀x y z. (x,y) ∈ lo' ∧ (y,z) ∈ lo' ⇒ (x,z) ∈ lo') ∧
      (∀x y. (x,y) ∈ lo' ∧ (y,x) ∈ lo' ⇒ (x = y)) ∧
      ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, x ∈ X, domain lo ⊆ X, range lo ⊆ X,
 finite_prefixes lo X]
|- ∃x''. (x'',x) ∈ lo ∧ (x'' ∈ X ∧ x'' ≠ x') ∧ x ≠ x' ⇎ (x'',x) ∈ lo

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 247
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'. linear_order r s ∧ s' ⊆ s ⇒ linear_order (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X]
|- linear_order (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 248
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'.
     finite_prefixes r s ∧ s' ⊆ s ⇒
     finite_prefixes r s' ∧ finite_prefixes (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 249
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, ¬(x ∉ X DIFF minimal_elements X lo),
 minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∃i.
     LNTH i
       (LUNFOLD linear_order_to_list_f
          (rrestrict lo (X DIFF minimal_elements X lo))) =
     SOME x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 250
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X, x'' ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x'''. (∃y. (x''',y) ∈ lo) ∨ (∃x. (x,x''') ∈ lo) ⇔ x''' ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 251
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. x ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)),
 x ∉ minimal_elements X lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 252
Status: Undefined
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo ≠ ∅,
 x ∉ minimal_elements X lo, domain lo ∪ range lo = X,
 minimal_elements X lo = {x'},
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- LNTH i
     (LUNFOLD linear_order_to_list_f (rrestrict lo (X DIFF {x'}))) =
   SOME x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 253
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∈ X,
 x ∈ minimal_elements X lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 254
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[T,
 ∀x' y.
   (x' ∈ X ∧ x' ∉ minimal_elements X lo) ∧ y ∈ X ∧
   y ∉ minimal_elements X lo ⇒
   (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo) ∨
   (y,x') ∈ rrestrict lo (X DIFF minimal_elements X lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x''. x'' ∈ minimal_elements X lo ⇔ (x'' = x'),
 ∀x''. (∃x. (x,x'') ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃x. (x,x') ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀x''. (∃y. (x'',y) ∈ lo) ⇒ x'' ∈ X,
 ∀x'.
   (∃y. (x',y) ∈ rrestrict lo (X DIFF minimal_elements X lo)) ⇒
   x' ∈ X ∧ x' ∉ minimal_elements X lo,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo' X' x''.
     x'' ∈ X' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     ((∀x''. (∃y. (x'',y) ∈ lo') ⇒ x'' ∈ X') ∧
      (∀x''. (∃x. (x,x'') ∈ lo') ⇒ x'' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'',
 FINITE {y | (y,x) ∈ lo}, antisym lo,
 antisym (rrestrict lo (X DIFF minimal_elements X lo)), transitive lo,
 transitive (rrestrict lo (X DIFF minimal_elements X lo)), x ∉ X, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∀x''. (∃y. (x'',y) ∈ lo) ∨ (∃x. (x,x'') ∈ lo) ⇔ x'' ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 255
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 256
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 257
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 258
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 262
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (x',
  CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
       (x = x')}) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x''.
        ((∃y. (x'',y) ∈ lo) ∨ ∃x. (x,x'') ∈ lo) ∧ (x'',x) ∈ lo ⇒
        (x = x'')} ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 263
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')},
  y) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x'.
        ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
        (x = x')} ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 264
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x' y'.
     (x',y') ∈ lo' ∧ (s' = {z | (z,x') ∈ lo'}) ∧
     ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
      (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧
      antisym lo' ∧ ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, antisym lo, transitive lo, (x,y) ∈ lo,
 finite_prefixes lo X] |- x ∈ X ∧ y ∈ X

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 265
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'.
     linear_order r s ∧ finite_prefixes r s ∧ x ∈ s' ∧ s' ⊆ s ⇒
     SING (minimal_elements s' r)
 [] |- ∀s. s ⊆ s
Goal: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∈ X, y ∈ X, (x,y) ∈ lo,
 finite_prefixes lo X, linear_order lo X]
|- SING (minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 266
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[∀x y z. (x,y) ∈ lo ∧ (y,z) ∈ lo ⇒ (x,z) ∈ lo,
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x y. (x,y) ∈ lo ∧ (y,x) ∈ lo ⇒ (x = y),
 ∀x. x ∈ X ∧ (∀x''. x'' ∈ X ∧ (x'',x) ∈ lo ⇒ (x = x'')) ⇔ (x = x'),
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     (domain lo' ⊆ X' ∧ range lo' ⊆ X' ∧
      (∀x y z. (x,y) ∈ lo' ∧ (y,z) ∈ lo' ⇒ (x,z) ∈ lo') ∧
      (∀x y. (x,y) ∈ lo' ∧ (y,x) ∈ lo' ⇒ (x = y)) ∧
      ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
     finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, x ∈ X, y ∈ X, (x,y) ∈ lo, domain lo ⊆ X,
 range lo ⊆ X, finite_prefixes lo X]
|- ∃x''. (x'',x) ∈ lo ∧ (x'' ∈ X ∧ x'' ≠ x') ∧ x ≠ x' ⇎ (x'',x) ∈ lo

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 267
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'. linear_order r s ∧ s' ⊆ s ⇒ linear_order (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X, y ∈ X,
 (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X]
|- linear_order (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 268
Status: Undefined
Info: polymorph lambda-lift bool higher-order proof 
Thm list: 
 []
|- ∀r s s'.
     finite_prefixes r s ∧ s' ⊆ s ⇒
     finite_prefixes r s' ∧ finite_prefixes (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X, y ∈ X,
 (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

structure: printtff - printtff - Term function: write_tff - pptff_tff - dest_const message:  -  - Term not a constant
Number: 269
Status: Undefined
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal: 
[T,
 ∀x''.
   x'' ∈ X ∧ (∀x'. x' ∈ X ∧ (x',x'') ∈ lo ⇒ (x'' = x')) ⇔ (x'' = x'),
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo' X' x'' y'.
     (x'',y') ∈ lo' ∧ (∀x'''. x''' ∈ s' ⇔ (x''',x'') ∈ lo') ∧
     linear_order lo' X' ∧ finite_prefixes lo' X' ⇒
     ∃i j.
       i ≤ j ∧
       (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x'') ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME y'),
 FINITE {z | (z,x) ∈ lo}, x ≠ x'', x ∈ X, x'' ∈ X, y ∈ X, (x,y) ∈ lo,
 (x'',x) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}),
 linear_order lo X,
 linear_order
   (rrestrict lo
      (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')}))
   (X DIFF {x | x ∈ X ∧ ∀x'. x' ∈ X ∧ (x',x) ∈ lo ⇒ (x = x')})]
|- y ≠ x'

