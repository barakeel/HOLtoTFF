Number: 2
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [P h] |- (l ≠ "" ∨ r ≠ STRING h t) ∨ (l = "")

Number: 4
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀cs. ∃s. cs = EXPLODE s

Number: 5
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀s. ∃cs. s = IMPLODE cs

Number: 6
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (EXPLODE s1 = EXPLODE s2) ⇔ (s1 = s2)

Number: 7
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (IMPLODE cs1 = IMPLODE cs2) ⇔ (cs1 = cs2)

Number: 8
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ¬(ORD h'' < ORD h'),
 ORD h = ORD h', ORD h'' = ORD h, s1 < t, t < t'] |- s1 < t'

Number: 9
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h ⇒ m < ORD h',
 ∀p. ORD h' < p ⇒ ORD h < p, ¬(ORD h'' < ORD h'), ORD h < ORD h',
 ORD h'' = ORD h, s1 < t] |- s1 < t'

Number: 10
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h'' ⇒ m < ORD h,
 ∀p. ORD h < p ⇒ ORD h'' < p, ¬(ORD h'' < ORD h'), ORD h'' < ORD h,
 ORD h = ORD h', t < t'] |- s1 < t'

Number: 11
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- 0 < 256
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 [] |- ∀m n. m + n = n + m
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m),
 Abbrev (s0 = n2s ((n − n MOD 256) DIV 256)), n ≠ 0, n MOD 256 ≠ 0,
 0 < n MOD 256, (n − n MOD 256) DIV 256 < n,
 s2n s0 = (n − n MOD 256) DIV 256]
|- (n = n MOD 256 + n DIV 256 * 256) ∨ n ≤ n MOD 256 ∧ (n DIV 256 = 0)

Number: 12
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- 0 < 256
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 [] |- ∀m n. m * n = n * m
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m),
 Abbrev (s0 = n2s ((n − n MOD 256) DIV 256)), n ≠ 0, n MOD 256 ≠ 0,
 0 < n MOD 256, (n − n MOD 256) DIV 256 < n,
 s2n s0 = (n − n MOD 256) DIV 256, (n − n MOD 256) DIV 256 = n DIV 256]
|- 256 * (n DIV 256) + n MOD 256 = n

Number: 13
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 []
|- (0 + m = m) ∧ (m + 0 = m) ∧ (SUC m + n = SUC (m + n)) ∧
   (m + SUC n = SUC (m + n))
 [] |- 0 < 256
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m), Abbrev (s0 = n2s ((n − r) DIV 256)),
 Abbrev (r = if r0 = 0 then 256 else r0), Abbrev (r0 = n MOD 256),
 n ≠ 0, 0 < r, (n − r) DIV 256 < n, n MOD 256 < 256, r0 = 0,
 s2n s0 = (n − r) DIV 256] |- ∃q. n = q * 256

Number: 15
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 []
|- (0 + m = m) ∧ (m + 0 = m) ∧ (SUC m + n = SUC (m + n)) ∧
   (m + SUC n = SUC (m + n))
 [] |- 0 < 256
Goal: 
[Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = if r0 = 0 then 256 else r0), ORD c < 256, n2s (s2n s) = s,
 r0 = 0, r0 = (ORD c + 1) MOD 256] |- ∃q. ORD c + 1 = q * 256

Number: 16
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀a. CHR (ORD a) = a
Goal: 
[T, Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = 256), ORD c < 256, n2s (s2n s) = s, q = 1, r0 = 0,
 ORD c = 255, ORD c + 1 = 256] |- c = #"\255"

Number: 19
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- n2s (s2n s) = s
Goal:  [] |- (s2n x = s2n y) ⇔ (x = y)

Number: 21
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- ∀n. ∃s. n = s2n s

Number: 22
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [(ALOOKUP l q = NONE) ⇔ ∀k v. MEM (k,v) l ⇒ k ≠ q]
|- ∃v. (v = r) ∨ MEM (q,v) l

Number: 23
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [] |- (y = fm ' x) ∧ x ∈ FDOM fm ⇔ x ∈ FDOM fm ∧ (fm ' x = y)

Number: 24
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal: 
[∀l1 l2.
   (alist_to_fmap l1 = alist_to_fmap l2) ⇒
   (alist_to_fmap (ls ++ l1) = alist_to_fmap (ls ++ l2)),
 alist_to_fmap l1 = alist_to_fmap l2]
|- alist_to_fmap (ls ++ l1) |+ (q,r) = alist_to_fmap (ls ++ l2) |+ (q,r)

Number: 31
Status: Unsatisfiable
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM f,
 x ∈ FDOM g] |- ∃a. g ' x [] = SOME a

Number: 32
Status: Unsatisfiable
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM g,
 x ∈ FDOM f] |- ∃a. f ' x [] = SOME a

Number: 40
Status: Unsatisfiable
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ FINITE {p | ∃ft'. apply_path p (fm ' k) = SOME ft'}]
|- (∃h t ft'.
      (x = h::t) ∧ (apply_path t (fm ' h) = SOME ft') ∧ h ∈ FDOM fm) ⇔
   ∃k x' ft'.
     ((x = k::x') ∧ (apply_path x' (fm ' k) = SOME ft')) ∧ k ∈ FDOM fm

Number: 41
Status: Unsatisfiable
Info: higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ ∃r. relrec h (fm ' k) r]
|- ∃f. ∀k. k ∈ FDOM fm ⇒ relrec h (fm ' k) (f k)

Number: 45
Status: Unsatisfiable
Info: bool num higher-order proof 
Thm list: 
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1,
 x = EL x' (FILTER ($= x) l1), x = EL x' (FILTER ($= x) l2), m1 ≥ m2,
 m2 ≥ m1, MEM (EL x' (FILTER ($= x) l1)) l1,
 MEM (EL x' (FILTER ($= x) l2)) l2]
|- EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2)

Number: 46
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  []
|- ∀x'.
     x' ∈ FDOM b ∧ (x = f x' (b ' x')) ⇔
     (x' ∈ FDOM b ∧ (x = f x' (b ' x'))) ∧ x' ∈ FDOM b

Number: 47
Status: Unsatisfiable
Info: polymorph bool proof 
Thm list: 
 [] |- dimindex (:α) = if FINITE 𝕌(:α) then CARD 𝕌(:α) else 1
Goal:  [] |- INFINITE 𝕌(:α) ⇒ (dimindex (:α) = 1)

Number: 50
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE 𝕌(:α), FINITE 𝕌(:β), ¬(FINITE ISL ∧ FINITE ISR)]
|- 1 = CARD 𝕌(:α) + CARD 𝕌(:β)

Number: 51
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE ISL, FINITE ISR, ¬(FINITE 𝕌(:α) ∧ FINITE 𝕌(:β))]
|- CARD (ISL ∪ ISR) = 1

Number: 52
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0B a) ∨ IS_BIT0B (BIT0B a)

Number: 53
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0A a) ∨ IS_BIT0B (BIT0A a)

Number: 54
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT0A y = BIT0A a

Number: 55
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT0B y = BIT0B a

Number: 58
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), ¬(FINITE IS_BIT0A ∧ FINITE IS_BIT0B)] |- F

Number: 59
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT0A, FINITE IS_BIT0B, INFINITE 𝕌(:α)]
|- CARD (IS_BIT0A ∪ IS_BIT0B) = 1

Number: 60
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT0A, FINITE IS_BIT0B]
|- CARD IS_BIT0A + CARD IS_BIT0B = 2 * CARD 𝕌(:α)

Number: 61
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A BIT1C ∨ IS_BIT1B BIT1C ∨ IS_BIT1C BIT1C

Number: 62
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1B a) ∨ IS_BIT1B (BIT1B a) ∨ IS_BIT1C (BIT1B a)

Number: 63
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1A a) ∨ IS_BIT1B (BIT1A a) ∨ IS_BIT1C (BIT1A a)

Number: 64
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀x. IS_BIT1A x ∨ IS_BIT1B x ∨ IS_BIT1C x
Goal:  [] |- (IS_BIT1A x ∨ IS_BIT1B x) ∨ IS_BIT1C x

Number: 65
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT1A y = BIT1A a

Number: 66
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT1B y = BIT1B a

Number: 71
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal: 
[FINITE 𝕌(:α), ¬((FINITE IS_BIT1A ∧ FINITE IS_BIT1B) ∧ FINITE IS_BIT1C)]
|- 1 = 2 * CARD 𝕌(:α) + 1

Number: 72
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C, INFINITE 𝕌(:α)]
|- CARD (IS_BIT1A ∪ IS_BIT1B ∪ IS_BIT1C) = 1

Number: 73
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C]
|- CARD IS_BIT1A + CARD IS_BIT1B = 2 * CARD 𝕌(:α)

Number: 76
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- dimword (:α) = 2 ** dimindex (:α)
 [] |- 0 < dimindex (:α)
 [] |- (∀m. m ** 0 = 1) ∧ ∀m n. m ** SUC n = m * m ** n
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m < b ** n ⇔ m < n
 [] |- 1 < 2
Goal:  [] |- 1 < dimword (:α)

Number: 79
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- dimindex (:α) < dimword (:α)
 [] |- 0 < dimindex (:α)
Goal:  [] |- ∀n. n MOD dimindex (:α) < dimword (:α)

Number: 80
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal: 
[P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n)),
 n < dimword (:α) ⇒ P (n2w n)] |- SUC n < dimword (:α) ⇒ P (n2w (SUC n))

Number: 81
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal:  [P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n))]
|- 0 < dimword (:α) ⇒ P 0w

Number: 82
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
Goal:  [Abbrev (WL = dimword (:α)), 0 < WL, WL = 2 * INT_MIN (:α)]
|- (n = n DIV WL * WL + n MOD WL) ∧ n MOD WL < WL

Number: 83
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n r. r < n ⇒ ∀q. (q * n + r) DIV n = q
 [] |- ∀m n. m * n = n * m
 [] |- ∀m n p. m * (n * p) = m * n * p
Goal: 
[Abbrev (q = (q * (2 * INT_MIN (:α)) + r) DIV (2 * INT_MIN (:α))),
 Abbrev (r = (q * (2 * INT_MIN (:α)) + r) MOD (2 * INT_MIN (:α))),
 Abbrev (2 * INT_MIN (:α) = dimword (:α)), ¬(INT_MIN (:α) ≤ r),
 r < INT_MIN (:α), r < 2 * INT_MIN (:α), 0 < 2 * INT_MIN (:α),
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- (q * (2 * INT_MIN (:α)) + r) DIV INT_MIN (:α) = 2 * q

Number: 84
Status: Unsatisfiable
Info: polymorph bool num proof 
Thm list: 
 [] |- 0 ≠ 1 ∧ 0 < 2
 [] |- ∀n. 0 < n ⇒ ∀k. (k * n) MOD n = 0
 [] |- ∀m n. m * n = n * m
 [] |- INT_MIN (:α) = 2 ** (dimindex (:α) − 1)
Goal: 
[Abbrev (WL = dimword (:α)), Abbrev (q = n DIV WL),
 Abbrev (r = n MOD WL), ¬(INT_MIN (:α) ≤ r), r < WL, r < INT_MIN (:α),
 0 < WL, WL = 2 * INT_MIN (:α), n = q * WL + r,
 n DIV INT_MIN (:α) = 2 * q,
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- F

Number: 86
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- ∀w.
     ¬(dimindex (:β) < dimindex (:α) ∧ dimindex (:β) < dimindex (:γ)) ⇒
     (sw2sw (sw2sw w) = sw2sw w)
Goal:  [¬(dimindex (:β) < dimindex (:α) ∧ dimindex (:β) < dimindex (:γ))]
|- sw2sw (sw2sw w) = sw2sw w

Number: 87
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. m = n + (p + 1)
 [] |- ∀m. SUC m = m + 1
 [] |- (∀n. 0 + n = n) ∧ ∀m n. SUC m + n = SUC (m + n)
Goal: 
[T, i < dimindex (:α), 0 < dimindex (:α) − l, l ≤ dimindex (:α) − 1,
 dimindex (:α) ≤ SUC h] |- ∃x. dimindex (:α) − l = SUC x

Number: 88
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[T, i < dimindex (:α), SUC x ≤ i, dimindex (:α) ≤ SUC h,
 dimindex (:α) ≤ i + (l + 1), l + x = dimindex (:α) − 1,
 dimindex (:α) − l = SUC x] |- BIT (dimindex (:α) − 1) n ⇔ BIT (l + x) n

Number: 89
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[T, i < SUC x, dimindex (:α) ≤ SUC h, dimindex (:α) ≤ i + (l + 1),
 i + l = dimindex (:α) − 1, dimindex (:α) − l = SUC x]
|- BIT (dimindex (:α) − 1) n ⇔ BIT (i + l) n

Number: 90
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[i < SUC (h − l), i < dimindex (:α), SUC h < dimindex (:α), h ≤ i + l,
 l ≤ h, i + l = h] |- BIT h n ⇔ BIT (i + l) n

Number: 91
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w. w2n (w2w w) ≤ w2n w
 [] |- ∀w. w2n w < dimword (:α)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal:  [] |- ∀w. w2n (w2w w) < dimword (:α)

Number: 92
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m ≤ b ** n ⇔ m ≤ n
 [] |- 1 < 2
 [] |- ∀n. (1 ** n = 1) ∧ (n ** 1 = n)
 [] |- 1 ≤ dimindex (:α)
Goal:  [] |- 2 ≤ 2 ** dimindex (:α)

Number: 93
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w. w2n (w2w w) < dimword (:α)
 [] |- ∀w. w2n (w2w w) ≤ w2n w
 [] |- ∀h l w. w2n ((h -- l) w) < 2 ** (SUC h − l)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
Goal:  [] |- w2n (w2w ((h -- l) w)) < 2 ** (SUC h − l)

Number: 95
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- i + (l + n) ≤ h + n ⇔ i + l ≤ h
Goal: 
[i < dimindex (:α), i < dimindex (:β), i < dimindex (:γ),
 i + l < dimindex (:β), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ)]
|- i + l ≤ h ∧ i + (l + n) ≤ m ∧ w ' (i + (l + n)) ⇔
   (i + (l + n) ≤ m ∧ i + (l + n) ≤ h + n) ∧ w ' (i + (l + n))

Number: 96
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀n. n ≠ 0 ⇔ 0 < n
Goal: 
[FINITE 𝕌(:β), FINITE 𝕌(:γ), i < dimindex (:α), i < dimindex (:δ),
 dimindex (:γ) ≤ i, m + 1 ≤ l, h = m + dimindex (:β), dimindex (:γ) = 0,
 h + 1 = l + dimindex (:δ)]
|- i + (m + 1) ≤ dimindex (:α) − 1 ∧ w ' (i + (m + 1)) ⇔
   i + l ≤ dimindex (:α) − 1 ∧ w ' (i + l)

Number: 97
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀m n. n ≤ m ⇒ ∃p. p + n = m
 [] |- ∀m n. m + n = n + m
Goal:  [Abbrev (A = dimindex (:α)), ¬(i < A), i < dimindex (:β), 0 < A]
|- ∃x. i = x + A

Number: 98
Status: Unsatisfiable
Info: num proof 
Thm list: 
 []
|- ∀a b n. n ≠ 0 ∧ 2 ** a ≤ n ∧ n < 2 ** b ⇒ ∃i. a ≤ i ∧ i < b ∧ BIT i n
Goal: 
[∀m. m < n' ⇒ ¬BIT (dimindex (:α) − (m + 1)) n, n ≠ 0,
 n MOD 2 ** dimindex (:α) ≠ 0, n < 2 ** dimindex (:α),
 2 ** SUC (dimindex (:α) − (n' + 1)) ≤ n,
 BIT (dimindex (:α) − (n' + 1)) n]
|- ∃i. SUC (dimindex (:α) − (n' + 1)) ≤ i ∧ i < dimindex (:α) ∧ BIT i n

Number: 100
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀n i. i < dimindex (:α) ⇒ (n2w n ' i ⇔ BIT i n)
Goal:  [n ≠ 0, i < dimindex (:α), n < 2 ** dimindex (:α), BIT i n]
|- ∃n'. n2w n ' n'

Number: 101
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ UINT_MAXw, i ≠ n, ¬w ' i, i < n, i < dimindex (:α),
 n < i + (1 + n), 0 < n, 0 < 1 + n, dimindex (:α) = SUC n, w ' n,
 w ' (n − SUC (n − i − 1))] |- F

Number: 102
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ 0w, i ≠ n, ¬w ' n, ¬w ' (n − SUC (n − i − 1)), i < n,
 i < dimindex (:α), n < i + (1 + n), 0 < n, 0 < 1 + n,
 dimindex (:α) = SUC n, w ' i] |- F

Number: 103
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v + w = w + v
 [] |- ∀w. -w + w = 0w
Goal:  [] |- ∀w. w + -w = 0w

Number: 104
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v + w − w = v
 [] |- ∀v w. v − w + w = v
Goal:  [] |- ∀v w x. (v + w = x) ⇔ (v = x − w)

