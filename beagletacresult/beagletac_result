Status: Unsatisfiable
Info: polymorph higher-order num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h] |- LENGTH (SND (SPLITP P t)) < SUC (LENGTH t)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [P h] |- (l ≠ "" ∨ r ≠ STRING h t) ∨ (l = "")

Status: Unsatisfiable
Info: polymorph higher-order num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- ∀l. l ≠ [] ⇒ LENGTH (TL l) < LENGTH l
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h, SND (SPLITP P t) ≠ ""]
|- LENGTH (TL (SND (SPLITP P t))) < SUC (LENGTH t)

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀cs. ∃s. cs = EXPLODE s

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀s. ∃cs. s = IMPLODE cs

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (EXPLODE s1 = EXPLODE s2) ⇔ (s1 = s2)

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (IMPLODE cs1 = IMPLODE cs2) ⇔ (cs1 = cs2)

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ¬(ORD h'' < ORD h'),
 ORD h = ORD h', ORD h'' = ORD h, s1 < t, t < t'] |- s1 < t'

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h ⇒ m < ORD h',
 ∀p. ORD h' < p ⇒ ORD h < p, ¬(ORD h'' < ORD h'), ORD h < ORD h',
 ORD h'' = ORD h, s1 < t] |- s1 < t'

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h'' ⇒ m < ORD h,
 ∀p. ORD h < p ⇒ ORD h'' < p, ¬(ORD h'' < ORD h'), ORD h'' < ORD h,
 ORD h = ORD h', t < t'] |- s1 < t'

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀a. CHR (ORD a) = a
Goal: 
[T, Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = 256), ORD c < 256, n2s (s2n s) = s, q = 1, r0 = 0,
 ORD c = 255, ORD c + 1 = 256] |- c = #"\255"

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- (n2s x = n2s y) ⇔ (x = y)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- n2s (s2n s) = s
Goal:  [] |- (s2n x = s2n y) ⇔ (x = y)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- ∀n. ∃s. n = s2n s

Status: Unsatisfiable
Thm list: 
Goal:  [(ALOOKUP l q = NONE) ⇔ ∀k v. MEM (k,v) l ⇒ k ≠ q]
|- ∃v. (v = r) ∨ MEM (q,v) l

Status: Unsatisfiable
Thm list: 
Goal:  [] |- (y = fm ' x) ∧ x ∈ FDOM fm ⇔ x ∈ FDOM fm ∧ (fm ' x = y)

Status: Unsatisfiable
Thm list: 
Goal: 
[∀l1 l2.
   (alist_to_fmap l1 = alist_to_fmap l2) ⇒
   (alist_to_fmap (ls ++ l1) = alist_to_fmap (ls ++ l2)),
 alist_to_fmap l1 = alist_to_fmap l2]
|- alist_to_fmap (ls ++ l1) |+ (q,r) = alist_to_fmap (ls ++ l2) |+ (q,r)

function: raw_match_type message: different constructorsThm list: 
 [] |- ∀al k v. (ALOOKUP al k = SOME v) ⇒ MEM (k,v) al
Goal:  [¬∃p_2. MEM (k,p_2) ls, ALOOKUP ls k = SOME v] |- fm ' k = v
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀al k v. (ALOOKUP al k = SOME v) ⇒ MEM (k,v) al
Goal:  [¬∃p_2. MEM (k,p_2) ls, ALOOKUP ls k = SOME v] |- k ∈ FDOM fm
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < n'' ⇒ EL m (q::MAP FST ls) ≠ FST (EL n ls), q ≠ FST (EL n ls),
 n < m, n < LENGTH ls, EL m (MAP FST ls) = FST (EL n ls),
 EL n'' (q::MAP FST ls) = FST (EL n ls)]
|- EL m (MAP SND ls) = EL n'' (r::MAP SND ls)
