Status: Unsatisfiable
Info: polymorph higher-order num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h] |- LENGTH (SND (SPLITP P t)) < SUC (LENGTH t)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [P h] |- (l ≠ "" ∨ r ≠ STRING h t) ∨ (l = "")

Status: Unsatisfiable
Info: polymorph higher-order num 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- ∀l. l ≠ [] ⇒ LENGTH (TL l) < LENGTH l
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [¬P h, SND (SPLITP P t) ≠ ""]
|- LENGTH (TL (SND (SPLITP P t))) < SUC (LENGTH t)

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀cs. ∃s. cs = EXPLODE s

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀s. ∃cs. s = IMPLODE cs

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (EXPLODE s1 = EXPLODE s2) ⇔ (s1 = s2)

Status: Unsatisfiable
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (IMPLODE cs1 = IMPLODE cs2) ⇔ (cs1 = cs2)

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ¬(ORD h'' < ORD h'),
 ORD h = ORD h', ORD h'' = ORD h, s1 < t, t < t'] |- s1 < t'

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h ⇒ m < ORD h',
 ∀p. ORD h' < p ⇒ ORD h < p, ¬(ORD h'' < ORD h'), ORD h < ORD h',
 ORD h'' = ORD h, s1 < t] |- s1 < t'

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h'' ⇒ m < ORD h,
 ∀p. ORD h < p ⇒ ORD h'' < p, ¬(ORD h'' < ORD h'), ORD h'' < ORD h,
 ORD h = ORD h', t < t'] |- s1 < t'

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀a. CHR (ORD a) = a
Goal: 
[T, Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = 256), ORD c < 256, n2s (s2n s) = s, q = 1, r0 = 0,
 ORD c = 255, ORD c + 1 = 256] |- c = #"\255"

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- (n2s x = n2s y) ⇔ (x = y)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- n2s (s2n s) = s
Goal:  [] |- (s2n x = s2n y) ⇔ (x = y)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- ∀n. ∃s. n = s2n s

Status: Unsatisfiable
Thm list: 
Goal:  [(ALOOKUP l q = NONE) ⇔ ∀k v. MEM (k,v) l ⇒ k ≠ q]
|- ∃v. (v = r) ∨ MEM (q,v) l

Status: Unsatisfiable
Thm list: 
Goal:  [] |- (y = fm ' x) ∧ x ∈ FDOM fm ⇔ x ∈ FDOM fm ∧ (fm ' x = y)

Status: Unsatisfiable
Thm list: 
Goal: 
[∀l1 l2.
   (alist_to_fmap l1 = alist_to_fmap l2) ⇒
   (alist_to_fmap (ls ++ l1) = alist_to_fmap (ls ++ l2)),
 alist_to_fmap l1 = alist_to_fmap l2]
|- alist_to_fmap (ls ++ l1) |+ (q,r) = alist_to_fmap (ls ++ l2) |+ (q,r)

function: raw_match_type message: different constructorsThm list: 
 [] |- ∀al k v. (ALOOKUP al k = SOME v) ⇒ MEM (k,v) al
Goal:  [¬∃p_2. MEM (k,p_2) ls, ALOOKUP ls k = SOME v] |- fm ' k = v
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀al k v. (ALOOKUP al k = SOME v) ⇒ MEM (k,v) al
Goal:  [¬∃p_2. MEM (k,p_2) ls, ALOOKUP ls k = SOME v] |- k ∈ FDOM fm
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < n'' ⇒ EL m (q::MAP FST ls) ≠ FST (EL n ls), q ≠ FST (EL n ls),
 n < m, n < LENGTH ls, EL m (MAP FST ls) = FST (EL n ls),
 EL n'' (q::MAP FST ls) = FST (EL n ls)]
|- EL m (MAP SND ls) = EL n'' (r::MAP SND ls)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(n < m),
 h ≠ FST (EL n ls), EL n (MAP FST ls) ≠ FST (EL n ls), m < LENGTH ls,
 n < LENGTH ls, SUC n < z, FST (EL m ls) = FST (EL n ls),
 EL z (h::MAP FST ls) = FST (EL n ls)]
|- SND (EL m ls) = EL z (r::MAP SND ls)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[T,
 ∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < SUC z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(n < m),
 ¬(n < z), h ≠ FST (EL n ls), EL m (MAP FST ls) ≠ FST (EL n ls), m < z,
 m < LENGTH ls, n < LENGTH ls, z < LENGTH ls,
 FST (EL m ls) = FST (EL n ls), FST (EL z ls) = FST (EL n ls)]
|- SND (EL m ls) = SND (EL z ls)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n l. n < LENGTH l ⇒ ∀f. EL n (MAP f l) = f (EL n l)
Goal: 
[∀k'.
   ALOOKUP ls k' =
   if ∃y'. (k' = FST y') ∧ ∃n. n < LENGTH ls ∧ (y' = EL n ls) then
     SOME (EL (LEAST n. EL n (MAP FST ls) = k') (MAP SND ls))
   else NONE, ∀m'. m' < m ⇒ EL m' (MAP FST ls) ≠ FST (EL n ls),
 ∀m. m < SUC z ⇒ EL m (h::MAP FST ls) ≠ FST (EL n ls), ¬(m < z),
 ¬(n < m), ¬(n < z), h ≠ FST (EL n ls), m < LENGTH ls, n < LENGTH ls,
 z < m, z < LENGTH ls, FST (EL m ls) = FST (EL n ls),
 FST (EL z ls) = FST (EL n ls)] |- SND (EL m ls) = SND (EL z ls)
Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM f,
 x ∈ FDOM g] |- ∃a. g ' x [] = SOME a

Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM g,
 x ∈ FDOM f] |- ∃a. f ' x [] = SOME a

function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [] |- ∀a. ∃c. wf c ∧ (a = fromF c)
function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [] |- wf x ∧ wf y ⇒ ((fromF x = fromF y) ⇔ (x = y))
function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [] |- (toF f = toF g) ⇔ (f = g)
Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- ∀f g x. x ∈ FDOM g ⇒ ((f o_f g) ' x = f (g ' x))
Goal:  [∀x. x ∈ FDOM f ⇒ (toF (f ' x) = (toF o_f g) ' x), FDOM f = FDOM g]
|- ∀x. x ∈ FDOM g ⇒ (toF (f ' x) = toF (g ' x))

function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [∀k. k ∈ FDOM fm ⇒ wf (fm ' k), x ∈ FDOM fm]
|- fm ' x = toF (fromF (fm ' x))
function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal:  [] |- (∀ft. P ft) ⇔ ∀f. wf f ⇒ P (fromF f)
function: raw_match_type message: different tyopsThm list: 
 [] |- (∀a. fromF (toF a) = a) ∧ ∀r. wf r ⇔ (toF (fromF r) = r)
Goal: 
[P (fromF (construct a (toF o fromF o_f fm))),
 ∀k. k ∈ FDOM fm ⇒ wf (fm ' k) ∧ P (fromF (fm ' k)), x ∈ FDOM fm]
|- toF (fromF (fm ' x)) = fm ' x
Status: Unsatisfiable
Info: higher-order lambda-lift bool 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ FINITE {p | ∃ft'. apply_path p (fm ' k) = SOME ft'}]
|- (∃h t ft'.
      (x = h::t) ∧ (apply_path t (fm ' h) = SOME ft') ∧ h ∈ FDOM fm) ⇔
   ∃k x' ft'.
     ((x = k::x') ∧ (apply_path x' (fm ' k) = SOME ft')) ∧ k ∈ FDOM fm

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ ∃r. relrec h (fm ' k) r]
|- ∃f. ∀k. k ∈ FDOM fm ⇒ relrec h (fm ' k) (f k)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀ft. ∃r. relrec h ft r
Goal:  [d ∈ FDOM fm]
|- (∃x. relrec h (fm ' d) x) ∧
   ∀x. relrec h (fm ' d) x ⇒ relrec h (fm ' d) x

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l x. MEM x l ⇔ ∃n. n < LENGTH l ∧ (x = EL n l)
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1, x' < m2, m1 ≥ m2,
 m2 ≥ m1]
|- MEM (EL x' (FILTER ($= x) l1)) (FILTER ($= x) l1) ∧
   MEM (EL x' (FILTER ($= x) l2)) (FILTER ($= x) l2)
function: write_tff message: 
[T ⇎ F, 0 ≤ m1, 0 ≤ m2, 0 ≤ x',
 0 ≤ App LENGTH (App (App FILTER (App $= x)) l1),
 0 ≤ App LENGTH (App (App FILTER (App $= x)) l2),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App EL x') (App (App FILTER (App $= x)) l1) ≠
 App (App EL x') (App (App FILTER (App $= x)) l2) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App EL x') (App (App FILTER (App $= x)) l1) ≠
 App (App EL x') (App (App FILTER (App $= x)) l2) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ App Abbrev F ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ App Abbrev T ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ App Abbrev T ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l1)))
   (App set l1) ∨ m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l1)))
   (App set l1) ∨ (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l2)))
   (App set l2) ∨ m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l2)))
   (App set l2) ∨ (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ x' < m1 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ x' < m1 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l1)) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l1)) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l2)) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l2)) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ m1 ≥ m2 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ m1 ≥ m2 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ m2 ≥ m1 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 m2 ≠ App LENGTH (App (App FILTER (App $= x)) l2) ∨ m2 ≥ m1 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App EL x') (App (App FILTER (App $= x)) l1) ≠
 App (App EL x') (App (App FILTER (App $= x)) l2) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App EL x') (App (App FILTER (App $= x)) l1) ≠
 App (App EL x') (App (App FILTER (App $= x)) l2) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ App Abbrev F ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ App Abbrev F ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ App Abbrev T ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l1)))
   (App set l1) ∨ m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l1)))
   (App set l1) ∨ (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l2)))
   (App set l2) ∨ m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 App (App $IN (App (App EL x') (App (App FILTER (App $= x)) l2)))
   (App set l2) ∨ (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ x' < m1 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ x' < m1 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l1)) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l1)) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l2)) ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨
 (x = App (App EL x') (App (App FILTER (App $= x)) l2)) ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ m1 ≥ m2 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ m1 ≥ m2 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1)),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ m2 ≥ m1 ∨
 m1 ≠ App LENGTH (App (App FILTER (App $= x)) l1),
 (m2 = App LENGTH (App (App FILTER (App $= x)) l2)) ∨ m2 ≥ m1 ∨
 (m1 = App LENGTH (App (App FILTER (App $= x)) l1))] |- FThm list: 
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1,
 x = EL x' (FILTER ($= x) l1), x = EL x' (FILTER ($= x) l2), m1 ≥ m2,
 m2 ≥ m1, MEM (EL x' (FILTER ($= x) l1)) l1,
 MEM (EL x' (FILTER ($= x) l2)) l2]
|- EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2)
Status: Unsatisfiable
Thm list: 
Goal:  []
|- ∀x'.
     x' ∈ FDOM b ∧ (x = f x' (b ' x')) ⇔
     (x' ∈ FDOM b ∧ (x = f x' (b ' x'))) ∧ x' ∈ FDOM b

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀S. FINITE S ⇒ ∀t f. BIJ f S t ∧ FINITE t ⇒ (CARD S = CARD t)
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
 [] |- BIJ INL 𝕌(:α) ISL ∧ BIJ INR 𝕌(:β) ISR
Goal:  []
|- (FINITE 𝕌(:α) ⇒ (CARD ISL = CARD 𝕌(:α))) ∧
   (FINITE 𝕌(:β) ⇒ (CARD ISR = CARD 𝕌(:β)))
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀s.
     FINITE s ⇒
     ∀t. FINITE t ⇒ (CARD (s ∪ t) + CARD (s ∩ t) = CARD s + CARD t)
 [] |- ∀m. m + 0 = m
 [] |- CARD ∅ = 0
 [] |- ISL ∩ ISR = ∅
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  []
|- FINITE 𝕌(:α) ∧ FINITE 𝕌(:β) ⇒
   (CARD (ISL ∪ ISR) = CARD ISL + CARD ISR)
function: raw_match_type message: different tyopsThm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE 𝕌(:α), FINITE 𝕌(:β), ¬(FINITE ISL ∧ FINITE ISR)]
|- 1 = CARD 𝕌(:α) + CARD 𝕌(:β)
function: raw_match_type message: different tyopsThm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE ISL, FINITE ISR, ¬(FINITE 𝕌(:α) ∧ FINITE 𝕌(:β))]
|- CARD (ISL ∪ ISR) = 1
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0B a) ∨ IS_BIT0B (BIT0B a)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0A a) ∨ IS_BIT0B (BIT0A a)

Status: Unsatisfiable
Thm list: 
Goal:  [T] |- ∃y. BIT0A y = BIT0A a

Status: Unsatisfiable
Thm list: 
Goal:  [T] |- ∃y. BIT0B y = BIT0B a

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀S. FINITE S ⇒ ∀t f. BIJ f S t ∧ FINITE t ⇒ (CARD S = CARD t)
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- BIJ BIT0A 𝕌(:α) IS_BIT0A
Goal:  [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀S. FINITE S ⇒ ∀t f. BIJ f S t ∧ FINITE t ⇒ (CARD S = CARD t)
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- BIJ BIT0B 𝕌(:α) IS_BIT0B
Goal:  [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
function: raw_match_type message: different constructorsThm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), ¬(FINITE IS_BIT0A ∧ FINITE IS_BIT0B)] |- F
function: raw_match_type message: different tyopsThm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT0A, FINITE IS_BIT0B, INFINITE 𝕌(:α)]
|- CARD (IS_BIT0A ∪ IS_BIT0B) = 1
function: raw_match_type message: different tyopsThm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT0A, FINITE IS_BIT0B]
|- CARD IS_BIT0A + CARD IS_BIT0B = 2 * CARD 𝕌(:α)
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A BIT1C ∨ IS_BIT1B BIT1C ∨ IS_BIT1C BIT1C

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1B a) ∨ IS_BIT1B (BIT1B a) ∨ IS_BIT1C (BIT1B a)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1A a) ∨ IS_BIT1B (BIT1A a) ∨ IS_BIT1C (BIT1A a)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀x. IS_BIT1A x ∨ IS_BIT1B x ∨ IS_BIT1C x
Goal:  [] |- (IS_BIT1A x ∨ IS_BIT1B x) ∨ IS_BIT1C x

Status: Unsatisfiable
Thm list: 
Goal:  [T] |- ∃y. BIT1A y = BIT1A a

Status: Unsatisfiable
Thm list: 
Goal:  [T] |- ∃y. BIT1B y = BIT1B a

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀S. FINITE S ⇒ ∀t f. BIJ f S t ∧ FINITE t ⇒ (CARD S = CARD t)
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- BIJ BIT1A 𝕌(:α) IS_BIT1A
Goal:  [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀S. FINITE S ⇒ ∀t f. BIJ f S t ∧ FINITE t ⇒ (CARD S = CARD t)
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- BIJ BIT1B 𝕌(:α) IS_BIT1B
Goal:  [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
 [] |- ∀P x. x ∈ P ⇔ P x
Goal:  [] |- ∀x. (x = BIT1C) ⇔ {BIT1C} x
function: raw_match_type message: different constructorsThm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- ∀s t. FINITE (s ∪ t) ⇔ FINITE s ∧ FINITE t
Goal:  [FINITE 𝕌(:α)] |- FINITE (IS_BIT1A ∪ IS_BIT1B)
function: raw_match_type message: different tyopsThm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal: 
[FINITE 𝕌(:α), ¬((FINITE IS_BIT1A ∧ FINITE IS_BIT1B) ∧ FINITE IS_BIT1C)]
|- 1 = 2 * CARD 𝕌(:α) + 1
function: raw_match_type message: different tyopsThm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C, INFINITE 𝕌(:α)]
|- CARD (IS_BIT1A ∪ IS_BIT1B ∪ IS_BIT1C) = 1
function: raw_match_type message: different tyopsThm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C]
|- CARD IS_BIT1A + CARD IS_BIT1B = 2 * CARD 𝕌(:α)
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- dimword (:α) = 2 ** dimindex (:α)
 [] |- 0 < dimindex (:α)
 [] |- (∀m. m ** 0 = 1) ∧ ∀m n. m ** SUC n = m * m ** n
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m < b ** n ⇔ m < n
 [] |- 1 < 2
Goal:  [] |- 1 < dimword (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- dimindex (:α) < dimword (:α)
 [] |- 0 < dimindex (:α)
Goal:  [] |- ∀n. n MOD dimindex (:α) < dimword (:α)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal: 
[P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n)),
 n < dimword (:α) ⇒ P (n2w n)] |- SUC n < dimword (:α) ⇒ P (n2w (SUC n))

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal:  [P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n))]
|- 0 < dimword (:α) ⇒ P 0w

function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀a b n.
     ¬BIT n a ∨ ¬BIT n b ⇒
     (SBIT (BIT n a ∨ BIT n b) n = SBIT (BIT n a) n + SBIT (BIT n b) n)
 [] |- n < SUC n
Goal: 
[∀a b.
   (∀i. i < n ⇒ ¬BIT i a ∨ ¬BIT i b) ⇒
   (SUM n (λi. SBIT (BIT i a) i) + SUM n (λi. SBIT (BIT i b) i) =
    BITWISE n $\/ a b), ∀i. i < SUC n ⇒ ¬BIT i a ∨ ¬BIT i b]
|- SBIT (BIT n a) n + SBIT (BIT n b) n + BITWISE n $\/ a b =
   SBIT (BIT n a ∨ BIT n b) n + BITWISE n $\/ a b
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[i < SUC (h − l), i < dimindex (:α), SUC h < dimindex (:α), h ≤ i + l,
 l ≤ h, i + l = h] |- BIT h n ⇔ BIT (i + l) n

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m ≤ b ** n ⇔ m ≤ n
 [] |- 1 < 2
 [] |- ∀n. (1 ** n = 1) ∧ (n ** 1 = n)
 [] |- 1 ≤ dimindex (:α)
Goal:  [] |- 2 ≤ 2 ** dimindex (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀w. w2n (w2w w) < dimword (:α)
 [] |- ∀w. w2n (w2w w) ≤ w2n w
 [] |- ∀h l w. w2n ((h -- l) w) < 2 ** (SUC h − l)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
Goal:  [] |- w2n (w2w ((h -- l) w)) < 2 ** (SUC h − l)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀m n p. m < n ∧ n ≤ p ⇒ m < p
 [] |- 0 < dimindex (:α)
Goal: 
[i < dimindex (:α), i < dimindex (:γ), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ), dimindex (:β) ≤ i, dimindex (:β) ≤ i + l]
|- 0 < i + l

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- i + (l + n) ≤ h + n ⇔ i + l ≤ h
Goal: 
[i < dimindex (:α), i < dimindex (:β), i < dimindex (:γ),
 i + l < dimindex (:β), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ)]
|- i + l ≤ h ∧ i + (l + n) ≤ m ∧ w ' (i + (l + n)) ⇔
   (i + (l + n) ≤ m ∧ i + (l + n) ≤ h + n) ∧ w ' (i + (l + n))

function: raw_match_type message: different tyopsThm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀n. n ≠ 0 ⇔ 0 < n
Goal: 
[FINITE 𝕌(:β), FINITE 𝕌(:γ), i < dimindex (:α), i < dimindex (:δ),
 dimindex (:γ) ≤ i, m + 1 ≤ l, h = m + dimindex (:β), dimindex (:γ) = 0,
 h + 1 = l + dimindex (:δ)]
|- i + (m + 1) ≤ dimindex (:α) − 1 ∧ w ' (i + (m + 1)) ⇔
   i + l ≤ dimindex (:α) − 1 ∧ w ' (i + l)
Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀m n. n ≤ m ⇒ ∃p. p + n = m
 [] |- ∀m n. m + n = n + m
Goal:  [Abbrev (A = dimindex (:α)), ¬(i < A), i < dimindex (:β), 0 < A]
|- ∃x. i = x + A

Status: Unsatisfiable
Info: num 
Thm list: 
 []
|- ∀a b n. n ≠ 0 ∧ 2 ** a ≤ n ∧ n < 2 ** b ⇒ ∃i. a ≤ i ∧ i < b ∧ BIT i n
Goal: 
[∀m. m < n' ⇒ ¬BIT (dimindex (:α) − (m + 1)) n, n ≠ 0,
 n MOD 2 ** dimindex (:α) ≠ 0, n < 2 ** dimindex (:α),
 2 ** SUC (dimindex (:α) − (n' + 1)) ≤ n,
 BIT (dimindex (:α) − (n' + 1)) n]
|- ∃i. SUC (dimindex (:α) − (n' + 1)) ≤ i ∧ i < dimindex (:α) ∧ BIT i n

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n i. i < dimindex (:α) ⇒ (n2w n ' i ⇔ BIT i n)
Goal:  [n ≠ 0, i < dimindex (:α), n < 2 ** dimindex (:α), BIT i n]
|- ∃n'. n2w n ' n'
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ UINT_MAXw, i ≠ n, ¬w ' i, i < n, i < dimindex (:α),
 n < i + (1 + n), 0 < n, 0 < 1 + n, dimindex (:α) = SUC n, w ' n,
 w ' (n − SUC (n − i − 1))] |- F

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ 0w, i ≠ n, ¬w ' n, ¬w ' (n − SUC (n − i − 1)), i < n,
 i < dimindex (:α), n < i + (1 + n), 0 < n, 0 < 1 + n,
 dimindex (:α) = SUC n, w ' i] |- F

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀v w. v + w = w + v
 [] |- ∀w. -w + w = 0w
Goal:  [] |- ∀w. w + -w = 0w

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀v w. v + w − w = v
 [] |- ∀v w. v − w + w = v
Goal:  [] |- ∀v w x. (v + w = x) ⇔ (v = x − w)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀v w. v + w = w + v
 [] |- ∀v w x. (v + w = v + x) ⇔ (w = x)
Goal:  [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀w. 0w = -w + w
 [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
Goal:  [-v + v + (-w + w) = 0w, -v + v + (-w + w) = -v + -w + (v + w)]
|- -(v + w) = -v + -w
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
Goal:  [- -w + -w = w + -w] |- - -w = w
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀v w. v − w = v + -w
 [] |- ∀v w x. v + (w + x) = v + w + x
 [] |- ∀w. -w + w = 0w
 [] |- ∀w. w + -w = 0w
 [] |- (∀w. w + 0w = w) ∧ ∀w. 0w + w = w
Goal:  [] |- ∀v w x. (v = w − x) ⇔ (v + x = w)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀v w x. (v = w − x) ⇔ (v + x = w)
Goal:  [] |- ∀v w x. (v − w = x) ⇔ (v = x + w)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀w. - -w = w
Goal:  [] |- ∀w x. (-w = -x) ⇔ (w = x)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀w. 0w − w = -w
 [] |- ∀v w x. (v − w = x − w) ⇔ (v = x)
 [] |- ∀v w. v + w − w = v
Goal:  [] |- ∀a b. (a + b = 0w) ⇔ (a = -b)
Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- ∀w. -w = -1w * w
 [] |- ∀v w. v * w = w * v
 []
|- ∀v w.
     (0w * v = 0w) ∧ (v * 0w = 0w) ∧ (1w * v = v) ∧ (v * 1w = v) ∧
     ((v + 1w) * w = v * w + w) ∧ (v * (w + 1w) = v + v * w)
Goal:  [] |- ∀x. x * -1w = -x

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀h l n. BITS h l n < 2 ** (SUC h − l)
 [] |- ∀m. SUC m − 1 = m
 [] |- ∀l h b. b < 2 ** l ⇒ (BITS h l (2 ** l + b) = BITS h l (2 ** l))
 [] |- ∀b n. BIT b n ⇔ (BITS b b n = 1)
 [] |- ∀b. BIT b (2 ** b)
Goal:  [T, dimindex (:α) = SUC m] |- BIT m (2 ** m + BITS m 1 a)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [n < dimindex (:α)] |- 2 ** n < dimword (:α)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n d. 0 < n ∧ 1 < d ⇒ n DIV d < n
Goal: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 2 ** n < dimword (:α)] |- w2n m DIV 2 ** n < w2n m

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- ∀w. w2n w < dimword (:α)
Goal: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 w2n m DIV 2 ** n < w2n m, 2 ** n < dimword (:α)]
|- w2n m DIV 2 ** n < dimword (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [a < dimword (:α), n < dimindex (:α)] |- 2 ** n < dimword (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- dimindex (:α) < dimword (:α)
Goal:  [] |- n MOD dimindex (:α) < dimword (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- dimindex (:α) < dimword (:α)
Goal:  [] |- n MOD dimindex (:α) < dimword (:α)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- a − b ≤ a ∧ a < SUC a
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal: 
[1 ≤ m, dimindex (:α) = SUC m, BITS m 0 n = 2 ** m + BITS (m − 1) 0 n,
 BIT m n] |- 2 ** m − n MOD 2 ** m < 2 ** SUC m

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- SUC m ≤ 1 ⇔ (m = 0)
 [] |- ∀b n. BIT b n ⇔ (BITS b b n = 1)
 [] |- ∀n a. BITS n n a ≠ 1 ⇔ (BITS n n a = 0)
Goal:  [¬BIT m n, SUC m ≤ 1, dimindex (:α) = SUC m] |- BITS m 0 n = 0

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀a. (dimindex (:α) − 1 = 0) ∧ word_msb a ⇒ (a = 1w)
 [] |- (dimindex (:α) − 1 = 0) ⇒ (dimindex (:α) = 1)
 [] |- ∀n. (1 ** n = 1) ∧ (n ** 1 = n)
 [] |- ∀n k. k < n ⇒ (k MOD n = k)
 [] |- 1 < 2
 [] |- ∀n. w2n (n2w n) = n MOD dimword (:α)
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [] |- ∀a. (dimindex (:α) − 1 = 0) ∧ word_msb a ⇒ (w2n a = 1)
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀a. ¬word_msb a ⇒ if a = 0w then ¬word_msb (-a) else word_msb (-a)
Goal:  [¬word_msb a, ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))]
|- word_msb (-a)
function: raw_match_type message: different tyopsThm list: 
 [] |- -INT_MINw = INT_MINw
 [] |- ∀w v. (-v = w) ⇔ (v = -w)
 [] |- ∀w. - -w = w
 []
|- ∀a.
     word_msb a ⇒
     if (dimindex (:α) − 1 = 0) ∨ (a = INT_MINw) then word_msb (-a)
     else ¬word_msb (-a)
Goal: 
[word_msb a, word_msb (-a),
 ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀b n. b ≠ 0 ⇒ (SLICE b b n + SLICE (b − 1) 0 n = SLICE b 0 n)
 [] |- ∀n. n ≠ 0 ⇒ (SUC n − 2 = n − 1)
Goal:  [m ≠ 0, dimindex (:α) − 1 ≠ 0, n < dimword (:α), dimindex (:α) = SUC m]
|- SLICE m 0 n = SLICE m m n + SLICE (m − 1) 0 n

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a < 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), word_msb a,
 word_msb b, dimindex (:α) − 1 ≠ 0, x < y, y = x + (p + 1),
 w2n a = 2 ** (dimindex (:α) − 1) + x,
 w2n b = 2 ** (dimindex (:α) − 1) + y,
 w2n (-b) = 2 ** (dimindex (:α) − 1) − y]
|- y < 2 ** (dimindex (:α) − 1)

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a ≤ 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, ¬(w2n a < w2n b), b ≠ 0w, dimindex (:α) − 1 ≠ 0,
 w2n a = x, w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a < 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, y ≤ x,
 y ≤ 2 ** dimindex (:α), y ≤ 2 ** (dimindex (:α) − 1), w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- x < 2 ** (dimindex (:α) − 1)

Status: Unsatisfiable
Info: bool num 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a ≤ 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, w2n a < w2n b, w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀a b.
     a < b ⇔
     (word_msb (a − b) ⇎
      (word_msb a ⇎ word_msb b) ∧ (word_msb (a − b) ⇎ word_msb a))
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ word_msb a ∧ word_msb b ∧
     word_msb (a − b) ⇒
     w2n a < w2n b
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ word_msb a ∧ word_msb b ∧
     ¬word_msb (a − b) ⇒
     ¬(w2n a < w2n b)
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ ¬word_msb a ∧ ¬word_msb b ∧
     word_msb (a − b) ⇒
     w2n a < w2n b
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ ¬word_msb a ∧ ¬word_msb b ∧
     ¬word_msb (a − b) ⇒
     ¬(w2n a < w2n b)
Goal:  [dimindex (:α) − 1 ≠ 0]
|- a < b ⇔
   (word_msb a ⇔ word_msb b) ∧ w2n a < w2n b ∨ word_msb a ∧ ¬word_msb b
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ n ≤ m − 1
 [] |- ∀b a. b ≠ 0 ⇒ SLICE (b − 1) 0 a < 2 ** b
 [] |- (∀n. 0 + n = n) ∧ ∀m n. SUC m + n = SUC (m + n)
Goal: 
[m ≠ 0, ¬BIT m n, 1 ≤ m, dimindex (:α) = SUC m,
 SLICE m m n + SLICE (m − 1) 0 n = SLICE m 0 n, SLICE m m n = 0]
|- SLICE m 0 n ≤ 2 ** m − 1

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀w v. -(v − w) = w − v
 [] |- ∀w. word_abs (-w) = word_abs w
Goal:  [] |- ∀a b. word_abs (a − b) = word_abs (b − a)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀w. -w + w = 0w
 [] |- ∀w. w + -w = 0w
 [] |- (∀w. w + 0w = w) ∧ ∀w. 0w + w = w
 [] |- ∀v w x. v + (w + x) = v + w + x
 [] |- ∀v w. v + w = w + v
Goal:  [] |- a + (-b + -1w) + 1w = a + -b

Status: Unsatisfiable
Thm list: 
Goal:  []
|- (word_msb x ⇔ ¬word_msb y) ∧ (word_msb x ⇎ word_msb (x + ¬y + 1w)) ⇔
   (word_msb x ⇎ word_msb y) ∧ (word_msb (x + ¬y + 1w) ⇎ word_msb x)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀n a b. a < 2 ** n ∧ b < 2 ** n ⇒ a + b < 2 ** (n + 1)
 [] |- 0 < n ⇒ (n − 1 + 1 = n)
 [] |- 0 < dimindex (:α)
Goal: 
[n < dimword (:α), n < 2 ** (dimindex (:α) − 1), n' < dimword (:α),
 n' < 2 ** (dimindex (:α) − 1)] |- n + n' < 2 ** dimindex (:α)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 []
|- INT_MAX (:α) < INT_MIN (:α) ∧ INT_MIN (:α) ≤ UINT_MAX (:α) ∧
   UINT_MAX (:α) < dimword (:α)
Goal: 
[T, n < dimword (:α), UINT_MAX (:β) MOD dimword (:α) ≤ n,
 dimindex (:β) = dimindex (:α), dimword (:β) = dimword (:α),
 UINT_MAX (:β) ≤ n ∧ n < dimword (:α) ⇒ (n = UINT_MAX (:β))]
|- UINT_MAX (:β) < dimword (:α)

Status: Unsatisfiable
Thm list: 
Goal:  [] |- ∀n. (UINT_MAXw = n) ⇔ (n = UINT_MAXw)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀w n. word_reverse (w ≪ n) = word_reverse w ⋙ n
 [] |- ∀w. word_reverse (word_reverse w) = w
Goal:  [] |- ∀w n. word_reverse (w ⋙ n) = word_reverse w ≪ n

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m. 0 < 2 ** m
Goal:  [] |- 0 < 2 ** n

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀w. n2w (w2n w) = w
Goal:  [y ≠ 0w, 0 < m] |- w2n y ≠ 0
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n d. 0 < n ∧ 1 < d ⇒ n DIV d < n
 [] |- ∀m. 0 < m ⇒ 1 < 2 ** m
 [] |- 0 < x ⇔ x ≠ 0
Goal:  [y ≠ 0w, w2n y ≠ 0, 0 < m] |- w2n y DIV 2 ** m < w2n y

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. m ≤ n ⇔ ∃p. n = m + p
 [] |- ∀m n. m + n = n + m
Goal:  [n < dimword (:α), n' < dimword (:α), n' ≤ n] |- ∃k. n = k + n'

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀w v. (v − w = 0w) ⇔ (v = w)
 [] |- ∀a b. a < b ⇒ a ≠ b
Goal: 
[0w = x − y, 0w ≤ 0w ⇒ 0w ≤ y − 0w, y ≤ x, 0w ≤ y, 0w ≤ x − y, y < x,
 0w < y] |- 0w < x − y
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀w. w − 0w = w
Goal:  [0w = y, y ≤ x, 0w ≤ y, y < x] |- x − y < x ∨ (x − y = x)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀w. w − 0w = w
Goal:  [y = x, y ≤ x, 0w ≤ y, 0w < y] |- 0w < x ∨ (0w = x)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) x,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) y]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) y,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) x]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n

function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[∀P f.
   (∀j. j < n ⇒ ¬P j) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ F), ∀j. j < n ⇒ ¬P j,
 ∀j. j < SUC n ⇒ ¬P j] |- ¬FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P i,
 ∀f P i.
   i < n ∧ P i ∧ (∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j)) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i),
 ∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j),
 ∀i j. P i ∧ P j ∧ i < SUC n ∧ j < SUC n ⇒ (i = j), i < n, i < SUC n]
|- FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P i,
 ∀f P i.
   i < n ∧ P i ∧ (∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j)) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i),
 ∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j), i < n, i < SUC n,
 FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i, P n ⇒ (n = i)]
|- f i ∨ P n ∧ f n ⇔ f i
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀i.
   i < dimindex (:α) ⇒
   ¬(h + (i + 1) ≤ dimindex (:α) − 1) ∨ ¬w ' (h + (i + 1)),
 i < dimindex (:α), h + 1 ≤ dimindex (:α) − 1,
 h + (i + 1) ≤ dimindex (:α) − 1, a ' (h + (i + 1))]
|- ¬w ' (h + (i + 1))

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
 [] |- LOG2 = LOG 2
 [] |- ∀m. SUC m = m + 1
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal: 
[P x, x < n, 0 < n − 1, 1 < n, n − 1 < 2 ** SUC (LOG 2 (n − 1)),
 n ≤ dimindex (:α), x ≤ n − 1, 2 ** LOG 2 (n − 1) ≤ n − 1]
|- x < 2 ** (LOG2 (n − 1) + 1)

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀h w P a.
     ((dimindex (:α) − 1 -- h + 1) w = 0w) ⇒
     (((h -- 0) a = w) ∧ ((dimindex (:α) − 1 -- h + 1) a = 0w) ⇔
      (a = w))
Goal: 
[P x, x < n, x < 2 ** (LOG2 (n − 1) + 1), 0 < n − 1, 1 < n,
 n − 1 < 2 ** SUC (LOG 2 (n − 1)), n ≤ dimindex (:α), x ≤ n − 1,
 2 ** LOG 2 (n − 1) ≤ n − 1,
 (dimindex (:α) − 1 -- LOG2 (n − 1) + 1) (n2w x) = 0w]
|- (m = n2w x) ⇔
   ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w) ∧
   ((LOG2 (n − 1) -- 0) m = n2w x)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ j ≤ i ∧ w ' (i − j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ j ≤ i ∧
        w ' (i − j)) F (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧
        i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w ⇔
   FOLDL
     (λa j.
        a ∨ ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w
Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [(n DIV 2 ** (dimindex (:α) − 1)) MOD 2 ≠ 1]
|- ¬(2 ** (dimindex (:α) − 1) ≤ n ∧ n < 2 ** dimindex (:α)) ⇒
   ¬(2 ** (dimindex (:α) − 1) ≤ n) ∨ ¬(n < 2 ** dimindex (:α))

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) ≤ INT_MIN (:α)
 [] |- INT_MIN (:α) < dimword (:α)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal:  [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) < dimword (:α)
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀a b. a ≤ b ⇒ 2 ** a ≤ 2 ** b
Goal: 
[Num (-i) ≤ 2 ** (dimindex (:α) − 1), dimindex (:α) ≤ dimindex (:β),
 INT_MIN (:α) ≤ i, i < 0] |- 2 ** dimindex (:α) ≤ 2 ** dimindex (:β)

function: raw_match_type message: different tyopsThm list: 
 [] |- 0 < dimindex (:α)
 [] |- 0 < i ⇔ i ≠ 0
Goal: 
[¬(i < dimindex (:β)), ¬(0 < i), ¬(j < 0), i < dimindex (:α),
 dimindex (:β) ≤ dimindex (:α), dimindex (:β) = 0, j ≤ INT_MAX (:β),
 INT_MIN (:β) ≤ j] |- F
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀i.
     INT_MIN (:α) ≤ i ∧ i < 0 ∧ dimindex (:α) ≤ dimindex (:β) ⇒
     ∃n.
       INT_MIN (:α) ≤ n ∧ n < dimword (:α) ∧ (-n2w (Num (-i)) = n2w n) ∧
       (-n2w (Num (-i)) =
        n2w (2 ** dimindex (:β) − 2 ** dimindex (:α) + n))
Goal: 
[i < dimindex (:α), dimindex (:β) ≤ dimindex (:α), j ≤ INT_MAX (:β),
 INT_MIN (:β) ≤ j, j < 0]
|- ∃n.
     INT_MIN (:β) ≤ n ∧ n < dimword (:β) ∧ (-n2w (Num (-j)) = n2w n) ∧
     (-n2w (Num (-j)) =
      n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n))
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. p + n = m
Goal: 
[i < dimindex (:α), n < dimword (:β), INT_MIN (:β) ≤ n,
 dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:α) = k + i

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- ∀a b. a ≤ b ⇒ 2 ** a ≤ 2 ** b
Goal: 
[i < dimindex (:α), n < dimword (:β), INT_MIN (:β) ≤ n,
 dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, 2 ** dimindex (:α) MOD 2 ** i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- 2 ** i < 2 ** dimindex (:α) ∧ 2 ** dimindex (:β) ≤ 2 ** i

function: raw_match_type message: different tyopsThm list: 
 [] |- dimword (:α) = 2 ** dimindex (:α)
 [] |- ∀a b. a ≤ b ⇒ 2 ** a ≤ 2 ** b
 [] |- b ≤ a ∧ c < b ⇒ a − b + c < a
Goal: 
[i < dimindex (:α), n < dimword (:β), 2 ** i < 2 ** dimindex (:α),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ i, dimindex (:β) ≤ dimindex (:α),
 2 ** dimindex (:β) ≤ 2 ** i,
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n,
 2 ** dimindex (:α) − 2 ** dimindex (:β) =
 (2 ** (dimindex (:α) − i) − 1) * 2 ** i +
 (2 ** i − 2 ** dimindex (:β)), 2 ** dimindex (:α) MOD 2 ** i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- 2 ** i − 2 ** dimindex (:β) + n < 2 ** i
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- 0 < n ⇒ n ≠ 0
Goal: 
[i < dimindex (:α), 2 ** (0 − 1) + p < dimword (:β), 0 ≤ dimindex (:α),
 dimindex (:β) = 0, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0] |- F

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. m = n + (p + 1)
 [] |- ∀m n. m + n = n + m
 [] |- ∀m n p. m + (n + p) = m + n + p
 [] |- ∀m. SUC m = m + 1
Goal: 
[i < dimindex (:α), i < dimindex (:β), n < dimword (:β),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:α) = k + SUC i

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. m = n + (p + 1)
 [] |- ∀m n. m + n = n + m
 [] |- ∀m n p. m + (n + p) = m + n + p
 [] |- ∀m. SUC m = m + 1
Goal: 
[i < dimindex (:α), i < dimindex (:β), n < dimword (:β),
 INT_MIN (:β) ≤ n, dimindex (:β) ≤ dimindex (:α),
 -n2w (Num (-j)) = n2w (2 ** dimindex (:α) − 2 ** dimindex (:β) + n),
 -n2w (Num (-j)) = n2w n, 2 ** dimindex (:α) MOD 2 ** SUC i = 0,
 j ≤ INT_MAX (:β), INT_MIN (:β) ≤ j, j < 0]
|- ∃k. dimindex (:β) = k + SUC i

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < n ⇒ n − 1 < n
 [] |- 0 < dimindex (:α)
Goal:  [¬b ' (dimindex (:α) − 1), a ' (dimindex (:α) − 1)]
|- ∃i. i < dimindex (:α) ∧ a ' i

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < n ⇒ n − 1 < n
 [] |- 0 < dimindex (:α)
Goal: 
[BIT (dimindex (:α)) (w2n a + w2n (-b)), a ' (dimindex (:α) − 1),
 b ' (dimindex (:α) − 1)]
|- ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   (∃i. i < dimindex (:α) ∧ b ' i) ⇔
   ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   ∃i. i < dimindex (:α) ∧ a ' i

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- 0 < n ⇒ n − 1 < n
 [] |- 0 < dimindex (:α)
Goal: 
[¬BIT (dimindex (:α)) (w2n a + w2n (-b)), a ' (dimindex (:α) − 1),
 b ' (dimindex (:α) − 1)]
|- ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   (∃i. i < dimindex (:α) ∧ b ' i) ⇔
   ¬BIT (dimindex (:α)) (w2n a + w2n (-1w * b)) ∧
   ∃i. i < dimindex (:α) ∧ a ' i

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) ≤ INT_MIN (:α)
 [] |- INT_MIN (:α) < dimword (:α)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal:  [] |- ∀i. INT_MIN (:α) ≤ i ∧ i < 0 ⇒ Num (-i) < dimword (:α)
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
Goal: 
[i' < dimindex (:α), n < dimindex (:α),
 Num i < 2 ** (dimindex (:α) − 1), dimindex (:α) − 1 < i' + n,
 dimindex (:α) ≤ i' + n, INT_MIN (:α) ≤ i, 0 ≤ i,
 i < &(2 ** (dimindex (:α) − 1))] |- Num i < 2 ** (i' + n)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀a b. a ≤ b ⇒ 2 ** a ≤ 2 ** b
 [] |- ∀m n p. m < n ∧ n ≤ p ⇒ m < p
Goal: 
[Num (-i) ≠ 0, Num (-i) MOD 2 ** n ≠ 0, i' < dimindex (:α),
 n < dimindex (:α), Num (-i) < 2 ** dimindex (:α),
 dimindex (:α) ≤ i' + n, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) < 2 ** (i' + n)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀a b. a ≤ b ⇒ 2 ** a ≤ 2 ** b
 [] |- ∀m n p. m < n ∧ n ≤ p ⇒ m < p
Goal: 
[Num (-i) ≠ 0, i' < dimindex (:α), n < dimindex (:α),
 Num (-i) < 2 ** dimindex (:α), dimindex (:α) ≤ i' + n,
 2 ** n ≤ Num (-i), Num (-i) DIV 2 ** n − 1 = (Num (-i) − 1) DIV 2 ** n,
 Num (-i) MOD 2 ** n = 0, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) < 2 ** (i' + n)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n a. a ≠ 0 ∧ (a MOD 2 ** n = 0) ⇒ 2 ** n ≤ a
 [] |- ∀a b. b ≤ a ∧ 0 < b ⇒ 0 < a DIV b
 [] |- ∀n. 0 < 2 ** n
 [] |- 0 < x ⇒ x ≠ 0
Goal: 
[Num (-i) ≠ 0, i' < dimindex (:α), n < dimindex (:α),
 Num (-i) < 2 ** dimindex (:α), dimindex (:α) ≤ i' + n,
 Num (-i) MOD 2 ** n = 0, i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i, i < 0]
|- Num (-i) DIV 2 ** n ≠ 0

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀w. w2i w ≤ INT_MAX (:α)
 [] |- ∀w. INT_MIN (:α) ≤ w2i w
 [] |- ∀w. INT_MIN (:α) ≤ w2i (sw2sw w) ∧ w2i (sw2sw w) ≤ INT_MAX (:α)
Goal: 
[¬(INT_MIN (:β) ≤ i ∧ i ≤ INT_MAX (:β)), dimindex (:β) ≤ dimindex (:α),
 i ≤ INT_MAX (:α), INT_MIN (:α) ≤ i]
|- (i = w2i (i2w i)) ⇔ (i = w2i (sw2sw (i2w i)))

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
 []
|- INT_MAX (:α) < INT_MIN (:α) ∧ INT_MIN (:α) ≤ UINT_MAX (:α) ∧
   UINT_MAX (:α) < dimword (:α)
Goal:  [n < dimword (:α)] |- INT_MIN (:β) < dimword (:β)

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 []
|- INT_MAX (:α) < INT_MIN (:α) ∧ INT_MIN (:α) ≤ UINT_MAX (:α) ∧
   UINT_MAX (:α) < dimword (:α)
Goal:  [n < INT_MIN (:α), n < dimword (:α), dimindex (:β) ≤ dimindex (:α)]
|- UINT_MAX (:β) < dimword (:β)

Status: Unsatisfiable
Thm list: 
Goal: 
[llist_rep (llist_abs r1) = r1, llist_rep (llist_abs r2) = r2,
 llist_abs r1 = llist_abs r2] |- r1 = r2

function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P f,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- ((λn. if n = 0 then SOME h else f (n − 1)) = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     ((λn. if n = 0 then SOME h else f (n − 1)) =
      (λn. if n = 0 then SOME h' else t (n − 1)))
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P f, P g,
 ∀g.
   P g ⇒
   (g = (λn. NONE)) ∨
   ∃h t. P t ∧ (g = (λn. if n = 0 then SOME h else t (n − 1)))]
|- (g = (λn. NONE)) ∨
   ∃h' t.
     (P t ∨ (t = (λn. if n = 0 then SOME h else f (n − 1)))) ∧
     (g = (λn. if n = 0 then SOME h' else t (n − 1)))
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x))]
|- (f a = NONE) ∨ ∃a' b. f a = SOME (a',b)
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
Goal: 
[∀a. (llist_rep (g a) n = h f n a) ∧ (llist_rep (g' a) n = h f n a),
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LHD (g' x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x),
 ∀f x. lrep_ok (λn. h f n x),
 ∀f n. h f (SUC n) = (λx. OPTION_JOIN (OPTION_MAP (h f n o FST) (f x))),
 ∀f. h f 0 = (λx. OPTION_MAP SND (f x)), LHD (g a) = NONE,
 LHD (g' a) = NONE, f a = NONE] |- (g a = [||]) ∧ (g' a = [||])
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
 []
|- (∀f x. OPTION_MAP f (SOME x) = SOME (f x)) ∧
   ∀f. OPTION_MAP f NONE = NONE
Goal: 
[∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x), f x = NONE] |- g x = [||]
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. f1 x = case f x of NONE => [||] | SOME (a,b) => b:::f1 a,
 ∀x. f2 x = case f x of NONE => [||] | SOME (a,b) => b:::f2 a,
 ∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)]
|- (f x = NONE) ∨ ∃a b. f x = SOME (a,b)
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
 []
|- (∀f x. OPTION_MAP f (SOME x) = SOME (f x)) ∧
   ∀f. OPTION_MAP f NONE = NONE
Goal: 
[∀x. LHD (g x) = OPTION_MAP SND (f x),
 ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x),
 ∀g g'.
   ((∀x. LHD (g x) = OPTION_MAP SND (f x)) ∧
    ∀x. LTL (g x) = OPTION_MAP (g o FST) (f x)) ∧
   (∀x. LHD (g' x) = OPTION_MAP SND (f x)) ∧
   (∀x. LTL (g' x) = OPTION_MAP (g' o FST) (f x)) ⇒
   (g = g'), f x = NONE] |- g x = [||]
function: num_conv message: abstractionThm list: 
Goal: 
[∀l1 l2. (if R l1 l2 then l1 else [||]) = if R l1 l2 then l2 else [||],
 ∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = [||]) ∧ (ll4 = [||]) ∨
   ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2, R ll1 ll2,
 (∀x.
    (λ(l1,l2). if R l1 l2 then l1 else [||]) x =
    case
      (λ(l1,l2).
         if R l1 l2 then
           case LHD l1 of
             NONE => NONE
           | SOME h => SOME ((THE (LTL l1),THE (LTL l2)),h)
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::(λ(l1,l2). if R l1 l2 then l1 else [||]) a) ∧
 (∀x.
    (λ(l1,l2). if R l1 l2 then l2 else [||]) x =
    case
      (λ(l1,l2).
         if R l1 l2 then
           case LHD l1 of
             NONE => NONE
           | SOME h => SOME ((THE (LTL l1),THE (LTL l2)),h)
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::(λ(l1,l2). if R l1 l2 then l2 else [||]) a) ⇒
 ((λ(l1,l2). if R l1 l2 then l1 else [||]) =
  (λ(l1,l2). if R l1 l2 then l2 else [||]))] |- ll1 = ll2
Status: Unsatisfiable
Thm list: 
Goal: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4)), R ll1 ll2,
 R ll3 ll4]
|- (ll3 = [||]) ∧ (ll4 = [||]) ∨
   (LHD ll3 = LHD ll4) ∧ R (THE (LTL ll3)) (THE (LTL ll4))

Status: Unsatisfiable
Thm list: 
Goal: 
[∀ll3 ll4.
   R ll3 ll4 ⇒
   (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2,
 R ll1 ll2, R ll3 ll4]
|- (ll3 = ll4) ∨ ∃h t1 t2. (ll3 = h:::t1) ∧ (ll4 = h:::t2) ∧ R t1 t2

function: raw_match_type message: different constructorsThm list: 
 [] |- ∀n ll. (LTAKE n ll = NONE) ⇒ (LNTH n ll = NONE)
Goal:  [LNTH n ll1 = NONE, LTAKE n ll1 = SOME x, LTAKE n ll2 = NONE]
|- NONE = LNTH n ll2
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀n ll. (LTAKE n ll = NONE) ⇒ (LNTH n ll = NONE)
Goal:  [LNTH n ll2 = NONE, LTAKE n ll1 = NONE, LTAKE n ll2 = SOME x]
|- LNTH n ll1 = NONE
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀n ll. (LTAKE n ll = NONE) ⇒ (LNTH n ll = NONE)
Goal:  [LTAKE n ll1 = NONE, LTAKE n ll2 = NONE] |- LNTH n ll1 = LNTH n ll2
Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  []
|- (∀n ll. (LTAKE n ll = NONE) ⇒ LFINITE ll) ⇒
   (∃n. LTAKE n ll = NONE) ⇒
   LFINITE ll

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 []
|- llength_rel [||] 0 ∧
   ∀h n t. llength_rel t n ⇒ llength_rel (h:::t) (SUC n)
Goal:  [] |- ∃n. llength_rel [||] n

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  []
|- (∀t n. llength_rel t n ⇒ ∀m. llength_rel t m ⇒ (m = n)) ⇒
   ∀t m n. llength_rel t n ∧ llength_rel t m ⇒ (m = n)

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀t m n. llength_rel t n ∧ llength_rel t m ⇒ (m = n)
Goal:  [LFINITE t, llength_rel t n] |- ∀m. llength_rel t m ⇔ (m = n)
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀ll.
   ¬LFINITE ll ⇒
   (LAPPEND (fromList (THE (LTAKE n ll))) (THE (LDROP n ll)) = ll),
 ¬LFINITE t, LTAKE n t = SOME y]
|- (y = THE (LTAKE n t)) ⇒ (LAPPEND (fromList y) (THE (LDROP n t)) = t)

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal:  []
|- (∀n l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l) ⇒
   ∀l n e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal:  [P e, ∀l e. (SOME e = LNTH n l) ∧ P e ⇒ exists P l, SOME e = LNTH n t]
|- P h ∨ exists P t

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [P e] |- P e ∨ exists P t

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal:  []
|- (∀n ll a t. (LDROP n ll = SOME (a:::t)) ∧ P a ⇒ exists P ll) ⇒
   (∃n a t. (LDROP n ll = SOME (a:::t)) ∧ P a) ⇒
   exists P ll

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [∀h t. Q (h:::t) ⇒ P h ∧ Q t]
|- (∀ll. exists ($~ o P) ll ⇒ ¬Q ll) ⇒ ∀ll. Q ll ⇒ ¬exists ($~ o P) ll

Status: Unsatisfiable
Thm list: 
Goal:  [Q (h:::ll), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- Q ll

Status: Unsatisfiable
Thm list: 
Goal:  [Q (h:::t), ∀h t. Q (h:::t) ⇒ P h ∧ Q t] |- P h

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [P n, P n', P 0, ∀m. m < n' ⇒ ¬P m, n' ≠ 0, 0 < n'] |- F

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (exists P [||] ⇔ F) ∧ (exists P (h:::t) ⇔ P h ∨ exists P t)
Goal: 
[∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 ¬P (THE (LHD ll)), exists P ll] |- ∃h t. ll = h:::t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (exists P [||] ⇔ F) ∧ (exists P (h:::t) ⇔ P h ∨ exists P t)
Goal: 
[P (THE (LHD ll)),
 ∀x.
   (case
      (λll.
         if exists P ll then
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e
            in
              SOME (THE (LDROP (SUC n) ll),THE (LNTH n ll)))
         else NONE) x
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, Abbrev (n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ P e),
 exists P ll] |- ∃h t. ll = h:::t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. exists P l ⇔ ∃n e. (SOME e = LNTH n l) ∧ P e
Goal: 
[∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ¬P h, exists P t] |- ∃m e. (SOME e = LNTH m t) ∧ P e
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 []
|- (∀n. LNTH n [||] = NONE) ∧ (∀h t. LNTH 0 (h:::t) = SOME h) ∧
   ∀n h t. LNTH (SUC n) (h:::t) = LNTH n t
Goal: 
[P e, P h,
 ∀x.
   (case
      if exists P x then
        (let n = LEAST n. ∃e. (SOME e = LNTH n x) ∧ P e
         in
           SOME (THE (LDROP (SUC n) x),THE (LNTH n x)))
      else NONE
    of
      NONE => [||]
    | SOME (a,b) => b:::g P a) =
   g P x, ∀m. m < n ⇒ ∀e. SOME e ≠ LNTH m (h:::t) ∨ ¬P e, n ≠ 0, 0 < n,
 SOME e = LNTH n (h:::t)] |- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- (every P [||] ⇔ T) ∧ (every P (h:::t) ⇔ P h ∧ every P t)
Goal: 
[∀x.
   LHD (g x) =
   OPTION_MAP SND
     ((λll.
         if every ($= [||]) ll then NONE
         else
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ e ≠ [||] in
            let nlist = THE (LNTH n ll)
            in
              SOME
                (THE (LTL nlist):::THE (LDROP (SUC n) ll),
                 THE (LHD nlist)))) x),
 ∀x.
   LTL (g x) =
   OPTION_MAP (g o FST)
     ((λll.
         if every ($= [||]) ll then NONE
         else
           (let n = LEAST n. ∃e. (SOME e = LNTH n ll) ∧ e ≠ [||] in
            let nlist = THE (LNTH n ll)
            in
              SOME
                (THE (LTL nlist):::THE (LDROP (SUC n) ll),
                 THE (LHD nlist)))) x), ¬every ($= [||]) ll]
|- ∃h t. ll = h:::t
Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [[||] ≠ e, h = [||], SOME e = LNTH n t]
|- ∃n e. (SOME e = LNTH n t) ∧ e ≠ [||]

function: write_tff message: 
[∀e'. App SOME e' ≠ App (App LNTH n) t ∨ (e' = [||]),
 ¬App (App every (App $= [||])) t, e ≠ [||], 0 ≤ n,
 App SOME e = App (App LNTH n) t] |- FThm list: 
Goal:  [e ≠ [||], ¬every ($= [||]) t, SOME e = LNTH n t]
|- ∃e'. (SOME e' = LNTH n t) ∧ e' ≠ [||]
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀ll.
     ((LHD ll = NONE) ⇔ (ll = [||])) ∧ ((NONE = LHD ll) ⇔ (ll = [||]))
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[e ≠ [||], ¬every ($= [||]) t,
 LHD (g t) =
 SOME
   (THE
      (LHD
         (THE (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]) t)))),
 LHD (g ([||]:::t)) =
 SOME
   (THE
      (LHD
         (THE (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]) t)))),
 LTL (g t) =
 SOME
   (g
      (THE
         (LTL
            (THE
               (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||])
                  t))):::
           THE
             (LDROP (SUC (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]))
                t))),
 LTL (g ([||]:::t)) =
 SOME
   (g
      (THE
         (LTL
            (THE
               (LNTH (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||])
                  t))):::
           THE
             (LDROP (SUC (LEAST n. ∃e. (SOME e = LNTH n t) ∧ e ≠ [||]))
                t))), SOME e = LNTH n t] |- ∃h1 t1. g t = h1:::t1
Status: Unsatisfiable
Thm list: 
Goal: 
[∀x.
   (f x = [||]) ∧ (g x = [||]) ∨
   ∃h y. (f x = h:::f y) ∧ (g x = h:::g y)]
|- (f x = [||]) ∧ (g x = [||]) ∨
   ∃h t1 t2.
     (f x = h:::t1) ∧ (g x = h:::t2) ∧ ∃x. (t1 = f x) ∧ (t2 = g x)

Status: Unsatisfiable
Thm list: 
Goal: 
[∀x.
   (f x = [||]) ∧ (g x = [||]) ∨
   ∃h y. (f x = h:::f y) ∧ (g x = h:::g y)]
|- ∃x'. (f x = f x') ∧ (g x = g x')

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll] |- ∃s'. (LUNFOLD f s = LUNFOLD f s') ∧ R s' ll

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s ll, R s' ll4, R s'' ll', R s''' ll'',
 LUNFOLD f s = x':::LUNFOLD f s''', LUNFOLD f s' = x:::LUNFOLD f s'',
 LHD ll = SOME x', LHD ll4 = SOME x, LTL ll = SOME ll'',
 LTL ll4 = SOME ll', f s = SOME (s''',x'), f s' = SOME (s'',x)]
|- ∃s''''. (LUNFOLD f s'' = LUNFOLD f s'''') ∧ R s'''' ll'

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀s ll.
   R s ll ⇒
   (f s = NONE) ∧ (ll = [||]) ∨
   ∃s' x ll'.
     (f s = SOME (s',x)) ∧ (LHD ll = SOME x) ∧ (LTL ll = SOME ll') ∧
     R s' ll', R s [||], R s' ll4, R s'' ll', LUNFOLD f s = [||],
 LUNFOLD f s' = x:::LUNFOLD f s'', LHD ll4 = SOME x, LTL ll4 = SOME ll',
 f s = NONE, f s' = SOME (s'',x)]
|- ∃s'''. (LUNFOLD f s'' = LUNFOLD f s''') ∧ R s''' ll'

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. (l = [||]) ∨ ∃h t. l = h:::t
Goal: 
[∀ll l. (LTAKE n ll = SOME l) ⇒ (n = LENGTH l),
 LTAKE (SUC n) ll = SOME l] |- (ll = [||]) ∨ ∃h t. ll = h:::t
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀ll l. (LTAKE n ll = SOME l) ⇒ (n = LENGTH l), l = h::z,
 LTAKE n t = SOME z] |- n = LENGTH z

Status: Unsatisfiable
Info: polymorph higher-order lambda-lift num 
Thm list: 
 []
|- ∀r s s'. linear_order r s ∧ s' ⊆ s ⇒ linear_order (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X]
|- linear_order (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

Status: Unsatisfiable
Info: polymorph higher-order lambda-lift num 
Thm list: 
 []
|- ∀r s s'.
     finite_prefixes r s ∧ s' ⊆ s ⇒
     finite_prefixes r s' ∧ finite_prefixes (rrestrict r s') s'
Goal: 
[∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo = {x'}, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X, linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
     (X DIFF minimal_elements X lo)

Status: Unsatisfiable
Info: higher-order lambda-lift num 
Thm list: 
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, minimal_elements X lo ≠ ∅,
 x ∉ minimal_elements X lo, domain lo ∪ range lo = X,
 minimal_elements X lo = {x'},
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo (X DIFF minimal_elements X lo))) =
 SOME x, x ∈ X,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- LNTH i
     (LUNFOLD linear_order_to_list_f (rrestrict lo (X DIFF {x'}))) =
   SOME x

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {y | (y,x) ∈ lo} ⇒
   ∀lo X x.
     x ∈ X ∧ (s' = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 FINITE {y | (y,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x' y.
   (((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
    x' ∉ minimal_elements (domain lo ∪ range lo) lo) ∧
   ((∃y'. (y,y') ∈ lo) ∨ ∃x. (x,y) ∈ lo) ∧
   y ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   (x',y) ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo) ∨
   (y,x') ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃x.
      (x,x') ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃y.
      (x',y) ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   x' ∈ X,
 ∀x. (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒ x ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo,
 antisym
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)), transitive lo,
 transitive
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo, (x',x) ∈ lo] |- x ∈ X

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x' y.
   (((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
    x' ∉ minimal_elements (domain lo ∪ range lo) lo) ∧
   ((∃y'. (y,y') ∈ lo) ∨ ∃x. (x,y) ∈ lo) ∧
   y ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   (x',y) ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo) ∨
   (y,x') ∈
   rrestrict lo
     (domain lo ∪ range lo DIFF
      minimal_elements (domain lo ∪ range lo) lo),
 ∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃x.
      (x,x') ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀x'.
   (∃y.
      (x',y) ∈
      rrestrict lo
        (domain lo ∪ range lo DIFF
         minimal_elements (domain lo ∪ range lo) lo)) ⇒
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
   x' ∈ X,
 ∀x. (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒ x ∈ X,
 ∀lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   x' ∈ X', antisym lo,
 antisym
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)), transitive lo,
 transitive
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo)),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo, (x,y) ∈ lo] |- x ∈ X

Status: Unsatisfiable
Info: higher-order lambda-lift bool 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (x',
  CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
       (x = x')}) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x''.
        ((∃y. (x'',y) ∈ lo) ∨ ∃x. (x,x'') ∈ lo) ∧ (x'',x) ∈ lo ⇒
        (x = x'')} ∈ X

Status: Unsatisfiable
Info: higher-order lambda-lift bool 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀x'.
   ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
   (x',
    CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')}) ∈ lo ⇒
   (CHOICE
      {x |
       ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
       ∀x'.
         ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
         (x = x')} =
    x'), antisym lo, transitive lo,
 {x |
  ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
  ∀x'. ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')} ≠
 ∅,
 (CHOICE
    {x |
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     ∀x'.
       ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒ (x = x')},
  y) ∈ lo]
|- CHOICE
     {x |
      ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
      ∀x'.
        ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧ (x',x) ∈ lo ⇒
        (x = x')} ∈ X

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀s.
     FINITE s ⇒
     ∀lo X x.
       x ∈ X ∧ (s = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
       finite_prefixes lo X ⇒
       ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x
 [] |- ∀r s. finite_prefixes r s ⇔ ∀e. e ∈ s ⇒ FINITE {e' | (e',e) ∈ r}
Goal: 
[∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ X DIFF minimal_elements X lo,
 minimal_elements X lo = {x'}, x ∈ X, y ∈ X, (x,y) ∈ lo,
 {y | (y,x) ∈ rrestrict lo (X DIFF minimal_elements X lo)} ⊂
 {y | (y,x) ∈ lo}, X DIFF minimal_elements X lo ⊆ X,
 finite_prefixes lo X,
 finite_prefixes (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo), linear_order lo X,
 linear_order (rrestrict lo (X DIFF minimal_elements X lo))
   (X DIFF minimal_elements X lo)]
|- ∃j. LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ range lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 y ∈ range lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ domain lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ range lo,
 y ∈ domain lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ range lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 y ∈ range lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo},
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 x ∈ minimal_elements (domain lo ∪ range lo) lo, y ∈ domain lo,
 (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. x ∈ {y} ⇔ (x = y)
Goal: 
[T,
 ∀s'.
   s' ⊂ {z | (z,x) ∈ lo} ⇒
   ∀lo X x y.
     (x,y) ∈ lo ∧ (s' = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
     finite_prefixes lo X ⇒
     ∃i j.
       i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
       (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y),
 FINITE {z | (z,x) ∈ lo}, x ∉ domain lo, x ∉ range lo,
 minimal_elements (domain lo ∪ range lo) lo = {x'}, x ∈ domain lo,
 y ∈ domain lo, (x,y) ∈ lo,
 {y |
  (y,x) ∈
  rrestrict lo
    (domain lo ∪ range lo DIFF
     minimal_elements (domain lo ∪ range lo) lo)} ⊂ {y | (y,x) ∈ lo},
 finite_prefixes lo (domain lo ∪ range lo),
 finite_prefixes
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo),
 linear_order lo (domain lo ∪ range lo),
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)] |- x' = x
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 ∀j lo' X' x'.
   ((∀x'. (∃y. (x',y) ∈ lo') ⇒ x' ∈ X') ∧
    (∀x'. (∃x. (x,x') ∈ lo') ⇒ x' ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME x') ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x') ⇒
   (i = j), antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH i
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃x'. (x',x) ∈ lo) ⇒ x ∈ X, ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X,
 ∀j lo' X' x.
   ((∀x. (∃y. (x,y) ∈ lo') ⇒ x ∈ X') ∧
    (∀x. (∃x'. (x',x) ∈ lo') ⇒ x ∈ X') ∧ transitive lo' ∧ antisym lo' ∧
    ∀x y. x ∈ X' ∧ y ∈ X' ⇒ (x,y) ∈ lo' ∨ (y,x) ∈ lo') ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo') = SOME x) ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo') = SOME x) ⇒
   (i = j), antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x.
     ((∃y. (x,y) ∈ lo) ∨ ∃x'. (x',x) ∈ lo) ∧
     x ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x ∈ X

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x'. (∃x. (x,x') ∈ lo) ⇒ x' ∈ X, ∀x'. (∃y. (x',y) ∈ lo) ⇒ x' ∈ X,
 antisym lo, transitive lo,
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo]
|- ∀x'.
     ((∃y. (x',y) ∈ lo) ∨ ∃x. (x,x') ∈ lo) ∧
     x' ∉ minimal_elements (domain lo ∪ range lo) lo ⇒
     x' ∈ X

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀i lo X x.
     linear_order lo X ∧
     (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
     x ∈ X
Goal: 
[∀j lo X x.
   linear_order lo X ∧
   (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
   (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
   (i = j),
 ¬(LNTH i
     (LUNFOLD linear_order_to_list_f
        (rrestrict lo
           (domain lo ∪ range lo DIFF
            minimal_elements (domain lo ∪ range lo) lo))) ≠
   SOME (CHOICE (minimal_elements (domain lo ∪ range lo) lo))),
 minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
   domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀i lo X x.
     linear_order lo X ∧
     (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
     x ∈ X
Goal: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- x ∈
   domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x, x ∈ range lo,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ≠ x

Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[minimal_elements (domain lo ∪ range lo) lo ≠ ∅,
 x ∉ minimal_elements (domain lo ∪ range lo) lo,
 LNTH n
   (LUNFOLD linear_order_to_list_f
      (rrestrict lo
         (domain lo ∪ range lo DIFF
          minimal_elements (domain lo ∪ range lo) lo))) =
 SOME x, x ∈ domain lo,
 CHOICE (minimal_elements (domain lo ∪ range lo) lo) ∈
 minimal_elements (domain lo ∪ range lo) lo,
 domain lo ∪ range lo DIFF minimal_elements (domain lo ∪ range lo) lo ⊆
 X, linear_order lo X,
 linear_order
   (rrestrict lo
      (domain lo ∪ range lo DIFF
       minimal_elements (domain lo ∪ range lo) lo))
   (domain lo ∪ range lo DIFF
    minimal_elements (domain lo ∪ range lo) lo)]
|- CHOICE (minimal_elements (domain lo ∪ range lo) lo) ≠ x

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀s.
     FINITE s ⇒
     ∀lo X x.
       x ∈ X ∧ (s = {y | (y,x) ∈ lo}) ∧ linear_order lo X ∧
       finite_prefixes lo X ⇒
       ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x
 [] |- ∀r s. finite_prefixes r s ⇔ ∀e. e ∈ s ⇒ FINITE {e' | (e',e) ∈ r}
 []
|- ∀i lo X x.
     linear_order lo X ∧
     (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
     x ∈ X
Goal:  [finite_prefixes lo X, linear_order lo X]
|- x ∈ X ⇔ ∃i. LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀i j lo X x.
     linear_order lo X ∧
     (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
     (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ⇒
     (i = j)
Goal: 
[LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x,
 LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME x,
 finite_prefixes lo X, linear_order lo X] |- i = j
Status: Unsatisfiable
Thm list: 
Goal:  [(q,r) ∈ lo, finite_prefixes lo X, linear_order lo X]
|- ∃y z. (q,r) = (y,z)

Status: Unsatisfiable
Thm list: 
Goal: 
[∀x y. x ∈ X ∧ y ∈ X ⇒ (x,y) ∈ lo ∨ (y,x) ∈ lo,
 ∀x. (∃y. (x,y) ∈ lo) ⇒ x ∈ X, ∀x. x ∈ range lo ⇒ x ∈ X, antisym lo,
 transitive lo, (y,z) ∈ lo, finite_prefixes lo X] |- y ∈ X

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀s.
     FINITE s ⇒
     ∀lo X x y.
       (x,y) ∈ lo ∧ (s = {z | (z,x) ∈ lo}) ∧ linear_order lo X ∧
       finite_prefixes lo X ⇒
       ∃i j.
         i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME x) ∧
         (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME y)
 [] |- ∀r s. finite_prefixes r s ⇔ ∀e. e ∈ s ⇒ FINITE {e' | (e',e) ∈ r}
Goal:  [y ∈ X, (y,z) ∈ lo, finite_prefixes lo X, linear_order lo X]
|- ∃i j.
     i ≤ j ∧ (LNTH i (LUNFOLD linear_order_to_list_f lo) = SOME y) ∧
     (LNTH j (LUNFOLD linear_order_to_list_f lo) = SOME z)
Status: Unsatisfiable
Thm list: 
Goal: 
[lbtree_rep (lbtree_abs f1) = f1, lbtree_rep (lbtree_abs f2) = f2,
 lbtree_abs f1 = lbtree_abs f2] |- f1 = f2

Status: Unsatisfiable
Thm list: 
Goal: 
[P t1, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (Ndrep a t1 t2 = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧
     (Ndrep a t1 t2 = Ndrep a' t1' t2')

Status: Unsatisfiable
Thm list: 
Goal: 
[P t1, P' t, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (t = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧ (t = Ndrep a' t1' t2')

Status: Unsatisfiable
Thm list: 
Goal: 
[P t, P t1, P' t2,
 ∀t. P t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P t1 ∧ P t2 ∧ (t = Ndrep a t1 t2),
 ∀t. P' t ⇒ (t = Lfrep) ∨ ∃a t1 t2. P' t1 ∧ P' t2 ∧ (t = Ndrep a t1 t2)]
|- (t = Lfrep) ∨
   ∃a' t1' t2'.
     (P t1' ∨ P' t1' ∨ (t1' = Ndrep a t1 t2)) ∧
     (P t2' ∨ P' t2' ∨ (t2' = Ndrep a t1 t2)) ∧ (t = Ndrep a' t1' t2')

Status: Unsatisfiable
Thm list: 
Goal:  []
|- (∀f. (∃x. f = path_follow g x) ⇒ is_lbtree f) ⇒
   is_lbtree (path_follow g x)

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal:  [] |- (g x = NONE) ∨ ∃a b1 b2. g x = SOME (a,b1,b2)
Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [g x = SOME (a,b1,b2)] |- ∃x. path_follow g b2 = path_follow g x

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [g x = SOME (a,b1,b2)] |- ∃x. path_follow g b1 = path_follow g x

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- is_lbtree r ⇒ (lbtree_rep (lbtree_abs r) = r)
Goal:  [is_lbtree t1, is_lbtree t2]
|- (Ndrep a t1 t2 = Lfrep) ∨
   ∃a' t1' t2'.
     Ndrep a t1 t2 = Ndrep a' (lbtree_rep t1') (lbtree_rep t2')

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. g x = case f x of NONE => Lf | SOME (b,y,z) => Nd b (g y) (g z),
 ∀x. g' x = case f x of NONE => Lf | SOME (b,y,z) => Nd b (g' y) (g' z)]
|- (f x = NONE) ∨ ∃a b1 b2. f x = SOME (a,b1,b2)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal: 
[∀x. g x = case f x of NONE => Lf | SOME (b,y,z) => Nd b (g y) (g z),
 ∀x. g' x = case f x of NONE => Lf | SOME (b,y,z) => Nd b (g' y) (g' z)]
|- (f x = NONE) ∨ ∃a b1 b2. f x = SOME (a,b1,b2)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ∃q r. x = (q,r)
 [] |- ∀opt. (∃x. opt = SOME x) ∨ (opt = NONE)
Goal:  [] |- (f x = NONE) ∨ ∃a b1 b2. f x = SOME (a,b1,b2)
function: num_conv message: abstractionThm list: 
Goal: 
[∀t' u. (if R t' u then t' else Lf) = if R t' u then u else Lf,
 ∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u,
 (∀x.
    (λ(t,u). if R t u then t else Lf) x =
    case
      (λ(t,u).
         if R t u then
           lbtree_case NONE
             (λa t1 t2.
                SOME
                  (a,(t1,@u1. ∃u2. u = Nd a u1 u2),t2,
                   @u2. ∃u1. u = Nd a u1 u2)) t
         else NONE) x
    of
      NONE => Lf
    | SOME (b,y,z) =>
        Nd b ((λ(t,u). if R t u then t else Lf) y)
          ((λ(t,u). if R t u then t else Lf) z)) ∧
 (∀x.
    (λ(t,u). if R t u then u else Lf) x =
    case
      (λ(t,u).
         if R t u then
           lbtree_case NONE
             (λa t1 t2.
                SOME
                  (a,(t1,@u1. ∃u2. u = Nd a u1 u2),t2,
                   @u2. ∃u1. u = Nd a u1 u2)) t
         else NONE) x
    of
      NONE => Lf
    | SOME (b,y,z) =>
        Nd b ((λ(t,u). if R t u then u else Lf) y)
          ((λ(t,u). if R t u then u else Lf) z)) ⇒
 ((λ(t,u). if R t u then t else Lf) =
  (λ(t,u). if R t u then u else Lf))] |- t = u
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u] |- (p_2 = Lf) ∨ ∃a u1 u2. p_2 = Nd a u1 u2

function: raw_match_type message: different tyopsThm list: 
 [] |- Lf ≠ Nd a t1 t2
 [] |- (Nd a1 t1 u1 = Nd a2 t2 u2) ⇔ (a1 = a2) ∧ (t1 = t2) ∧ (u1 = u2)
Goal: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_2 = Nd a u1 u2]
|- ∃t1 t2. (p_1 = Nd a t1 t2) ∧ R t1 u1 ∧ R t2 u2
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- Lf ≠ Nd a t1 t2
Goal: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_2 = Lf] |- p_1 = Lf

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u] |- (p_1 = Lf) ∨ ∃a t1 t2. p_1 = Nd a t1 t2

function: raw_match_type message: different tyopsThm list: 
 [] |- Lf ≠ Nd a t1 t2
 [] |- (Nd a1 t1 u1 = Nd a2 t2 u2) ⇔ (a1 = a2) ∧ (t1 = t2) ∧ (u1 = u2)
Goal: 
[∀t u.
   R t u ⇒
   (t = Lf) ∧ (u = Lf) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R p_1 p_2,
 R t u, p_1 = Nd a t1 t2]
|- ∃u1 u2. (p_2 = Nd a u1 u2) ∧ R t1 u1 ∧ R t2 u2
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal:  [] |- (t = Lf) ∨ ∃a u1 u2. t = Nd a u1 u2

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u]
|- (t' = Lf) ∨ ∃a t1 t2. t' = Nd a t1 t2

Status: Unsatisfiable
Thm list: 
Goal: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u,
 R t' u']
|- (t' = u') ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t' = Nd a t1 t2) ∧ (u' = Nd a u1 u2)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[∀t u.
   R t u ⇒
   (t = u) ∨
   ∃a t1 u1 t2 u2.
     R t1 u1 ∧ R t2 u2 ∧ (t = Nd a t1 t2) ∧ (u = Nd a u1 u2), R t u,
 R t' t'] |- (t' = Lf) ∨ ∃a t1 t2. t' = Nd a t1 t2

Status: Unsatisfiable
Thm list: 
Goal:  [] |- (b = a) ∨ mem a t1 ∨ mem a t2 ⇔ (a = b) ∨ mem a t1 ∨ mem a t2

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal:  [] |- (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal:  [] |- (t = Lf) ∨ ∃a' t1' t2'. t = Nd a' t1' t2'

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  []
|- (f a' = a) ∧ (map f t1' = t1) ∧ (map f t2' = t2) ⇔
   (a = f a') ∧ (t1 = map f t1') ∧ (t2 = map f t2')

Status: Unsatisfiable
Thm list: 
Goal:  []
|- (∀t. finite t ⇒ finite (map f t)) ∧
   (∀t. finite t ⇒ ∀t'. (t = map f t') ⇒ finite t') ⇒
   (finite (map f t) ⇔ finite t)

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal:  [(bf_flatten l = [||]) ⇔ EVERY ($= Lf) l]
|- (h = Lf) ∨ ∃a t1 t2. h = Nd a t1 t2
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀h t. h:::t ≠ [||] ∧ [||] ≠ h:::t
 [] |- ∀l. (bf_flatten l = [||]) ⇔ EVERY ($= Lf) l
Goal: 
[∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist,
 h:::l = bf_flatten tlist] |- ¬EVERY ($= Lf) tlist
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀l.
     EXISTS P l ⇒ ∃l1 x l2. (l = l1 ++ x::l2) ∧ EVERY ($~ o P) l1 ∧ P x
Goal: 
[∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist,
 ¬EVERY ($= Lf) tlist, h:::l = bf_flatten tlist,
 EXISTS ($~ o $= Lf) tlist]
|- ∃l1 y l2.
     EVERY ($~ o $~ o $= Lf) l1 ∧ ($~ o $= Lf) y ∧ (tlist = l1 ++ y::l2)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[∀tlist. (l = bf_flatten tlist) ⇒ EXISTS (mem x) tlist, Lf ≠ y,
 ¬EVERY ($= Lf) tlist, tlist = l1 ++ y::l2, h:::l = bf_flatten tlist,
 EVERY ($= Lf) l1, EVERY ($~ o $~ o $= Lf) l1,
 EXISTS ($~ o $= Lf) tlist, ($~ o $= Lf) y] |- ∃a t1 t2. y = Nd a t1 t2
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀h t. h:::t ≠ [||] ∧ [||] ≠ h:::t
 [] |- ∀l. (bf_flatten l = [||]) ⇔ EVERY ($= Lf) l
Goal:  [h:::t = bf_flatten tlist] |- ¬EVERY ($= Lf) tlist
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀l.
     EXISTS P l ⇒ ∃l1 x l2. (l = l1 ++ x::l2) ∧ EVERY ($~ o P) l1 ∧ P x
Goal: 
[¬EVERY ($= Lf) tlist, h:::t = bf_flatten tlist,
 EXISTS ($~ o $= Lf) tlist]
|- ∃l1 x l2.
     EVERY ($~ o $~ o $= Lf) l1 ∧ ($~ o $= Lf) x ∧ (tlist = l1 ++ x::l2)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[Lf ≠ x, ¬EVERY ($= Lf) tlist, tlist = l1 ++ x::l2,
 h:::t = bf_flatten tlist, EVERY ($= Lf) l1, EVERY ($~ o $~ o $= Lf) l1,
 EXISTS ($~ o $= Lf) tlist, ($~ o $= Lf) x] |- ∃a t1 t2. x = Nd a t1 t2
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal:  [] |- ∃n. depth x (Nd x t1 t2) n

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀x t n. depth x t n ⇒ mem x t
Goal: 
[∀m. m < n ⇒ ¬depth x t2 m, ∀m. m < n' ⇒ ¬depth x (Nd a t1 t2) m, x ≠ a,
 ¬mem x t1, mem x t2, depth x t2 n] |- ∀n. ¬depth x t1 n

function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀n. ¬depth x t1 n, ∀m. m < n ⇒ ¬depth x t2 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t1, n < m,
 mem x t2, depth x t2 m, depth x t2 n] |- F
function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀n. ¬depth x t1 n, ∀m. m < n ⇒ ¬depth x t2 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t1, m < n,
 mem x t2, depth x t2 m, depth x t2 n] |- F
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀x t n. depth x t n ⇒ mem x t
Goal: 
[∀m. m < n ⇒ ¬depth x t1 m, ∀m. m < n' ⇒ ¬depth x (Nd a t1 t2) m, x ≠ a,
 ¬mem x t2, mem x t1, depth x t1 n] |- ∀n. ¬depth x t2 n

function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀n. ¬depth x t2 n, ∀m. m < n ⇒ ¬depth x t1 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t2, n < m,
 mem x t1, depth x t1 m, depth x t1 n] |- F
function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀n. ¬depth x t2 n, ∀m. m < n ⇒ ¬depth x t1 m,
 ∀m'. m' < SUC m ⇒ ¬depth x (Nd a t1 t2) m', x ≠ a, ¬mem x t2, m < n,
 mem x t1, depth x t1 m, depth x t1 n] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m, x ≠ a,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 t2d]
|- (∃m. depth x t1 m) ∨ ∃m. depth x t2 m

function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, t2d < m,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, m < t2d,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F

function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m'. m' < m ⇒ ¬depth x t2 m', ∀m. m < t1d ⇒ ¬depth x t1 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, t1d < m, mem x t1,
 mem x t2, depth x t1 t1d, depth x t2 m] |- m = t1d
function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, t1d < m,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, m < t1d,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F

function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m'. m' < m ⇒ ¬depth x t1 m', ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', ¬(m < t2d), x ≠ a, m ≠ t2d,
 t2d < m, mem x t1, mem x t2, depth x t1 m, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m, x ≠ a,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 t2d]
|- (∃m. depth x t1 m) ∨ ∃m. depth x t2 m

function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, t2d < m,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t2d, m < t2d,
 mem x t1, mem x t2, depth x t1 t1d, depth x t2 m, depth x t2 t2d] |- F

function: raw_match_type message: different constructorsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m'. m' < m ⇒ ¬depth x t2 m', ∀m. m < t1d ⇒ ¬depth x t1 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, t1d < m, mem x t1,
 mem x t2, depth x t1 t1d, depth x t2 m] |- m = t1d
function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, t1d < m,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀m. m < t1d ⇒ ¬depth x t1 m, ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', x ≠ a, m ≠ t1d, m < t1d,
 mem x t1, mem x t2, depth x t1 m, depth x t1 t1d, depth x t2 t2d] |- F

function: raw_match_type message: different tyopsThm list: 
 [] |- SUC x < SUC y ⇔ x < y
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal: 
[∀m'. m' < m ⇒ ¬depth x t1 m', ∀m. m < t2d ⇒ ¬depth x t2 m,
 ∀m'.
   m' < SUC m ⇒
   (∀m''. m' ≠ SUC m'' ∨ ¬depth x t1 m'') ∧
   ∀m''. m' ≠ SUC m'' ∨ ¬depth x t2 m'', ¬(m < t2d), x ≠ a, m ≠ t2d,
 t2d < m, mem x t1, mem x t2, depth x t1 m, depth x t2 t2d] |- F
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 []
|- (∀x t1 t2. depth x (Nd x t1 t2) 0) ∧
   (∀m x a t1 t2. depth x t1 m ⇒ depth x (Nd a t1 t2) (SUC m)) ∧
   ∀m x a t1 t2. depth x t2 m ⇒ depth x (Nd a t1 t2) (SUC m)
Goal:  [] |- ∃n. depth a (Nd a t1 t2) n

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l x. MEM x l ⇔ ∃n. n < LENGTH l ∧ (x = EL n l)
Goal:  [f e = SOME n, MEM e l] |- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME min_d,
 Abbrev
   (min_d = LEAST x. (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) x),
 i < n, i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME min_d, EXISTS (λe. ∃n. f e = SOME n) l,
 (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) d]
|- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME x)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P d, P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- (x = y) ⇔ ¬(x < y) ∧ ¬(y < x)
Goal: 
[P d, P m, P n', P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 ∀m. m < n' ⇒ ¬P m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- n' = m
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ¬(x < y) ⇔ y ≤ x
Goal: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m'. m' < n ⇒ ¬(m' < LENGTH l) ∨ f (EL m' l) ≠ SOME m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x, f (EL n l) = SOME m,
 EXISTS (λe. ∃n. f e = SOME n) l] |- m ≤ x
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P d, P m, P x, ∀m'. m' < m ⇒ ¬P m',
 ∀m'. m' < n ⇒ ¬(m' < LENGTH l) ∨ f (EL m' l) ≠ SOME m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))), i < n,
 i < LENGTH l, n < LENGTH l, m ≤ x, f (EL i l) = SOME x,
 f (EL n l) = SOME m, EXISTS (λe. ∃n. f e = SOME n) l] |- m ≠ x
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME min_d,
 Abbrev
   (min_d = LEAST x. (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) x),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME min_d, EXISTS (λe. ∃n. f e = SOME n) l,
 (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n)) d]
|- ∃i. i < LENGTH l ∧ (f (EL i l) = SOME x)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P d, P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n. P n
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- x ≤ y ⇔ ¬(y < x)
Goal: 
[P d, P n', P x,
 ∀m. m < n ⇒ ¬(m < LENGTH l) ∨ f (EL m l) ≠ SOME (LEAST x. P x),
 ∀m. m < n' ⇒ ¬P m,
 Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 i < LENGTH l, n < LENGTH l, f (EL i l) = SOME x,
 f (EL n l) = SOME (LEAST x. P x), EXISTS (λe. ∃n. f e = SOME n) l]
|- n' ≤ x
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P d, Abbrev (P = (λn. ∃i. i < LENGTH l ∧ (f (EL i l) = SOME n))),
 EXISTS (λe. ∃n. f e = SOME n) l] |- ∃n. P n
Status: Unsatisfiable
Info: higher-order lambda-lift bool num 
Thm list: 
Goal: 
[∀m. m < n ⇒ ∀i. ¬(i < LENGTH l) ∨ f (EL i l) ≠ SOME m, i < LENGTH l,
 i' < LENGTH l, f (EL i l) = SOME d, f (EL i' l) = SOME n,
 EXISTS (λe. ∃n. f e = SOME n) l]
|- ∃n'. n' < LENGTH l ∧ (f (EL n' l) = SOME n)

function: raw_match_type message: different tyopsThm list: 
 [] |- ¬(x < y ∧ y ≤ x)
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < LENGTH l, m < n, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ¬(x < y ∧ y ≤ x)
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < LENGTH l, n < m, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ¬(x < y ∧ y ≤ x)
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'), i < j,
 i < LENGTH l, j < LENGTH l, f (EL i l) = SOME m, f (EL j l) = SOME n]
|- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ¬(x < y ∧ y ≤ x)
 [] |- ∀x y. (SOME x = SOME y) ⇔ (x = y)
 [] |- ∀x. SOME x ≠ NONE
Goal: 
[∀i'.
   i' < LENGTH l ⇒
   (f (EL i' l) = NONE) ∨
   ∃d'. (f (EL i' l) = SOME d') ∧ m ≤ d' ∧ (i' < i ⇒ m < d'),
 ∀i.
   i < LENGTH l ⇒
   (f (EL i l) = NONE) ∨
   ∃d'. (f (EL i l) = SOME d') ∧ n ≤ d' ∧ (i < j ⇒ n < d'),
 i < LENGTH l, j < i, j < LENGTH l, f (EL i l) = SOME m,
 f (EL j l) = SOME n] |- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x t. mem x t ⇒ ∃n. mindepth x t = SOME n
Goal: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   (∃e. MEM e tlist' ∧ mem x' e) ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   (∃e. MEM e tlist' ∧ mem x' e) ⇒
   exists ($= x') (bf_flatten tlist'), MEM e tlist, mem x e]
|- ∃e. MEM e tlist ∧ ∃n. mindepth x e = SOME n
function: raw_match_type message: different tyopsThm list: 
 [] |- EXISTS (λe. ∃n. f e = SOME n) l ⇒ ∃i m. is_mmindex f l i m
Goal: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'), EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- ∃i d. is_mmindex (mindepth x) tlist i d
function: raw_match_type message: different tyopsThm list: 
 [] |- is_mmindex f l i m ⇒ ∀j n. is_mmindex f l j n ⇔ (j = i) ∧ (n = m)
Goal: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) <
   (@i. ∃d. is_mmindex (mindepth x) tlist i d) ⇒
   (THE
      (mindepth x
         (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE
     (mindepth x
        (EL (@i. ∃d. is_mmindex (mindepth x) tlist i d) tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'), EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist,
 is_mmindex (mindepth x) tlist i d]
|- ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d)
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀f l n d.
     is_mmindex f l n d ⇔
     n < LENGTH l ∧ (f (EL n l) = SOME d) ∧
     ∀i.
       i < LENGTH l ⇒
       (f (EL i l) = NONE) ∨
       ∃d'. (f (EL i l) = SOME d') ∧ d ≤ d' ∧ (i < n ⇒ d < d')
Goal: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (THE (mindepth x (EL i tlist)) =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   THE (mindepth x (EL i tlist)) ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 EXISTS (mem x) tlist, EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- mindepth x (EL i tlist) = SOME d
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l. (l = []) ∨ ∃t h. l = h::t
 []
|- (∀P. EXISTS P [] ⇔ F) ∧ ∀P h t. EXISTS P (h::t) ⇔ P h ∨ EXISTS P t
Goal: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 mindepth x (EL i tlist) = SOME d, EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist] |- ∃h t. tlist = h::t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀t. (t = Lf) ∨ ∃a t1 t2. t = Nd a t1 t2
Goal: 
[T,
 ∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) tlist j n ⇔ (j = i) ∧ (n = d),
 tlist = h::t, mindepth x (EL i tlist) = SOME d, EXISTS (mem x) tlist,
 EXISTS (λe. ∃n. mindepth x e = SOME n) tlist]
|- (h = Lf) ∨ ∃a t1 t2. h = Nd a t1 t2
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀f l n d.
     is_mmindex f l n d ⇔
     n < LENGTH l ∧ (f (EL n l) = SOME d) ∧
     ∀i.
       i < LENGTH l ⇒
       (f (EL i l) = NONE) ∨
       ∃d'. (f (EL i l) = SOME d') ∧ d ≤ d' ∧ (i < n ⇒ d < d')
 [] |- (LENGTH [] = 0) ∧ ∀h t. LENGTH (h::t) = SUC (LENGTH t)
 [] |- SUC x < SUC y ⇔ x < y
Goal: 
[∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n'.
   is_mmindex (mindepth x) (t ++ [t1; t2]) j n' ⇔ (j = n) ∧ (n' = d),
 ∀j n'.
   is_mmindex (mindepth x) (Nd a t1 t2::t) j n' ⇔
   (j = SUC n) ∧ (n' = d), x ≠ a,
 mindepth x (EL (SUC n) (Nd a t1 t2::t)) = SOME d,
 EXISTS (mem x) (Nd a t1 t2::t),
 EXISTS (λe. ∃n. mindepth x e = SOME n) (Nd a t1 t2::t)] |- n < LENGTH t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x t n. depth x t n ⇒ mem x t
 [] |- (mindepth x t = SOME n) ⇒ depth x t n
Goal: 
[T,
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   SUC z ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n.
   is_mmindex (mindepth x) (Nd a t1 t2::t) j n ⇔ (j = 0) ∧ (n = SUC z),
 x ≠ a, d = SUC z, MIN x' x'' = z, mindepth x t1 = SOME x',
 mindepth x t2 = SOME x''] |- mem x t1 ∧ mem x t2
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x t n. depth x t n ⇒ mem x t
 [] |- (mindepth x t = SOME n) ⇒ depth x t n
Goal: 
[T,
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   SUC z ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n.
   is_mmindex (mindepth x) (Nd a t1 t2::t) j n ⇔ (j = 0) ∧ (n = SUC z),
 x ≠ a, d = SUC z, x' = z, mindepth x t1 = SOME x',
 mindepth x t2 = NONE] |- mem x t1
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x t n. depth x t n ⇒ mem x t
 [] |- (mindepth x t = SOME n) ⇒ depth x t n
Goal: 
[T,
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) <
   SUC z ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n.
   is_mmindex (mindepth x) (Nd a t1 t2::t) j n ⇔ (j = 0) ∧ (n = SUC z),
 x ≠ a, d = SUC z, x' = z, mindepth x t1 = NONE,
 mindepth x t2 = SOME x'] |- mem x t2
function: raw_match_type message: different tyopsThm list: 
 []
|- (f x = NONE) ⇒ (is_mmindex f (x::t) (SUC j) n ⇔ is_mmindex f t j n)
 []
|- (mindepth x Lf = NONE) ∧
   (mindepth x (Nd a t1 t2) =
    if x = a then SOME 0
    else OPTION_MAP SUC (optmin (mindepth x t1) (mindepth x t2)))
Goal: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) (Lf::t) j n ⇔ (j = i) ∧ (n = d),
 i = SUC i0, mindepth x (EL i (Lf::t)) = SOME d, EXISTS (mem x) (Lf::t),
 EXISTS (λe. ∃n. mindepth x e = SOME n) (Lf::t),
 is_mmindex (mindepth x) (Lf::t) (SUC i0) d]
|- is_mmindex (mindepth x) t i0 d
function: raw_match_type message: different tyopsThm list: 
 [] |- is_mmindex f l i m ⇒ ∀j n. is_mmindex f l j n ⇔ (j = i) ∧ (n = m)
Goal: 
[∀tlist' x'.
   (@i. ∃d. is_mmindex (mindepth x') tlist' i d) < i ⇒
   (d =
    THE
      (mindepth x'
         (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist'))) ∧
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀tlist' x'.
   THE
     (mindepth x'
        (EL (@i. ∃d. is_mmindex (mindepth x') tlist' i d) tlist')) < d ⇒
   EXISTS (mem x') tlist' ⇒
   exists ($= x') (bf_flatten tlist'),
 ∀j n. is_mmindex (mindepth x) (Lf::t) j n ⇔ (j = i) ∧ (n = d),
 i = SUC i0, mindepth x (EL i (Lf::t)) = SOME d, EXISTS (mem x) (Lf::t),
 EXISTS (λe. ∃n. mindepth x e = SOME n) (Lf::t),
 is_mmindex (mindepth x) t i0 d,
 is_mmindex (mindepth x) (Lf::t) (SUC i0) d]
|- ∀j n. is_mmindex (mindepth x) t j n ⇔ (j = i0) ∧ (n = d)
Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. EVEN n ⇔ ¬ODD n
Goal:  [ODD a ⇎ ODD b, ¬((ODD a ⇔ EVEN b) ∨ (a = b))] |- ODD a ⇔ EVEN b

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ (MOD_2EXP n a = MOD_2EXP n b)
Goal:  [] |- ∀n a. MOD_2EXP_EQ n a a

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ (MOD_2EXP n a = MOD_2EXP n b)
Goal:  [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ (MOD_2EXP n a = MOD_2EXP n b)
Goal:  []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ (MOD_2EXP n a = MOD_2EXP n b)
Goal:  [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. EVEN n ⇔ ¬ODD n
Goal: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒
   a ≠ b ⇒
   (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b), a ≠ b,
 ODD a ⇔ EVEN b, SUC v = BRANCHING_BIT a b] |- EVEN b ⇎ ODD b

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [T, a ≠ b, ODD a ⇔ ¬ODD b] |- ¬ODD b ⇎ ODD b

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. DIV2 n = n DIV 2
Goal: 
[∀a' b'.
   (BRANCHING_BIT (DIV2 a) (DIV2 b) = BRANCHING_BIT a' b') ⇒
   (BRANCHING_BIT a' b' = BRANCHING_BIT b' a'), ODD a ⇎ EVEN b,
 ODD b ⇎ EVEN a, b ≠ a, v = BRANCHING_BIT (DIV2 a) (DIV2 b)]
|- BRANCHING_BIT (a DIV 2) (b DIV 2) = BRANCHING_BIT (b DIV 2) (a DIV 2)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. EVEN n ⇔ ¬ODD n
Goal: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒ (BRANCHING_BIT a b = BRANCHING_BIT b a),
 ¬((ODD a ⇔ EVEN b) ∨ (a = b)), ODD b ⇔ EVEN a,
 SUC v = BRANCHING_BIT a b] |- F

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀n. EVEN n ⇔ ¬ODD n
Goal: 
[∀a b.
   (v = BRANCHING_BIT a b) ⇒ (BRANCHING_BIT a b = BRANCHING_BIT b a),
 ¬((ODD b ⇔ EVEN a) ∨ (b = a)), ODD a ⇔ EVEN b,
 SUC v = BRANCHING_BIT a b] |- F

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t ⇒ EVERY_LEAF Q t,
 ∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t' ⇒ EVERY_LEAF Q t',
 ∀k d. P k d ⇒ Q k d, EVERY_LEAF P t, EVERY_LEAF P t']
|- EVERY_LEAF Q t'

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t ⇒ EVERY_LEAF Q t,
 ∀P Q. (∀k d. P k d ⇒ Q k d) ∧ EVERY_LEAF P t' ⇒ EVERY_LEAF Q t',
 ∀k d. P k d ⇒ Q k d, EVERY_LEAF P t, EVERY_LEAF P t'] |- EVERY_LEAF Q t

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF
     (λk d.
        MOD_2EXP_EQ (BRANCHING_BIT q n0) k q ∧
        BIT (BRANCHING_BIT q n0) k) t'
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF
     (λk d.
        MOD_2EXP_EQ (BRANCHING_BIT q n0) k q ∧
        BIT (BRANCHING_BIT q n0) k) t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- MOD_2EXP (BRANCHING_BIT q n0) q < 2 ** BRANCHING_BIT q n0
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n q n0,
 n0 < 2 ** n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF
     (λk d.
        MOD_2EXP_EQ (BRANCHING_BIT q n0) k q ∧
        ¬BIT (BRANCHING_BIT q n0) k) t'
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n q n0,
 n0 < 2 ** n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF
     (λk d.
        MOD_2EXP_EQ (BRANCHING_BIT q n0) k q ∧
        ¬BIT (BRANCHING_BIT q n0) k) t
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n q n0,
 n0 < 2 ** n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- MOD_2EXP (BRANCHING_BIT q n0) q < 2 ** BRANCHING_BIT q n0
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n q, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n q n0]
|- t' |+ (q,r) ≠ <{}>
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n q n0]
|- t |+ (q,r) ≠ <{}>
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q] |- BIT (BRANCHING_BIT q n) n
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n) n q
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, ¬BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP (BRANCHING_BIT q n) q < 2 ** BRANCHING_BIT q n
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, BIT (BRANCHING_BIT q n) q] |- ¬BIT (BRANCHING_BIT q n) n
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n) n q
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀t k d. t |+ (k,d) ≠ <{}>
 [] |- MOD_2EXP x n < 2 ** x
Goal:  [n ≠ q, BIT (BRANCHING_BIT q n) q]
|- MOD_2EXP (BRANCHING_BIT q n) q < 2 ** BRANCHING_BIT q n
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- BIT (BRANCHING_BIT q n0) n0
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- BIT (BRANCHING_BIT q n0) n0
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n q n0,
 n0 < 2 ** n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- ¬BIT (BRANCHING_BIT q n0) n0
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n q n0,
 n0 < 2 ** n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- ¬BIT (BRANCHING_BIT q n0) n0
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀a b. MOD_2EXP_EQ (BRANCHING_BIT a b) a b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q] |- BIT (BRANCHING_BIT q n0) k
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) k q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q] |- BIT (BRANCHING_BIT q n0) k
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) q, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) n0,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) k q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q] |- ¬BIT (BRANCHING_BIT q n0) k
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) k q
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q] |- ¬BIT (BRANCHING_BIT q n0) k
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 [] |- ∀m n a b. n ≤ m ∧ MOD_2EXP_EQ m a b ⇒ MOD_2EXP_EQ n a b
 [] |- a < b ⇒ a ≤ b
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇔ MOD_2EXP_EQ n b a
 []
|- ∀n a b c. MOD_2EXP_EQ n a b ∧ MOD_2EXP_EQ n b c ⇒ MOD_2EXP_EQ n a c
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
Goal: 
[IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT q n0) n0, ¬MOD_2EXP_EQ n q n0, n0 < 2 ** n,
 BRANCHING_BIT q n0 < n, IS_PTREE t ⇒ IS_PTREE (t |+ (q,r)),
 IS_PTREE t' ⇒ IS_PTREE (t' |+ (q,r)), BIT n k,
 BIT (BRANCHING_BIT q n0) q,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0,
 MOD_2EXP_EQ (BRANCHING_BIT q n0) n0 q]
|- MOD_2EXP_EQ (BRANCHING_BIT q n0) k q
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀p m l r.
     p < 2 ** m ∧ ¬((l = <{}>) ∧ (r = <{}>)) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r ∧ IS_PTREE l ∧
     IS_PTREE r ⇒
     IS_PTREE (BRANCH (p,m,l,r))
 [] |- ∀P t k. EVERY_LEAF P t ⇒ EVERY_LEAF P (t \\ k)
Goal: 
[∀k. IS_PTREE t ⇒ IS_PTREE (t \\ k),
 ∀k. IS_PTREE t' ⇒ IS_PTREE (t' \\ k), IS_PTREE t, IS_PTREE t',
 t ≠ <{}>, t' ≠ <{}>, ¬BIT n k, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- IS_PTREE (BRANCH (n0,n,t,t' \\ k))
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀p m l r.
     p < 2 ** m ∧ ¬((l = <{}>) ∧ (r = <{}>)) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r ∧ IS_PTREE l ∧
     IS_PTREE r ⇒
     IS_PTREE (BRANCH (p,m,l,r))
 [] |- ∀P t k. EVERY_LEAF P t ⇒ EVERY_LEAF P (t \\ k)
Goal: 
[∀k. IS_PTREE t ⇒ IS_PTREE (t \\ k),
 ∀k. IS_PTREE t' ⇒ IS_PTREE (t' \\ k), IS_PTREE t, IS_PTREE t',
 t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n, BIT n k,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- IS_PTREE (BRANCH (n0,n,t \\ k,t'))
Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀d. ¬P k d, ∀P k. (∀d. ¬P k d) ∧ EVERY_LEAF P t ⇒ (t ' k = NONE),
 ∀P k. (∀d. ¬P k d) ∧ EVERY_LEAF P t' ⇒ (t' ' k = NONE), ¬BIT n k,
 EVERY_LEAF P t, EVERY_LEAF P t'] |- t' ' k = NONE

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀d. ¬P k d, ∀P k. (∀d. ¬P k d) ∧ EVERY_LEAF P t ⇒ (t ' k = NONE),
 ∀P k. (∀d. ¬P k d) ∧ EVERY_LEAF P t' ⇒ (t' ' k = NONE), BIT n k,
 EVERY_LEAF P t, EVERY_LEAF P t'] |- t ' k = NONE

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [∀d. ¬P k d, P n a] |- k ≠ n

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k d j.
   IS_PTREE t ⇒ ((t |+ (k,d)) ' j = if k = j then SOME d else t ' j),
 ∀k d j.
   IS_PTREE t' ⇒ ((t' |+ (k,d)) ' j = if k = j then SOME d else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>, ¬BIT n j,
 ¬BIT (BRANCHING_BIT k n0) j, ¬BIT (BRANCHING_BIT k n0) k,
 ¬MOD_2EXP_EQ n k n0, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- NONE = t' ' j
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k d j.
   IS_PTREE t ⇒ ((t |+ (k,d)) ' j = if k = j then SOME d else t ' j),
 ∀k d j.
   IS_PTREE t' ⇒ ((t' |+ (k,d)) ' j = if k = j then SOME d else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>,
 ¬BIT (BRANCHING_BIT k n0) j, ¬BIT (BRANCHING_BIT k n0) k,
 ¬MOD_2EXP_EQ n k n0, n0 < 2 ** n, BIT n j,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- NONE = t ' j
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k d j.
   IS_PTREE t ⇒ ((t |+ (k,d)) ' j = if k = j then SOME d else t ' j),
 ∀k d j.
   IS_PTREE t' ⇒ ((t' |+ (k,d)) ' j = if k = j then SOME d else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>, ¬BIT n j,
 ¬MOD_2EXP_EQ n k n0, n0 < 2 ** n, BIT (BRANCHING_BIT k n0) j,
 BIT (BRANCHING_BIT k n0) k,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- NONE = t' ' j
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k d j.
   IS_PTREE t ⇒ ((t |+ (k,d)) ' j = if k = j then SOME d else t ' j),
 ∀k d j.
   IS_PTREE t' ⇒ ((t' |+ (k,d)) ' j = if k = j then SOME d else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>,
 ¬MOD_2EXP_EQ n k n0, n0 < 2 ** n, BIT n j, BIT (BRANCHING_BIT k n0) j,
 BIT (BRANCHING_BIT k n0) k,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- NONE = t ' j
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal:  [j ≠ k, k ≠ j, ¬BIT (BRANCHING_BIT k j) j, ¬BIT (BRANCHING_BIT k j) k]
|- F
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ BRANCHING_BIT a b < n
 []
|- ∀a b. a ≠ b ⇒ (BIT (BRANCHING_BIT a b) a ⇎ BIT (BRANCHING_BIT a b) b)
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 [] |- ∀n a b. ¬MOD_2EXP_EQ n a b ⇒ a ≠ b
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
Goal:  [j ≠ k, k ≠ j, BIT (BRANCHING_BIT k j) j, BIT (BRANCHING_BIT k j) k]
|- F
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n j,
 ¬MOD_2EXP_EQ n j n0, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- t' ' j = NONE
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬MOD_2EXP_EQ n j n0,
 n0 < 2 ** n, BIT n j,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t] |- t ' j = NONE
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>, ¬BIT n j,
 ¬BIT n k, n0 < 2 ** n, t' \\ k = <{}>,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- t ' j = t' ' j
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n j, n0 < 2 ** n,
 t' \\ j = <{}>, EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n j n0]
|- t ' j = NONE
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', k ≠ j, t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n,
 t \\ k = <{}>, BIT n j, BIT n k,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n k n0]
|- t' ' j = t ' j
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     (t ' k = NONE)
 []
|- (∀k. <{}> ' k = NONE) ∧
   (∀k j d. Leaf j d ' k = if k = j then SOME d else NONE) ∧
   ∀r p m l k. Branch p m l r ' k = (if BIT m k then l else r) ' k
Goal: 
[∀k j. IS_PTREE t ⇒ ((t \\ k) ' j = if k = j then NONE else t ' j),
 ∀k j. IS_PTREE t' ⇒ ((t' \\ k) ' j = if k = j then NONE else t' ' j),
 IS_PTREE t, IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n,
 t \\ j = <{}>, BIT n j,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t, MOD_2EXP_EQ n j n0]
|- t' ' j = NONE
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀f t.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) (TRANSFORM f t)
 []
|- ∀f t.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) (TRANSFORM f t)
Goal: 
[∀f. IS_PTREE t ⇒ IS_PTREE (TRANSFORM f t),
 ∀f. IS_PTREE t' ⇒ IS_PTREE (TRANSFORM f t'), IS_PTREE t, IS_PTREE t',
 t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) (TRANSFORM f t')
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀f t.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ⇒
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) (TRANSFORM f t)
 []
|- ∀f t.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ⇒
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) (TRANSFORM f t)
Goal: 
[∀f. IS_PTREE t ⇒ IS_PTREE (TRANSFORM f t),
 ∀f. IS_PTREE t' ⇒ IS_PTREE (TRANSFORM f t'), IS_PTREE t, IS_PTREE t',
 t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) (TRANSFORM f t)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) t ⇒
     (t ' k = NONE)
Goal: 
[IS_PTREE l, IS_PTREE r, BIT n p ⇎ BIT n k, l ≠ <{}>, r ≠ <{}>, n < m,
 p < 2 ** m, EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l] |- r ' k = NONE
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀n a b. MOD_2EXP_EQ n a b ⇒ ∀x. x < n ⇒ (BIT x a ⇔ BIT x b)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) t ⇒
     (t ' k = NONE)
Goal: 
[IS_PTREE l, IS_PTREE r, BIT n p ⇎ BIT n k, l ≠ <{}>, r ≠ <{}>, n < m,
 p < 2 ** m, EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l] |- l ' k = NONE
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) t ⇒
     (t ' k = NONE)
Goal: 
[IS_PTREE l, IS_PTREE r, l ≠ <{}>, r ≠ <{}>, ¬MOD_2EXP_EQ m k p,
 p < 2 ** m, EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l] |- r ' k = NONE
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) t ⇒
     (t ' k = NONE)
Goal: 
[IS_PTREE l, IS_PTREE r, l ≠ <{}>, r ≠ <{}>, ¬MOD_2EXP_EQ m k p,
 p < 2 ** m, EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l] |- l ' k = NONE
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ n k n0 ∧ BIT n k
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ n k n0 ∧ ¬BIT n k
Goal: 
[IS_PTREE l, IS_PTREE r, IS_PTREE r', IS_PTREE (Branch p m l r),
 IS_PTREE (Branch p m l r'), l ≠ <{}>, r ≠ <{}>, r' ≠ <{}>, n0 < 2 ** n,
 p < 2 ** m, IS_PTREE (Branch p m l r) ⇒ ∃k. ¬BIT m k ∧ IS_SOME (r ' k),
 IS_PTREE (Branch p m l r') ⇒ ∃k. ¬BIT m k ∧ IS_SOME (r' ' k),
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) (Branch n0 n r r'),
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) r',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) r]
|- ∃k. ¬BIT m k ∧ IS_SOME ((if BIT n k then r else r') ' k)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ n k n0 ∧ BIT n k
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ n k n0 ∧ ¬BIT n k
Goal: 
[IS_PTREE l, IS_PTREE l', IS_PTREE r, IS_PTREE (Branch p m l r),
 IS_PTREE (Branch p m l' r), l ≠ <{}>, l' ≠ <{}>, r ≠ <{}>, n0 < 2 ** n,
 p < 2 ** m, IS_PTREE (Branch p m l r) ⇒ ∃k. BIT m k ∧ IS_SOME (l ' k),
 IS_PTREE (Branch p m l' r) ⇒ ∃k. BIT m k ∧ IS_SOME (l' ' k),
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) (Branch n0 n l l'),
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) l',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) l]
|- ∃k. BIT m k ∧ IS_SOME ((if BIT n k then l else l') ' k)
Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2 ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2 ' k) ⇔ (Branch n0 n t1 t1' = t2)),
 ∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2' ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2' ' k) ⇔
    (Branch n0 n t1 t1' = t2')),
 ∀t2. IS_PTREE t1 ∧ IS_PTREE t2 ⇒ ((∀k. t1 ' k = t2 ' k) ⇔ (t1 = t2)),
 ∀t2.
   IS_PTREE t1' ∧ IS_PTREE t2 ⇒ ((∀k. t1' ' k = t2 ' k) ⇔ (t1' = t2)),
 IS_PTREE (Branch n0 n t2 t2'), IS_PTREE (Branch n0' n' t1 t1')]
|- (n0' = n0) ∧ (n' = n) ∧ (t1 = t2) ∧ (t1' = t2') ⇒
   ∀k.
     ¬IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
     ¬IS_SOME ((if BIT n k then t2 else t2') ' k) ∨
     (IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
      IS_SOME ((if BIT n k then t2 else t2') ' k)) ∧
     (THE ((if BIT n' k then t1 else t1') ' k) =
      THE ((if BIT n k then t2 else t2') ' k))

function: raw_match_type message: different tyopsThm list: 
 []
|- (IS_PTREE <{}> ⇔ T) ∧ (∀k d. IS_PTREE (Leaf k d) ⇔ T) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇔
     p < 2 ** m ∧ IS_PTREE l ∧ IS_PTREE r ∧ l ≠ <{}> ∧ r ≠ <{}> ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r
Goal: 
[∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2 ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2 ' k) ⇔ (Branch n0 n t1 t1' = t2)),
 ∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2' ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2' ' k) ⇔
    (Branch n0 n t1 t1' = t2')),
 ∀k. ¬MOD_2EXP_EQ n k n0 ⇒ ¬IS_SOME (t2 ' k),
 ∀k. ¬MOD_2EXP_EQ n k n0 ⇒ ¬IS_SOME (t2' ' k),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ ¬IS_SOME (t1 ' k),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ ¬IS_SOME (t1' ' k),
 ∀n'. n' < n ⇒ ∀k. (BIT n' n0 ⇎ BIT n' k) ⇒ ¬IS_SOME (t2 ' k),
 ∀n'. n' < n ⇒ ∀k. (BIT n' n0 ⇎ BIT n' k) ⇒ ¬IS_SOME (t2' ' k),
 ∀n. n < n' ⇒ ∀k. (BIT n n0' ⇎ BIT n k) ⇒ ¬IS_SOME (t1 ' k),
 ∀n. n < n' ⇒ ∀k. (BIT n n0' ⇎ BIT n k) ⇒ ¬IS_SOME (t1' ' k),
 ∀k.
   ¬IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
   ¬IS_SOME ((if BIT n k then t2 else t2') ' k) ∨
   (IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
    IS_SOME ((if BIT n k then t2 else t2') ' k)) ∧
   (THE ((if BIT n' k then t1 else t1') ' k) =
    THE ((if BIT n k then t2 else t2') ' k)),
 ∀t2. IS_PTREE t1 ∧ IS_PTREE t2 ⇒ ((∀k. t1 ' k = t2 ' k) ⇔ (t1 = t2)),
 ∀t2.
   IS_PTREE t1' ∧ IS_PTREE t2 ⇒ ((∀k. t1' ' k = t2 ' k) ⇔ (t1' = t2)),
 IS_PTREE (Branch n0 n t2 t2'), IS_PTREE (Branch n0' n' t1 t1'),
 IS_SOME (t1 ' k'), IS_SOME (t1' ' k'''), IS_SOME (t2 ' k),
 IS_SOME (t2' ' k''), ¬(n < n'), ¬(n' < n), ¬BIT n k'', ¬BIT n' k''',
 n0 < 2 ** n, n0' < 2 ** n, n = n', n0 = n0', BIT n k, BIT n' k']
|- (t1 = t2) ⇔ ∀k. t1 ' k = t2 ' k
function: raw_match_type message: different tyopsThm list: 
 []
|- (IS_PTREE <{}> ⇔ T) ∧ (∀k d. IS_PTREE (Leaf k d) ⇔ T) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇔
     p < 2 ** m ∧ IS_PTREE l ∧ IS_PTREE r ∧ l ≠ <{}> ∧ r ≠ <{}> ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r
Goal: 
[∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2 ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2 ' k) ⇔ (Branch n0 n t1 t1' = t2)),
 ∀n n0.
   IS_PTREE (Branch n0 n t1 t1') ∧ IS_PTREE t2' ⇒
   ((∀k. Branch n0 n t1 t1' ' k = t2' ' k) ⇔
    (Branch n0 n t1 t1' = t2')),
 ∀k. ¬MOD_2EXP_EQ n k n0 ⇒ ¬IS_SOME (t2 ' k),
 ∀k. ¬MOD_2EXP_EQ n k n0 ⇒ ¬IS_SOME (t2' ' k),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ ¬IS_SOME (t1 ' k),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ ¬IS_SOME (t1' ' k),
 ∀n'. n' < n ⇒ ∀k. (BIT n' n0 ⇎ BIT n' k) ⇒ ¬IS_SOME (t2 ' k),
 ∀n'. n' < n ⇒ ∀k. (BIT n' n0 ⇎ BIT n' k) ⇒ ¬IS_SOME (t2' ' k),
 ∀n. n < n' ⇒ ∀k. (BIT n n0' ⇎ BIT n k) ⇒ ¬IS_SOME (t1 ' k),
 ∀n. n < n' ⇒ ∀k. (BIT n n0' ⇎ BIT n k) ⇒ ¬IS_SOME (t1' ' k),
 ∀k.
   ¬IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
   ¬IS_SOME ((if BIT n k then t2 else t2') ' k) ∨
   (IS_SOME ((if BIT n' k then t1 else t1') ' k) ∧
    IS_SOME ((if BIT n k then t2 else t2') ' k)) ∧
   (THE ((if BIT n' k then t1 else t1') ' k) =
    THE ((if BIT n k then t2 else t2') ' k)),
 ∀t2. IS_PTREE t1 ∧ IS_PTREE t2 ⇒ ((∀k. t1 ' k = t2 ' k) ⇔ (t1 = t2)),
 ∀t2.
   IS_PTREE t1' ∧ IS_PTREE t2 ⇒ ((∀k. t1' ' k = t2 ' k) ⇔ (t1' = t2)),
 IS_PTREE (Branch n0 n t2 t2'), IS_PTREE (Branch n0' n' t1 t1'),
 IS_SOME (t1 ' k'), IS_SOME (t1' ' k'''), IS_SOME (t2 ' k),
 IS_SOME (t2' ' k''), ¬(n < n'), ¬(n' < n), ¬BIT n k'', ¬BIT n' k''',
 n0 < 2 ** n, n0' < 2 ** n, (t1 = t2) ⇔ ∀k. t1 ' k = t2 ' k, n = n',
 n0 = n0', BIT n k, BIT n' k'] |- (t1' = t2') ⇔ ∀k. t1' ' k = t2' ' k
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t ⇒
     (t ' k = NONE)
Goal: 
[T,
 ∀n'' n0''.
   n0'' < 2 ** n'' ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ BIT n'' k) t1 ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ ¬BIT n'' k) t1' ⇒
   ((∀k. Branch n0'' n'' t1 t1' ' k = t2 ' k) ⇔
    (Branch n0'' n'' t1 t1' = t2)),
 ∀n'' n0''.
   n0'' < 2 ** n'' ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ BIT n'' k) t1 ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ ¬BIT n'' k) t1' ⇒
   ((∀k. Branch n0'' n'' t1 t1' ' k = t2' ' k) ⇔
    (Branch n0'' n'' t1 t1' = t2')),
 ∀k''''.
   (if BIT n' k'''' then t1 else t1') ' k'''' =
   (if BIT n' k'''' then t2 else t2') ' k'''',
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t1 ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t1' ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t2 ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t2' ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t1 ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t1' ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t2 ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t2' ' k = NONE),
 ∀t2''. IS_PTREE t2'' ⇒ ((∀k. t1 ' k = t2'' ' k) ⇔ (t1 = t2'')),
 ∀t2''. IS_PTREE t2'' ⇒ ((∀k. t1' ' k = t2'' ' k) ⇔ (t1' = t2'')),
 IS_PTREE t1, IS_PTREE t1', IS_PTREE t2, IS_PTREE t2',
 IS_SOME (t1 ' k'), IS_SOME (t1' ' k'''), IS_SOME (t2 ' k),
 IS_SOME (t2' ' k''), t1 ≠ <{}>, t1' ≠ <{}>, t2 ≠ <{}>, t2' ≠ <{}>,
 ¬BIT n' k'', ¬BIT n' k''', n0' < 2 ** n, n0' < 2 ** n',
 (t1 = t2) ⇔ ∀k. t1 ' k = t2 ' k, (t1' = t2') ⇔ ∀k. t1' ' k = t2' ' k,
 n = n', n0 = n0', BIT n' k, BIT n' k', BIT n' k'''',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t1',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t2',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t1,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t2]
|- t1' ' k'''' = t2' ' k''''
function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t ⇒
     (t ' k = NONE)
Goal: 
[T,
 ∀n'' n0''.
   n0'' < 2 ** n'' ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ BIT n'' k) t1 ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ ¬BIT n'' k) t1' ⇒
   ((∀k. Branch n0'' n'' t1 t1' ' k = t2 ' k) ⇔
    (Branch n0'' n'' t1 t1' = t2)),
 ∀n'' n0''.
   n0'' < 2 ** n'' ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ BIT n'' k) t1 ∧
   EVERY_LEAF (λk d. MOD_2EXP_EQ n'' k n0'' ∧ ¬BIT n'' k) t1' ⇒
   ((∀k. Branch n0'' n'' t1 t1' ' k = t2' ' k) ⇔
    (Branch n0'' n'' t1 t1' = t2')),
 ∀k''''.
   (if BIT n' k'''' then t1 else t1') ' k'''' =
   (if BIT n' k'''' then t2 else t2') ' k'''',
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t1 ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t1' ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t2 ' k = NONE),
 ∀k. ¬MOD_2EXP_EQ n' k n0' ⇒ (t2' ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t1 ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t1' ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t2 ' k = NONE),
 ∀n''. n'' < n' ⇒ ∀k. (BIT n'' n0' ⇎ BIT n'' k) ⇒ (t2' ' k = NONE),
 ∀t2''. IS_PTREE t2'' ⇒ ((∀k. t1 ' k = t2'' ' k) ⇔ (t1 = t2'')),
 ∀t2''. IS_PTREE t2'' ⇒ ((∀k. t1' ' k = t2'' ' k) ⇔ (t1' = t2'')),
 IS_PTREE t1, IS_PTREE t1', IS_PTREE t2, IS_PTREE t2',
 IS_SOME (t1 ' k'), IS_SOME (t1' ' k'''), IS_SOME (t2 ' k),
 IS_SOME (t2' ' k''), t1 ≠ <{}>, t1' ≠ <{}>, t2 ≠ <{}>, t2' ≠ <{}>,
 ¬BIT n' k'', ¬BIT n' k''', ¬BIT n' k'''', n0' < 2 ** n, n0' < 2 ** n',
 (t1 = t2) ⇔ ∀k. t1 ' k = t2 ' k, (t1' = t2') ⇔ ∀k. t1' ' k = t2' ' k,
 n = n', n0 = n0', BIT n' k, BIT n' k',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t1',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t2',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t1,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t2]
|- t1 ' k'''' = t2 ' k''''
function: raw_match_type message: different tyopsThm list: 
 []
|- (∀k. ¬IS_SOME (<{}> ' k)) ∧
   (∀k j b. IS_SOME (Leaf j b ' k) ⇔ (j = k)) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇒
     (∃k. BIT m k ∧ IS_SOME (l ' k)) ∧
     (∃k. ¬BIT m k ∧ IS_SOME (r ' k)) ∧
     ∀k n.
       ¬MOD_2EXP_EQ m k p ∨ n < m ∧ (BIT n p ⇎ BIT n k) ⇒
       ¬IS_SOME (l ' k) ∧ ¬IS_SOME (r ' k)
Goal: 
[∀t2. IS_PTREE t1 ∧ IS_PTREE t2 ⇒ ((∀k. t1 ' k = t2 ' k) ⇔ (t1 = t2)),
 ∀t2.
   IS_PTREE t1' ∧ IS_PTREE t2 ⇒ ((∀k. t1' ' k = t2 ' k) ⇔ (t1' = t2)),
 IS_PTREE (Leaf n a), IS_PTREE (Branch n0 n' t1 t1')]
|- ∃k.
     (IS_SOME ((if BIT n' k then t1 else t1') ' k) ∨ (n = k)) ∧
     ((¬IS_SOME ((if BIT n' k then t1 else t1') ' k) ∨ n ≠ k) ∨
      THE ((if BIT n' k then t1 else t1') ' k) ≠
      THE (if k = n then SOME a else NONE))
function: raw_match_type message: different tyopsThm list: 
 []
|- (∀k. ¬IS_SOME (<{}> ' k)) ∧
   (∀k j b. IS_SOME (Leaf j b ' k) ⇔ (j = k)) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇒
     (∃k. BIT m k ∧ IS_SOME (l ' k)) ∧
     (∃k. ¬BIT m k ∧ IS_SOME (r ' k)) ∧
     ∀k n.
       ¬MOD_2EXP_EQ m k p ∨ n < m ∧ (BIT n p ⇎ BIT n k) ⇒
       ¬IS_SOME (l ' k) ∧ ¬IS_SOME (r ' k)
Goal: 
[∀t2. IS_PTREE t1 ∧ IS_PTREE t2 ⇒ ((∀k. t1 ' k = t2 ' k) ⇔ (t1 = t2)),
 ∀t2.
   IS_PTREE t1' ∧ IS_PTREE t2 ⇒ ((∀k. t1' ' k = t2 ' k) ⇔ (t1' = t2)),
 IS_PTREE (Branch n0 n t1 t1')]
|- ∃k. IS_SOME ((if BIT n k then t1 else t1') ' k)
function: raw_match_type message: different tyopsThm list: 
 []
|- (∀k. ¬IS_SOME (<{}> ' k)) ∧
   (∀k j b. IS_SOME (Leaf j b ' k) ⇔ (j = k)) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇒
     (∃k. BIT m k ∧ IS_SOME (l ' k)) ∧
     (∃k. ¬BIT m k ∧ IS_SOME (r ' k)) ∧
     ∀k n.
       ¬MOD_2EXP_EQ m k p ∨ n < m ∧ (BIT n p ⇎ BIT n k) ⇒
       ¬IS_SOME (l ' k) ∧ ¬IS_SOME (r ' k)
Goal: 
[∀n a.
   IS_PTREE (Leaf n a) ∧ IS_PTREE t2 ⇒
   ((∀k. Leaf n a ' k = t2 ' k) ⇔ (Leaf n a = t2)),
 ∀n a.
   IS_PTREE (Leaf n a) ∧ IS_PTREE t2' ⇒
   ((∀k. Leaf n a ' k = t2' ' k) ⇔ (Leaf n a = t2')),
 IS_PTREE (Leaf n' a), IS_PTREE (Branch n0 n t2 t2')]
|- ∃k.
     ((n' = k) ∨ IS_SOME ((if BIT n k then t2 else t2') ' k)) ∧
     ((n' ≠ k ∨ ¬IS_SOME ((if BIT n k then t2 else t2') ' k)) ∨
      THE (if k = n' then SOME a else NONE) ≠
      THE ((if BIT n k then t2 else t2') ' k))
function: raw_match_type message: different tyopsThm list: 
 []
|- (∀k. ¬IS_SOME (<{}> ' k)) ∧
   (∀k j b. IS_SOME (Leaf j b ' k) ⇔ (j = k)) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇒
     (∃k. BIT m k ∧ IS_SOME (l ' k)) ∧
     (∃k. ¬BIT m k ∧ IS_SOME (r ' k)) ∧
     ∀k n.
       ¬MOD_2EXP_EQ m k p ∨ n < m ∧ (BIT n p ⇎ BIT n k) ⇒
       ¬IS_SOME (l ' k) ∧ ¬IS_SOME (r ' k)
 [] |- ∀x. THE (SOME x) = x
Goal:  [IS_PTREE (Leaf n a), IS_PTREE (Leaf n' a')]
|- (∀k.
      n' ≠ k ∧ n ≠ k ∨
      ((n' = k) ∧ (n = k)) ∧
      (THE (if k = n' then SOME a' else NONE) =
       THE (if k = n then SOME a else NONE))) ⇔ (n' = n) ∧ (a' = a)
function: raw_match_type message: different tyopsThm list: 
 []
|- (∀k. ¬IS_SOME (<{}> ' k)) ∧
   (∀k j b. IS_SOME (Leaf j b ' k) ⇔ (j = k)) ∧
   ∀p m l r.
     IS_PTREE (Branch p m l r) ⇒
     (∃k. BIT m k ∧ IS_SOME (l ' k)) ∧
     (∃k. ¬BIT m k ∧ IS_SOME (r ' k)) ∧
     ∀k n.
       ¬MOD_2EXP_EQ m k p ∨ n < m ∧ (BIT n p ⇎ BIT n k) ⇒
       ¬IS_SOME (l ' k) ∧ ¬IS_SOME (r ' k)
Goal: 
[IS_PTREE (Branch n0 n t2 t2'),
 IS_PTREE <{}> ∧ IS_PTREE t2 ⇒ ((∀k. <{}> ' k = t2 ' k) ⇔ (<{}> = t2)),
 IS_PTREE <{}> ∧ IS_PTREE t2' ⇒
 ((∀k. <{}> ' k = t2' ' k) ⇔ (<{}> = t2'))]
|- ∃k. IS_SOME ((if BIT n k then t2 else t2') ' k)
Status: Unsatisfiable
Info: polymorph higher-order num 
Thm list: 
 [] |- ∀m n. SUC m < SUC n ⇔ m < n
 [] |- (∀l. EL 0 l = HD l) ∧ ∀l n. EL (SUC n) l = EL n (TL l)
 [] |- ∀h t. TL (h::t) = t
Goal:  [∀n. n < LENGTH l ⇒ ¬P (EL n l), ¬P h, SUC n' < SUC (LENGTH l)]
|- ¬P (EL (SUC n') (h::l))

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ¬IS_SOME x ⇔ (x = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k. IS_PTREE t ⇒ (MEM k (TRAVERSE t) ⇔ IS_SOME (t ' k)),
 ∀k. IS_PTREE t' ⇒ (MEM k (TRAVERSE t') ⇔ IS_SOME (t' ' k)), IS_PTREE t,
 IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, ¬BIT n k, n0 < 2 ** n,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- IS_SOME (t ' k) ∨ IS_SOME (t' ' k) ⇔ IS_SOME (t' ' k)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x. ¬IS_SOME x ⇔ (x = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ BIT n' k) t ⇒
     (t ' k = NONE)
 []
|- ∀t k.
     (∀d. ¬(λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) k d) ∧
     EVERY_LEAF (λk d. MOD_2EXP_EQ n' k n0' ∧ ¬BIT n' k) t ⇒
     (t ' k = NONE)
Goal: 
[∀k. IS_PTREE t ⇒ (MEM k (TRAVERSE t) ⇔ IS_SOME (t ' k)),
 ∀k. IS_PTREE t' ⇒ (MEM k (TRAVERSE t') ⇔ IS_SOME (t' ' k)), IS_PTREE t,
 IS_PTREE t', t ≠ <{}>, t' ≠ <{}>, n0 < 2 ** n, BIT n k,
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ ¬BIT n k) t',
 EVERY_LEAF (λk d. MOD_2EXP_EQ n k n0 ∧ BIT n k) t]
|- IS_SOME (t ' k) ∨ IS_SOME (t' ' k) ⇔ IS_SOME (t ' k)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ m k p ∧ BIT m k
 []
|- ∀t k.
     EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) t ∧
     IS_SOME (t ' k) ⇒
     MOD_2EXP_EQ m k p ∧ ¬BIT m k
Goal: 
[IS_PTREE l, IS_PTREE r, IS_SOME (l ' k), IS_SOME (r ' j), l ≠ <{}>,
 r ≠ <{}>, p < 2 ** m,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ ¬BIT m k) r,
 EVERY_LEAF (λk d. MOD_2EXP_EQ m k p ∧ BIT m k) l] |- k ≠ j
Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀t k. IS_PTREE t ⇒ (MEM k (TRAVERSE t) ⇔ IS_SOME (t ' k))
 []
|- ∀p m l r k j.
     IS_PTREE (Branch p m l r) ∧ IS_SOME (l ' k) ∧ IS_SOME (r ' j) ⇒
     k ≠ j
Goal: 
[IS_PTREE t, IS_PTREE t', IS_PTREE (Branch n0 n t t'),
 IS_PTREE t ⇒ ALL_DISTINCT (TRAVERSE t),
 IS_PTREE t' ⇒ ALL_DISTINCT (TRAVERSE t'), MEM e (TRAVERSE t)]
|- e ∉ LIST_TO_SET (TRAVERSE t')

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀t k. IS_PTREE t ⇒ (MEM k (TRAVERSE t) ⇔ IS_SOME (t ' k))
 []
|- ∀p m l r k j.
     IS_PTREE (Branch p m l r) ∧ IS_SOME (l ' k) ∧ IS_SOME (r ' j) ⇒
     k ≠ j
Goal: 
[IS_PTREE t, IS_PTREE t', IS_PTREE (Branch n0 n t t'),
 IS_PTREE t ⇒ ALL_DISTINCT (TRAVERSE t),
 IS_PTREE t' ⇒ ALL_DISTINCT (TRAVERSE t')] |- ALL_DISTINCT (TRAVERSE t')

Status: Unsatisfiable
Info: polymorph num 
Thm list: 
 [] |- ∀t k. IS_PTREE t ⇒ (MEM k (TRAVERSE t) ⇔ IS_SOME (t ' k))
 []
|- ∀p m l r k j.
     IS_PTREE (Branch p m l r) ∧ IS_SOME (l ' k) ∧ IS_SOME (r ' j) ⇒
     k ≠ j
Goal: 
[IS_PTREE t, IS_PTREE t', IS_PTREE (Branch n0 n t t'),
 IS_PTREE t ⇒ ALL_DISTINCT (TRAVERSE t),
 IS_PTREE t' ⇒ ALL_DISTINCT (TRAVERSE t')] |- ALL_DISTINCT (TRAVERSE t)

function: write_tff message: 
[∀x''.
   ¬App (App $IN x'') (App LIST_TO_SET l1) ∨
   App (App $IN x'') (App LIST_TO_SET l2),
 ∀x''.
   App (App $IN x'') (App LIST_TO_SET l1) ∨
   ¬App (App $IN x'') (App LIST_TO_SET l2),
 ∀x''.
   (App (App FILTER (App $= x'')) l1 = App (App CONS x'') []) ∨
   ¬App (App $IN x'') (App LIST_TO_SET l1),
 ∀x''.
   (App (App FILTER (App $= x'')) l2 = App (App CONS x'') []) ∨
   ¬App (App $IN x'') (App LIST_TO_SET l2),
 App (App $IN x) (App LIST_TO_SET l1), 0 ≤ x',
 0 ≤ App LENGTH (App (App FILTER (App $= x)) l1),
 0 ≤ App LENGTH (App (App FILTER (App $= x)) l2),
 App LENGTH (App (App FILTER (App $= x)) l1) ≠
 App LENGTH (App (App FILTER (App $= x)) l2) ∨
 App (App EL x') (App (App FILTER (App $= x)) l1) ≠
 App (App EL x') (App (App FILTER (App $= x)) l2),
 App LENGTH (App (App FILTER (App $= x)) l1) ≠
 App LENGTH (App (App FILTER (App $= x)) l2) ∨
 x' < App LENGTH (App (App FILTER (App $= x)) l1)] |- FThm list: 
Goal: 
[∀x. MEM x l1 ⇔ MEM x l2, ∀x. MEM x l1 ⇒ (FILTER ($= x) l1 = [x]),
 ∀x. MEM x l2 ⇒ (FILTER ($= x) l2 = [x]), MEM x l1]
|- (LENGTH (FILTER ($= x) l1) = LENGTH (FILTER ($= x) l2)) ∧
   ∀x'.
     x' < LENGTH (FILTER ($= x) l1) ⇒
     (EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2))
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l x. MEM x l ⇔ ∃n. n < LENGTH l ∧ (x = EL n l)
Goal: 
[∀x. MEM x l1 ⇔ MEM x l2, ∀x. MEM x l1 ⇒ (FILTER ($= x) l1 = [x]),
 ∀x. MEM x l2 ⇒ (FILTER ($= x) l2 = [x]),
 ∀l. (∀n. n < LENGTH l ⇒ x ≠ EL n l) ⇔ (FILTER ($= x) l = []),
 x ∉ LIST_TO_SET l1]
|- (LENGTH (FILTER ($= x) l1) = LENGTH (FILTER ($= x) l2)) ∧
   ∀x'.
     x' < LENGTH (FILTER ($= x) l1) ⇒
     (EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2))
Status: Unsatisfiable
Info: higher-order lambda-lift num 
Thm list: 
Goal: 
[∀t x.
   IS_PTREE t ⇒
   (MEM x
      (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) (h INSERT_PTREE t) l)) ⇔
    (x = h) ∨
    x ≠ h ∧ MEM x (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t l))),
 IS_PTREE t]
|- (x = h') ∨
   x ≠ h' ∧
   ((x = h) ∨
    x ≠ h ∧ MEM x (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t l))) ⇔
   (x = h) ∨
   x ≠ h ∧
   ((x = h') ∨
    x ≠ h' ∧ MEM x (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t l)))

Status: Unsatisfiable
Info: higher-order lambda-lift num 
Thm list: 
Goal: 
[∀x.
   MEM x (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t (REVERSE l))) ⇔
   x ∈ NUMSET_OF_PTREE t ∨ MEM x l,
 ∀t'.
   IS_PTREE t' ⇒
   PERM (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t' (REVERSE l)))
     (SET_TO_LIST (NUMSET_OF_PTREE t' ∪ LIST_TO_SET l)), ALL_DISTINCT l,
 IS_PTREE t, h ∉ LIST_TO_SET l,
 PERM (TRAVERSE (FOLDR (λx y. x INSERT_PTREE y) t (REVERSE l)))
   (SET_TO_LIST (NUMSET_OF_PTREE t ∪ LIST_TO_SET l))]
|- (x = h) ∨ x ≠ h ∧ (x ∈ NUMSET_OF_PTREE t ∨ MEM x l) ⇔
   x ∈ NUMSET_OF_PTREE t ∨ (x = h) ∨ MEM x l

Status: Unsatisfiable
Info: num 
Thm list: 
 []
|- ∀t1 t2 n.
     IS_PTREE t1 ∧ IS_PTREE t2 ⇒
     (n IN_PTREE t1 UNION_PTREE t2 ⇔ n IN_PTREE t1 ∨ n IN_PTREE t2)
Goal:  [IS_PTREE t1, IS_PTREE t2]
|- x IN_PTREE t1 UNION_PTREE t2 ⇔ x IN_PTREE t2 UNION_PTREE t1

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [IS_PTREE t1, IS_PTREE t2, IS_PTREE t3]
|- x IN_PTREE t1 ∨ x IN_PTREE t2 ∨ x IN_PTREE t3 ⇔
   (x IN_PTREE t1 ∨ x IN_PTREE t2) ∨ x IN_PTREE t3

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [FINITE s1, FINITE s2, IS_PTREE t]
|- x IN_PTREE t ∨ x ∈ s1 ∨ x ∈ s2 ⇔ (x IN_PTREE t ∨ x ∈ s1) ∨ x ∈ s2

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [FINITE s, IS_PTREE t]
|- x' IN_PTREE t ∨ (x' = x) ∨ x' ∈ s ⇔ (x = x') ∨ x' IN_PTREE t ∨ x' ∈ s

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [FINITE s, IS_PTREE t, ¬(x IN_PTREE t)]
|- x' IN_PTREE t ∨ x' ∈ s ∧ x' ≠ x ⇔ x' ≠ x ∧ (x' IN_PTREE t ∨ x' ∈ s)

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [FINITE s, IS_PTREE t, x IN_PTREE t]
|- x' IN_PTREE t ∨ x' ∈ s ∧ x' ≠ x ⇔ x' IN_PTREE t ∨ x' ∈ s

Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- ∀l1 l2 l3. l1 ++ (l2 ++ l3) = l1 ++ l2 ++ l3
Goal: 
[∀l. TRAVERSE_AUX t l = TRAVERSE_AUX t [] ++ l,
 ∀l. TRAVERSE_AUX t' l = TRAVERSE_AUX t' [] ++ l]
|- ∀n n0 l.
     TRAVERSE_AUX t (TRAVERSE_AUX t' l) =
     TRAVERSE_AUX t (TRAVERSE_AUX t' []) ++ l

Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- ∀t l. TRAVERSE_AUX t l = TRAVERSE_AUX t [] ++ l
Goal:  [TRAVERSE t = TRAVERSE_AUX t [], TRAVERSE t' = TRAVERSE_AUX t' []]
|- TRAVERSE_AUX t [] ++ TRAVERSE_AUX t' [] =
   TRAVERSE_AUX t (TRAVERSE_AUX t' [])

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀f t. TRAVERSE (TRANSFORM f t) = TRAVERSE t
Goal:  [IS_PTREE t1, IS_PTREE t2]
|- TRAVERSE t1 = TRAVERSE (TRANSFORM (K ()) t1)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀f t. TRAVERSE (TRANSFORM f t) = TRAVERSE t
Goal: 
[IS_PTREE t1, IS_PTREE t2, TRAVERSE t1 = TRAVERSE (TRANSFORM (K ()) t1)]
|- TRAVERSE t2 = TRAVERSE (TRANSFORM (K ()) t2)

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀t1 t2.
     IS_PTREE t1 ∧ IS_PTREE t2 ⇒
     ((∀k. MEM k (TRAVERSE t1) ⇔ MEM k (TRAVERSE t2)) ⇔
      (TRAVERSE t1 = TRAVERSE t2))
Goal: 
[∀x. MEM x (TRAVERSE t1) ⇔ MEM x (TRAVERSE t2), IS_PTREE t1,
 IS_PTREE t2, QSORT $< (TRAVERSE t1) = QSORT $< (TRAVERSE t2)]
|- TRAVERSE t1 = TRAVERSE t2
Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [IS_PTREE t, k ∉ LIST_TO_SET (TRAVERSE t)]
|- (k = x) ∨ x IN_PTREE t ⇔ (x = k) ∨ x IN_PTREE t

function: raw_match_type message: different constructorsThm list: 
 []
|- ∀t k.
     IS_PTREE t ∧ k ∉ LIST_TO_SET (TRAVERSE t) ⇒
     PERM (SET_TO_LIST (NUMSET_OF_PTREE (k INSERT_PTREE t)))
       (k::TRAVERSE t)
 []
|- IS_PTREE t ⇒
   PERM (TRAVERSE (x INSERT_PTREE t))
     (SET_TO_LIST (NUMSET_OF_PTREE (x INSERT_PTREE t)))
 [] |- ∀l1 l2. PERM l1 l2 ⇔ PERM l2 l1
 [] |- ∀x y z. PERM x y ∧ PERM y z ⇒ PERM x z
 [] |- ∀f t. IS_PTREE t ⇒ IS_PTREE (TRANSFORM f t)
Goal:  [IS_PTREE t, k ∉ LIST_TO_SET (TRAVERSE (TRANSFORM (K ()) t))]
|- PERM (TRAVERSE (k INSERT_PTREE TRANSFORM (K ()) t))
     (k::TRAVERSE (TRANSFORM (K ()) t))
Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [IS_PTREE t, MEM k (TRAVERSE t)]
|- (k' = k) ∨ MEM k' (TRAVERSE t) ⇔ MEM k' (TRAVERSE t)

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [IS_PTREE t, k ∉ LIST_TO_SET (TRAVERSE t)]
|- k' ≠ k ∧ MEM k' (TRAVERSE t) ⇔ MEM k' (TRAVERSE t)

function: raw_match_type message: different constructorsThm list: 
 [] |- 0 < n ⇒ (SUC (n − 1) = n)
 [] |- ∀l x. MEM x l ⇒ 0 < LENGTH l
Goal: 
[∀k'. MEM k' l ⇒ (LENGTH (FILTER (λx. x ≠ k') l) = LENGTH l − 1),
 ALL_DISTINCT l, h ≠ k, h ∉ LIST_TO_SET l, MEM k l]
|- SUC (LENGTH l − 1) = LENGTH l
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀l x. MEM x l ⇔ ∃n. n < LENGTH l ∧ (x = EL n l)
Goal: 
[∀k. MEM k l ⇒ (LENGTH (FILTER (λx. x ≠ k) l) = LENGTH l − 1),
 ALL_DISTINCT l, h ∉ LIST_TO_SET l]
|- ∀n. n < LENGTH l ⇒ (λx. x ≠ h) (EL n l)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
 []
|- ∀t k.
     IS_PTREE t ∧ MEM k (TRAVERSE t) ⇒
     PERM (TRAVERSE (t \\ k)) (FILTER (λx. x ≠ k) (TRAVERSE t))
 [] |- ∀l1 l2. PERM l1 l2 ⇒ (LENGTH l1 = LENGTH l2)
 [] |- ∀t. IS_PTREE t ⇒ ALL_DISTINCT (TRAVERSE t)
 []
|- ∀l k.
     ALL_DISTINCT l ∧ MEM k l ⇒
     (LENGTH (FILTER (λx. x ≠ k) l) = LENGTH l − 1)
Goal:  [IS_PTREE t, MEM k (TRAVERSE t)]
|- LENGTH (TRAVERSE (t \\ k)) = LENGTH (TRAVERSE t) − 1
Status: Unsatisfiable
Info: num 
Thm list: 
Goal: 
[∀e. MEM e (TRAVERSE t) ⇒ e ≠ h ∧ e ∉ LIST_TO_SET l,
 ∀t'.
   IS_PTREE t' ∧ ALL_DISTINCT (TRAVERSE t') ∧
   (∀e. MEM e (TRAVERSE t') ⇒ e ∉ LIST_TO_SET l) ⇒
   (SIZE (FOLDL (combin$C $INSERT_PTREE) t' l) = SIZE t' + LENGTH l),
 ALL_DISTINCT l, ALL_DISTINCT (TRAVERSE t), IS_PTREE t,
 h ∉ LIST_TO_SET l]
|- (∀e. (e = h) ∨ e ≠ h ∧ MEM e (TRAVERSE t) ⇒ e ∉ LIST_TO_SET l) ∧
   h ∉ LIST_TO_SET (TRAVERSE t)

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
 [] |- ∀t x. IS_PTREE t ⇒ IS_PTREE (x INSERT_PTREE t)
 [] |- a + 1 + b = a + SUC b
Goal: 
[∀t.
   IS_PTREE t ∧ ALL_DISTINCT (TRAVERSE t ++ l) ⇒
   (SIZE (FOLDL (combin$C $INSERT_PTREE) t l) = SIZE t + LENGTH l),
 ALL_DISTINCT (TRAVERSE t ++ h::l),
 ALL_DISTINCT (TRAVERSE (h INSERT_PTREE t) ++ l), IS_PTREE t,
 h ∉ LIST_TO_SET (TRAVERSE t), SIZE (h INSERT_PTREE t) = SIZE t + 1]
|- SIZE (FOLDL (combin$C $INSERT_PTREE) (h INSERT_PTREE t) l) =
   SIZE t + SUC (LENGTH l)

Status: Unsatisfiable
Thm list: 
Goal:  []
|- (x' ∈ s1 ∨ x' ∈ s2) ∧ x' ≠ x ⇔ x' ∈ s1 ∧ x' ≠ x ∨ x' ∈ s2 ∧ x' ≠ x

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. p + n = m
Goal: 
[∀b m' x. 1 < b ∧ m' < m ∧ x < b ** m' ⇒ b ** m' + x < b ** m,
 m < SUC m, x < b ** m, 1 < b] |- ∃p. b ** m = p + x

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. m = n + (p + 1)
Goal: 
[∀b m' x. 1 < b ∧ m' < m ∧ x < b ** m' ⇒ b ** m' + x < b ** m,
 m < SUC m, x < b ** m, 1 < b, b ** m = p + x] |- ∃q. b = 1 + (q + 1)

Status: Unsatisfiable
Thm list: 
Goal:  [] |- (h = h') ⇔ (h' = h)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- 0 < 256
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 [] |- 0 < x ** y ⇔ 0 < x ∨ (y = 0)
Goal:  [256 ≤ n, n DIV 256 ** LOG 256 n = 1]
|- n =
   n DIV 256 ** LOG 256 n * 256 ** LOG 256 n + n MOD 256 ** LOG 256 n

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀l. (l = []) ∨ ∃t h. l = h::t
Goal:  [] |- (x = "") ∨ ∃c s. x = STRING c s

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
 [] |- ∀b l. 1 < b ⇒ l2n b l < b ** LENGTH l
 [] |- 1 < 256
Goal:  [LENGTH (MAP ORD (REVERSE s) ++ [ORD c]) = STRLEN s + 1]
|- l2n 256 (MAP ORD (REVERSE s) ++ [ORD c]) < 256 ** (STRLEN s + 1)

Status: Unsatisfiable
Info: num 
Thm list: 
 []
|- ∀n.
     (n = 1) ∨ 256 ≤ n ∧ (n DIV 256 ** LOG 256 n = 1) ⇒
     (string_to_num (num_to_string n) = n)
Goal:  [256 ≤ n, n DIV 256 ** LOG 256 n = 1] |- ∃x. n = string_to_num x

function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[¬P (FST h),
 OVERRIDE (FILTER (λy. FST h ≠ FST y) l) =
 FILTER (λy. FST h ≠ FST y) (OVERRIDE l),
 OVERRIDE (FILTER (λy. FST h ≠ FST y ∧ P (FST y)) l) =
 FILTER (λy. FST h ≠ FST y ∧ P (FST y)) (OVERRIDE l),
 MEM y (OVERRIDE l)] |- P (FST y) ⇔ P (FST y) ∧ FST h ≠ FST y
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal: 
[P (FST h),
 OVERRIDE (FILTER (λy. FST h ≠ FST y) l) =
 FILTER (λy. FST h ≠ FST y) (OVERRIDE l),
 OVERRIDE (FILTER (λy. FST h ≠ FST y ∧ P (FST y)) l) =
 FILTER (λy. FST h ≠ FST y ∧ P (FST y)) (OVERRIDE l),
 MEM y (OVERRIDE l)]
|- FST h ≠ FST y ∧ P (FST y) ⇔ P (FST y) ∧ FST h ≠ FST y
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀e l1 l2. MEM e (l1 ++ l2) ⇔ MEM e l1 ∨ MEM e l2
 [] |- ∀f l1 l2. MAP f (l1 ++ l2) = MAP f l1 ++ MAP f l2
Goal: 
[∀x. MEM x (MAP FST l1) ⇔ MEM x (MAP FST (M ++ N)),
 ∀l2' y.
   PERM l1 l2' ⇒ (FIND (λx. FST x = y) l1 = FIND (λx. FST x = y) l2'),
 ALL_DISTINCT (MAP FST l1), FST h ∉ set (MAP FST l1), l2 = M ++ h::N,
 PERM (MAP FST l1) (MAP FST (M ++ N)), PERM l1 (M ++ N)]
|- FST h ∉ set (MAP FST M)
function: raw_match_type message: different constructorsThm list: 
 []
|- ∀l1 l2 y.
     ALL_DISTINCT (MAP FST l1) ∧ PERM l1 l2 ⇒
     (FIND (λx. FST x = y) l1 = FIND (λx. FST x = y) l2)
 [] |- ∀l1 l2. PERM l1 l2 ⇔ PERM l2 l1
Goal:  [ALL_DISTINCT (MAP FST l2), PERM l1 l2]
|- (case FIND (λx. FST x = x') l1 of NONE => x x' | SOME (v1,e) => e) =
   case FIND (λx. FST x = x') l2 of NONE => x x' | SOME (v1,e) => e
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀R L. PERM L (QSORT R L)
 [] |- ∀f l1 l2. PERM l1 l2 ⇒ PERM (MAP f l1) (MAP f l2)
 [] |- ∀l1 l2. PERM l1 l2 ⇒ (ALL_DISTINCT l1 ⇔ ALL_DISTINCT l2)
Goal:  []
|- ∀l R. ALL_DISTINCT (MAP FST l) ⇒ ALL_DISTINCT (MAP FST (QSORT R l))

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀l. LIST_UPDATE l = LIST_UPDATE (OVERRIDE l)
 []
|- ∀l1 l2.
     ALL_DISTINCT (MAP FST l2) ∧ PERM l1 l2 ⇒
     (LIST_UPDATE l1 = LIST_UPDATE l2)
 [] |- ∀R L. PERM L (QSORT R L)
 [] |- ∀l. ALL_DISTINCT (MAP FST (OVERRIDE l))
 []
|- ∀l R. ALL_DISTINCT (MAP FST l) ⇒ ALL_DISTINCT (MAP FST (QSORT R l))
Goal:  [] |- ∀R l. LIST_UPDATE l = LIST_UPDATE (QSORT R (OVERRIDE l))

function: raw_match_type message: different constructorsThm list: 
 []
|- ∀f r x y.
     RRESTRICT (f |+ (x,y)) r =
     if y ∈ r then RRESTRICT f r |+ (x,y)
     else RRESTRICT (DRESTRICT f (λa. a ≠ x)) r
 [] |- $IN = (λx f. f x)
Goal:  []
|- ∀f P x y.
     RRESTRICT (f |+ (x,y)) P =
     if P y then RRESTRICT f P |+ (x,y)
     else RRESTRICT (DRESTRICT f (λa. a ≠ x)) P
function: raw_match_type message: different constructorsThm list: 
 []
|- ∀f x y.
     FRANGE (f |+ (x,y)) = y INSERT FRANGE (DRESTRICT f (λa. a ≠ x))
 [] |- FRANGE FEMPTY = ∅
Goal:  []
|- (FRANGE FEMPTY = ∅) ∧
   ∀f x y.
     FRANGE (f |+ (x,y)) = y INSERT FRANGE (DRESTRICT f (λa. a ≠ x))
Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- f o_f FEMPTY = FEMPTY
 [] |- f o_f fm |+ (k,v) = (f o_f fm \\ k) |+ (k,f v)
Goal:  []
|- (f o_f FEMPTY = FEMPTY) ∧
   (f o_f fm |+ (k,v) = (f o_f fm \\ k) |+ (k,f v))

function: raw_match_type message: different constructorsThm list: 
 [] |- ∀b x. BAG_VAL b x = b x
 [] |- ∀e b. BAG_INSERT e b = (λx. if x = e then b e + 1 else b x)
Goal:  [e ≠ x] |- BAG_INSERT e b x = b x
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀b x. BAG_VAL b x = b x
 [] |- ∀e b. BAG_INSERT e b = (λx. if x = e then b e + 1 else b x)
Goal:  [] |- BAG_INSERT e b e = b e + 1
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀x. ¬(x ⋲ {||})
 [] |- ∀b e1 e2. e1 ⋲ BAG_INSERT e2 b ⇔ (e1 = e2) ∨ e1 ⋲ b
Goal:  [] |- (∀x. x ⋲ {||} ⇔ F) ∧ ∀x y. x ⋲ BAG_INSERT y b ⇔ (x = y) ∨ x ⋲ b
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀b1 b2. b1 ≤ b2 ⇔ b1 < b2 ∨ (b1 = b2)
 [] |- ∀b1 b2. ¬(b1 < b2 ∧ b2 < b1)
Goal:  [] |- ∀b1 b2. b1 < b2 ⇔ b1 ≤ b2 ∧ ¬(b2 ≤ b1)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y s. x ∈ y INSERT s ⇔ (x = y) ∨ x ∈ s
Goal:  [x ∉ s]
|- (if x' ∈ x INSERT s then 1 else 0) =
   if x' = x then 1 else if x' ∈ s then 1 else 0
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y s. x ∈ y INSERT s ⇔ (x = y) ∨ x ∈ s
Goal:  [x ∈ s] |- (if x' ∈ x INSERT s then 1 else 0) = if x' ∈ s then 1 else 0
Status: Unsatisfiable
Thm list: 
 [] |- ∀c a b. c ≠ 0 ⇒ (a * c / (b * c) = a / b)
 [] |- ∀x y. x * y = y * x
Goal:  [] |- ∀c a b. c ≠ 0 ⇒ (c * a / (c * b) = a / b)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 [] |- ∀s. FINITE s ⇒ ∀t. t ⊆ s ⇒ FINITE t
 [] |- ∀s. s ⊆ 𝕌(:α)
Goal:  [FINITE 𝕌(:real)] |- FINITE (IMAGE $& 𝕌(:num))

Status: Unsatisfiable
Thm list: 
 [] |- ∀x y z. x ≠ 0 ⇒ ((y = z) ⇔ (x * y = x * z))
Goal:  [v ≠ 0, y ≠ v, y ≠ 0, y * v ≠ 0]
|- (x / y = u / v) ⇔ (y * v * (x / y) = y * v * (u / v))

Status: Unsatisfiable
Thm list: 
 [] |- ∀x y. y ≠ 0 ⇒ (y * (x / y) = x)
 [] |- ∀x y z. (x * y = x * z) ⇔ (x = 0) ∨ (y = z)
Goal:  [v ≠ 0] |- (x / v = u / v) ⇔ (x = u)

Status: Unsatisfiable
Thm list: 
 [] |- ∀x y. y ≠ 0 ⇒ (y * (x / y) = x)
 [] |- ∀x y z. (x * y = x * z) ⇔ (x = 0) ∨ (y = z)
Goal:  [y ≠ 0] |- (x / y = z) ⇔ (x = y * z)

Status: Unsatisfiable
Thm list: 
 [] |- (x / y = z) ⇔ if y = 0 then unint (x / y) = z else x = y * z
Goal:  [] |- (z = x / y) ⇔ if y = 0 then z = unint (x / y) else y * z = x

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  []
|- (∀n m. (&n = -&m) ⇔ (n = 0) ∧ (m = 0)) ⇒
   ((-&n = &m) ⇔ (n = 0) ∧ (m = 0)) ∧ ((&n = -&m) ⇔ (n = 0) ∧ (m = 0))

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀x y. x ≤ y ∧ y ≤ x ⇔ (x = y)
Goal:  [&n = -&m] |- &n ≤ -&m

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀x y z. x ≤ y ∧ y ≤ z ⇒ x ≤ z
 [] |- ∀m n. &m ≤ &n ⇔ m ≤ n
 [] |- ∀n. 0 ≤ n
Goal:  [&n = -&m, &n ≤ -&m] |- 0 ≤ -&m

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. &m ≤ &n ⇔ m ≤ n
 [] |- ∀x. 0 ≤ -x ⇔ x ≤ 0
Goal:  [&n = -&m, &n ≤ -&m, 0 ≤ -&m] |- m ≤ 0

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- y < &n ⇒ y < &n + 1
Goal:  [y < &n] |- y < &n + 1

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- y < &n ⇒ y < &n + 1
Goal:  [y < &n] |- y < &n + 1

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀x y z. x ≤ y ∧ y ≤ z ⇒ x ≤ z
Goal:  [y < &n' + 1 + 1, &x ≤ &n' + 1, 0 ≤ y] |- &n' + 1 ≤ y ⇒ &x ≤ y

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀x y z. x ≤ y ∧ y < z ⇒ x < z
Goal:  [x < &(n' + 2), x < &(y + 1), &(n' + 1) ≤ x] |- &(n' + 1) < &(y + 1)

Status: Unsatisfiable
Info: num 
Thm list: 
 [] |- ∀m n. ¬(m ≤ n) ⇔ n < m
Goal:  [x ≤ &n]
|- (∃n. x ≤ &n) ∧ ∀n'. (∀m. m < n' ⇒ ¬(x ≤ &m)) ∧ x ≤ &n' ⇒ n' ≤ n

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀x. (x = e) ∨ x ∈ s ⇒ 0 ≤ f x,
 ∀f.
   (∀x. x ∈ s ⇒ 0 ≤ f x) ∧ (∃x. x ∈ s ∧ f x ≠ 0) ⇒
   ((REAL_SUM_IMAGE f s = 0) ⇔ (s = ∅)), FINITE s, f e ≠ 0,
 s DELETE e = s] |- FINITE s ∧ ∀x. x ∈ s ⇒ 0 ≤ f x

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀x. (x = e) ∨ x ∈ s ⇒ 0 ≤ f x,
 ∀f.
   (∀x. x ∈ s ⇒ 0 ≤ f x) ∧ (∃x. x ∈ s ∧ f x ≠ 0) ⇒
   ((REAL_SUM_IMAGE f s = 0) ⇔ (s = ∅)), FINITE s, f e ≠ 0,
 s DELETE e = s, 0 ≤ f e + REAL_SUM_IMAGE f s]
|- FINITE s ∧ ∀x. x ∈ s ⇒ 0 ≤ f x

Status: Unsatisfiable
Info: polymorph higher-order 
Thm list: 
 [] |- ∀x. x ∉ ∅
Goal: 
[∀x. (x = e) ∨ x ∈ s ⇒ 0 ≤ f x,
 ∀f.
   (∀x. x ∈ s ⇒ 0 ≤ f x) ∧ (∃x. x ∈ s ∧ f x ≠ 0) ⇒
   ((REAL_SUM_IMAGE f s = 0) ⇔ (s = ∅)), FINITE s, f x ≠ 0,
 s DELETE e = s, f e = 0, x ∈ s] |- REAL_SUM_IMAGE f s ≠ 0

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀x. (x = e) ∨ x ∈ s ⇒ 0 ≤ f x,
 ∀f.
   (∀x. x ∈ s ⇒ 0 ≤ f x) ∧ (∃x. x ∈ s ∧ f x ≠ 0) ⇒
   ((REAL_SUM_IMAGE f s = 0) ⇔ (s = ∅)), FINITE s, f e ≠ 0, f x ≠ 0,
 s DELETE e = s, x ∈ s] |- FINITE s ∧ ∀x. x ∈ s ⇒ 0 ≤ f x

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀x. (x = e) ∨ x ∈ s ⇒ 0 ≤ f x,
 ∀f.
   (∀x. x ∈ s ⇒ 0 ≤ f x) ∧ (∃x. x ∈ s ∧ f x ≠ 0) ⇒
   ((REAL_SUM_IMAGE f s = 0) ⇔ (s = ∅)), FINITE s, f e ≠ 0, f x ≠ 0,
 s DELETE e = s, x ∈ s, 0 ≤ f e + REAL_SUM_IMAGE f s]
|- FINITE s ∧ ∀x. x ∈ s ⇒ 0 ≤ f x

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP.
        ∀f.
          (∀x. x ∈ P ⇒ 0 ≤ f x) ∧ (∃x. x ∈ P ∧ f x ≠ 0) ⇒
          (REAL_SUM_IMAGE f P ≠ 0 ⇔ P ≠ ∅)) P
Goal:  []
|- ∀P.
     FINITE P ⇒
     ∀f.
       (∀x. x ∈ P ⇒ 0 ≤ f x) ∧ (∃x. x ∈ P ∧ f x ≠ 0) ⇒
       (REAL_SUM_IMAGE f P ≠ 0 ⇔ P ≠ ∅)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y s. x ∈ y INSERT s ⇔ (x = y) ∨ x ∈ s
Goal: 
[∀q. q ∈ e INSERT x INSERT t ⇒ (f x = f q), FINITE (x INSERT t),
 e ∉ x INSERT t, x ∉ t, p ∈ e INSERT x INSERT t]
|- x ∈ x INSERT t ∧ ∀q. q ∈ x INSERT t ⇒ (f x = f q)
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP.
        ∀f.
          REAL_SUM_IMAGE f P =
          REAL_SUM_IMAGE (λx. if x ∈ P then f x else 0) P) P
Goal:  []
|- ∀P.
     FINITE P ⇒
     ∀f.
       REAL_SUM_IMAGE f P =
       REAL_SUM_IMAGE (λx. if x ∈ P then f x else 0) P

Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal: 
[∀f'.
   INJ f' P (IMAGE f' P) ⇒
   ∀f. REAL_SUM_IMAGE f (IMAGE f' P) = REAL_SUM_IMAGE (f o f') P,
 FINITE P, e ∉ P, INJ f' (e INSERT P) (f' e INSERT IMAGE f' P)]
|- (∃x'. (x = f' x') ∧ x' ∈ P) ∧ x ≠ f' e ⇒ ∃x'. (x = f' x') ∧ x' ∈ P

Status: Unsatisfiable
Thm list: 
Goal: 
[∀f'.
   INJ f' P (IMAGE f' P) ⇒
   ∀f. REAL_SUM_IMAGE f (IMAGE f' P) = REAL_SUM_IMAGE (f o f') P,
 FINITE P, e ∉ P]
|- (∀x.
      (x = e) ∨ x ∈ P ⇒ (f' x = f' e) ∨ ∃x'. (f' x = f' x') ∧ x' ∈ P) ∧
   (∀x y.
      ((x = e) ∨ x ∈ P) ∧ ((y = e) ∨ y ∈ P) ⇒ (f' x = f' y) ⇒ (x = y)) ⇒
   (∃x'. (x = f' x') ∧ x' ∈ P) ⇒
   x ≠ f' e

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x s. x ∉ s ⇔ (s DELETE x = s)
Goal: 
[∀f'.
   INJ f' P (IMAGE f' P) ⇒
   ∀f. REAL_SUM_IMAGE f (IMAGE f' P) = REAL_SUM_IMAGE (f o f') P,
 FINITE P, e ∉ P, IMAGE f' P DELETE f' e = IMAGE f' P,
 INJ f' (e INSERT P) (f' e INSERT IMAGE f' P)] |- P DELETE e = P
Status: Unsatisfiable
Info: higher-order 
Thm list: 
Goal:  [FINITE P, e ∉ P, P DELETE e = P, IMAGE f' P DELETE f' e = IMAGE f' P]
|- (∀x.
      (x = e) ∨ x ∈ P ⇒ (f' x = f' e) ∨ ∃x'. (f' x = f' x') ∧ x' ∈ P) ∧
   (∀x y.
      ((x = e) ∨ x ∈ P) ∧ ((y = e) ∨ y ∈ P) ⇒ (f' x = f' y) ⇒ (x = y)) ⇒
   ∀x y. x ∈ P ∧ y ∈ P ⇒ (f' x = f' y) ⇒ (x = y)

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP.
        ∀P'.
          FINITE P' ⇒
          (λP'.
             DISJOINT P P' ⇒
             ∀f.
               REAL_SUM_IMAGE f (P ∪ P') =
               REAL_SUM_IMAGE f P + REAL_SUM_IMAGE f P') P') P
Goal:  []
|- ∀P P'.
     FINITE P ∧ FINITE P' ∧ DISJOINT P P' ⇒
     ∀f.
       REAL_SUM_IMAGE f (P ∪ P') =
       REAL_SUM_IMAGE f P + REAL_SUM_IMAGE f P'

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀P.
     FINITE P ⇒
     ∀f.
       REAL_SUM_IMAGE f P =
       REAL_SUM_IMAGE (λx. if x ∈ P then f x else 0) P
Goal: 
[∀x. CARD (x INSERT s) = if x ∈ s then CARD s else CARD s + 1, FINITE s,
 s DELETE e = s]
|- REAL_SUM_IMAGE (λx. if (x = e) ∨ x ∈ s then 1 else 0) s =
   REAL_SUM_IMAGE
     (λx. if x ∈ s then (λx. if (x = e) ∨ x ∈ s then 1 else 0) x else 0)
     s
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP. REAL_SUM_IMAGE (λx. if x ∈ P then 1 else 0) P = &CARD P) P
Goal:  []
|- ∀P.
     FINITE P ⇒
     (REAL_SUM_IMAGE (λx. if x ∈ P then 1 else 0) P = &CARD P)

function: raw_match_type message: different tyopsThm list: 
 [] |- ∀s. FINITE s ⇒ ((CARD s = 0) ⇔ (s = ∅))
Goal:  [FINITE P, P ≠ ∅] |- CARD P ≠ 0
Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP. ∀f. REAL_SUM_IMAGE f (P ∩ (λp. f p ≠ 0)) = REAL_SUM_IMAGE f P)
       P
Goal:  []
|- ∀P.
     FINITE P ⇒
     ∀f. REAL_SUM_IMAGE f (P ∩ (λp. f p ≠ 0)) = REAL_SUM_IMAGE f P

Status: Unsatisfiable
Info: polymorph 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     (λP.
        ∀f P'.
          (∀x. x ∉ P' ⇒ (f x = 0)) ⇒
          (REAL_SUM_IMAGE f (P ∩ P') = REAL_SUM_IMAGE f P)) P
Goal:  []
|- ∀P.
     FINITE P ⇒
     ∀f P'.
       (∀x. x ∉ P' ⇒ (f x = 0)) ⇒
       (REAL_SUM_IMAGE f (P ∩ P') = REAL_SUM_IMAGE f P)

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
 [] |- ∀n. n ≠ 0 ⇒ 0 < &n
 [] |- ∀x y z. 0 < z ⇒ ((x * z = y) ⇔ (x = y / z))
 [] |- ∀x. inv x = 1 / x
 [] |- ∀n. 0 ≠ SUC n
Goal:  [] |- (f e * &SUC (CARD s) = 1) ⇒ (f e = inv (&SUC (CARD s)))

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
Goal: 
[∀x y. ((x = e) ∨ x ∈ s) ∧ ((y = e) ∨ y ∈ s) ⇒ (f x = f y),
 ∀f.
   (REAL_SUM_IMAGE f s = 1) ∧ (∀x y. x ∈ s ∧ y ∈ s ⇒ (f x = f y)) ⇒
   ∀x. x ∈ s ⇒ (f x = inv (&CARD s)), FINITE s, e ∉ s, x ∈ s]
|- f x = f e

Status: Unsatisfiable
Info: higher-order num 
Thm list: 
 [] |- ∀n. n ≠ 0 ⇒ 0 < &n
 [] |- ∀x y z. 0 < z ⇒ ((x * z = y) ⇔ (x = y / z))
 [] |- ∀x. inv x = 1 / x
 [] |- ∀n. 0 ≠ SUC n
Goal:  [] |- (f e * &SUC (CARD s) = 1) ⇒ (f e = inv (&SUC (CARD s)))

Status: Unsatisfiable
Info: higher-order lambda-lift 
Thm list: 
Goal: 
[∀s' f.
   FINITE s' ⇒
   (REAL_SUM_IMAGE (λx. REAL_SUM_IMAGE (f x) s') s =
    REAL_SUM_IMAGE (λx. f (FST x) (SND x)) (s × s')), FINITE s,
 FINITE s', e ∉ s]
|- ((q = e) ∨ q ∈ s) ∧ r ∈ s' ⇔ (q = e) ∧ r ∈ s' ∨ q ∈ s ∧ r ∈ s'

Status: Unsatisfiable
Info: higher-order lambda-lift 
Thm list: 
Goal: 
[∀s' f.
   FINITE s' ⇒
   (REAL_SUM_IMAGE (λx. REAL_SUM_IMAGE (f x) s') s =
    REAL_SUM_IMAGE (λx. f (FST x) (SND x)) (s × s')), FINITE s,
 FINITE s', e ∉ s] |- (q ≠ e ∨ r ∉ s') ∨ q ∉ s ∨ r ∉ s'

Status: Unsatisfiable
Info: higher-order lambda-lift 
Thm list: 
Goal: 
[∀s' f.
   FINITE s' ⇒
   (REAL_SUM_IMAGE (λx. REAL_SUM_IMAGE (f x) s') s =
    REAL_SUM_IMAGE (λx. f (FST x) (SND x)) (s × s')),
 ∀f.
   REAL_SUM_IMAGE f (IMAGE (λx. (e,x)) s') =
   REAL_SUM_IMAGE (λx. f (e,x)) s', FINITE s, FINITE s', s DELETE e = s,
 DISJOINT (IMAGE (λx. (e,x)) s') (s × s')]
|- REAL_SUM_IMAGE (f e) s' +
   REAL_SUM_IMAGE (λx. f (FST x) (SND x)) (s × s') =
   REAL_SUM_IMAGE (λx. f e x) s' +
   REAL_SUM_IMAGE (λx. f (FST x) (SND x)) (s × s')

Status: Unsatisfiable
Thm list: 
Goal:  [FINITE s, FINITE s', FINITE (s × s'), x ∈ s × s']
|- ∃x'. ((SND x = SND x') ∧ (FST x = FST x')) ∧ x' ∈ s × s'

function: raw_match_type message: different constructorsThm list: 
 [] |- ∀x. (FST x,SND x) = x
 [] |- ((x,y) = (a,b)) ⇔ (x = a) ∧ (y = b)
Goal: 
[FINITE s, FINITE s', FINITE (s × s'), FST x = FST x', SND x = SND x',
 x ∈ s × s', x' ∈ s × s'] |- x = x'
Status: Unsatisfiable
Info: polymorph higher-order lambda-lift 
Thm list: 
 []
|- ∀P.
     FINITE P ⇒
     ∀f'.
       INJ f' P (IMAGE f' P) ⇒
       ∀f. REAL_SUM_IMAGE f (IMAGE f' P) = REAL_SUM_IMAGE (f o f') P
Goal: 
[FINITE s, FINITE s', FINITE (s × s'),
 INJ (λx. (SND x,FST x)) (s × s') (IMAGE (λx. (SND x,FST x)) (s × s'))]
|- REAL_SUM_IMAGE (λx. f (SND x) (FST x))
     (IMAGE (λx. (SND x,FST x)) (s × s')) =
   REAL_SUM_IMAGE ((λx. f (SND x) (FST x)) o (λx. (SND x,FST x)))
     (s × s')

Status: Unsatisfiable
Thm list: 
Goal: 
[∀x. x ∈ t ⇒ 0 ≤ f x, FINITE s, FINITE t, FINITE (t DIFF s),
 t = s ∪ (t DIFF s), s ⊆ t] |- x ∉ s ∨ x ∉ t ∨ x ∈ s

function: raw_match_type message: different tyopsThm list: 
 []
|- ∀P P'.
     FINITE P ∧ FINITE P' ∧ DISJOINT P P' ⇒
     ∀f.
       REAL_SUM_IMAGE f (P ∪ P') =
       REAL_SUM_IMAGE f P + REAL_SUM_IMAGE f P'
Goal: 
[∀x. x ∈ t ⇒ 0 ≤ f x, FINITE s, FINITE t, FINITE (t DIFF s),
 t = s ∪ (t DIFF s), DISJOINT s (t DIFF s), s ⊆ t]
|- REAL_SUM_IMAGE f t = REAL_SUM_IMAGE f s + REAL_SUM_IMAGE f (t DIFF s)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀f s. FINITE s ∧ (∀x. x ∈ s ⇒ 0 ≤ f x) ⇒ 0 ≤ REAL_SUM_IMAGE f s
 [] |- ∀s t x. x ∈ s DIFF t ⇔ x ∈ s ∧ x ∉ t
Goal: 
[∀x. x ∈ t ⇒ 0 ≤ f x, FINITE s, FINITE t, FINITE (t DIFF s),
 t = s ∪ (t DIFF s), DISJOINT s (t DIFF s), s ⊆ t]
|- 0 ≤ REAL_SUM_IMAGE f (t DIFF s)
function: raw_match_type message: different tyopsThm list: 
 [] |- ∀x y. FST (x,y) = x
 [] |- ∀x y. SND (x,y) = y
 [] |- ∀x. (FST x,SND x) = x
Goal:  [FINITE s1, FINITE s2]
|- FST x ∈ s2 ∧ SND x ∈ s1 ⇔
   ∃a. (x = (SND a,FST a)) ∧ FST a ∈ s1 ∧ SND a ∈ s2
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀x y. FST (x,y) = x
 [] |- ∀x y. SND (x,y) = y
 [] |- ∀x. (FST x,SND x) = x
Goal: 
[FINITE s1, FINITE s2, FST a = FST a', SND a = SND a', FST a ∈ s1,
 FST a' ∈ s1, SND a ∈ s2, SND a' ∈ s2] |- a = a'
function: raw_match_type message: different constructorsThm list: 
 [] |- ∀x y. FST (x,y) = x
 [] |- ∀x y. SND (x,y) = y
 [] |- ∀x. (FST x,SND x) = x
Goal:  [FINITE s1, FINITE s2, FST a ∈ s1, SND a ∈ s2]
|- ∃a'.
     ((SND a = SND a') ∧ (FST a = FST a')) ∧ FST a' ∈ s1 ∧ SND a' ∈ s2
Status: Unsatisfiable
Thm list: 
 [] |- ∀v z w. v ≠ 0 ⇒ (z * v / (w * v) = z / w)
 [] |- ∀z w. z * w = w * z
Goal:  [] |- ∀v z w. v ≠ 0 ⇒ (v * z / (v * w) = z / w)

Status: Unsatisfiable
Info: num 
Thm list: 
Goal:  [a ' i ⇎ b ' i, i < dimindex (:α)]
|- ∃i'. i' < dimindex (:α) ∧ (a ' i' ⇎ b ' i')

function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal:  [¬∃x. f x ≠ g x] |- (f = g) ∨ f (@i. f i ≠ g i) ≠ g (@i. f i ≠ g i)
function: GEN_ABS message: variable(s) free in the assumptionsThm list: 
Goal:  [∃x. f x ≠ g x] |- (f = g) ∨ f (@i. f i ≠ g i) ≠ g (@i. f i ≠ g i)
