Number: 2
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀P l. LENGTH (SND (SPLITP P l)) ≤ LENGTH l
 [] |- a ≤ b ⇒ a < SUC b
Goal:  [P h] |- (l ≠ "" ∨ r ≠ STRING h t) ∨ (l = "")

Number: 4
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀cs. ∃s. cs = EXPLODE s

Number: 5
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- ∀s. ∃cs. s = IMPLODE cs

Number: 6
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (EXPLODE s1 = EXPLODE s2) ⇔ (s1 = s2)

Number: 7
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- EXPLODE (IMPLODE cs) = cs
 [] |- IMPLODE (EXPLODE s) = s
Goal:  [] |- (IMPLODE cs1 = IMPLODE cs2) ⇔ (cs1 = cs2)

Number: 8
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ¬(ORD h'' < ORD h'),
 ORD h = ORD h', ORD h'' = ORD h, s1 < t, t < t'] |- s1 < t'

Number: 9
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h ⇒ m < ORD h',
 ∀p. ORD h' < p ⇒ ORD h < p, ¬(ORD h'' < ORD h'), ORD h < ORD h',
 ORD h'' = ORD h, s1 < t] |- s1 < t'

Number: 10
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[∀s2 s3. s1 < s2 ∧ s2 < s3 ⇒ s1 < s3, ∀m. m < ORD h'' ⇒ m < ORD h,
 ∀p. ORD h < p ⇒ ORD h'' < p, ¬(ORD h'' < ORD h'), ORD h'' < ORD h,
 ORD h = ORD h', t < t'] |- s1 < t'

Number: 11
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- 0 < 256
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 [] |- ∀m n. m + n = n + m
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m),
 Abbrev (s0 = n2s ((n − n MOD 256) DIV 256)), n ≠ 0, n MOD 256 ≠ 0,
 0 < n MOD 256, (n − n MOD 256) DIV 256 < n,
 s2n s0 = (n − n MOD 256) DIV 256]
|- (n = n MOD 256 + n DIV 256 * 256) ∨ n ≤ n MOD 256 ∧ (n DIV 256 = 0)

Number: 12
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- 0 < 256
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 [] |- ∀m n. m * n = n * m
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m),
 Abbrev (s0 = n2s ((n − n MOD 256) DIV 256)), n ≠ 0, n MOD 256 ≠ 0,
 0 < n MOD 256, (n − n MOD 256) DIV 256 < n,
 s2n s0 = (n − n MOD 256) DIV 256, (n − n MOD 256) DIV 256 = n DIV 256]
|- 256 * (n DIV 256) + n MOD 256 = n

Number: 13
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 []
|- (0 + m = m) ∧ (m + 0 = m) ∧ (SUC m + n = SUC (m + n)) ∧
   (m + SUC n = SUC (m + n))
 [] |- 0 < 256
Goal: 
[∀m. m < n ⇒ (s2n (n2s m) = m), Abbrev (s0 = n2s ((n − r) DIV 256)),
 Abbrev (r = if r0 = 0 then 256 else r0), Abbrev (r0 = n MOD 256),
 n ≠ 0, 0 < r, (n − r) DIV 256 < n, n MOD 256 < 256, r0 = 0,
 s2n s0 = (n − r) DIV 256] |- ∃q. n = q * 256

Number: 15
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
 []
|- (0 + m = m) ∧ (m + 0 = m) ∧ (SUC m + n = SUC (m + n)) ∧
   (m + SUC n = SUC (m + n))
 [] |- 0 < 256
Goal: 
[Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = if r0 = 0 then 256 else r0), ORD c < 256, n2s (s2n s) = s,
 r0 = 0, r0 = (ORD c + 1) MOD 256] |- ∃q. ORD c + 1 = q * 256

Number: 16
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀a. CHR (ORD a) = a
Goal: 
[T, Abbrev (s0 = n2s ((s2n s * 256 + ORD c + 1 − r) DIV 256)),
 Abbrev (r = 256), ORD c < 256, n2s (s2n s) = s, q = 1, r0 = 0,
 ORD c = 255, ORD c + 1 = 256] |- c = #"\255"

Number: 19
Status: Unsatisfiable
Info: proof 
Thm list: 
 [] |- n2s (s2n s) = s
Goal:  [] |- (s2n x = s2n y) ⇔ (x = y)

Number: 21
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀n. s2n (n2s n) = n
Goal:  [] |- ∀n. ∃s. n = s2n s

Number: 22
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [(ALOOKUP l q = NONE) ⇔ ∀k v. MEM (k,v) l ⇒ k ≠ q]
|- ∃v. (v = r) ∨ MEM (q,v) l

Number: 23
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [] |- (y = fm ' x) ∧ x ∈ FDOM fm ⇔ x ∈ FDOM fm ∧ (fm ' x = y)

Number: 24
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal: 
[∀l1 l2.
   (alist_to_fmap l1 = alist_to_fmap l2) ⇒
   (alist_to_fmap (ls ++ l1) = alist_to_fmap (ls ++ l2)),
 alist_to_fmap l1 = alist_to_fmap l2]
|- alist_to_fmap (ls ++ l1) |+ (q,r) = alist_to_fmap (ls ++ l2) |+ (q,r)

Number: 31
Status: Unsatisfiable
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM f,
 x ∈ FDOM g] |- ∃a. g ' x [] = SOME a

Number: 32
Status: Unsatisfiable
Info: polymorph higher-order proof 
Thm list: 
 [] |- wf f ⇒ ∃a. f [] = SOME a
Goal: 
[∀k. k ∈ FDOM f ⇒ wf (f ' k), ∀k. k ∈ FDOM g ⇒ wf (g ' k), x ∉ FDOM g,
 x ∈ FDOM f] |- ∃a. f ' x [] = SOME a

Number: 40
Status: Unsatisfiable
Info: lambda-lift bool higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ FINITE {p | ∃ft'. apply_path p (fm ' k) = SOME ft'}]
|- (∃h t ft'.
      (x = h::t) ∧ (apply_path t (fm ' h) = SOME ft') ∧ h ∈ FDOM fm) ⇔
   ∃k x' ft'.
     ((x = k::x') ∧ (apply_path x' (fm ' k) = SOME ft')) ∧ k ∈ FDOM fm

Number: 41
Status: Unsatisfiable
Info: higher-order proof 
Thm list: 
Goal:  [∀k. k ∈ FDOM fm ⇒ ∃r. relrec h (fm ' k) r]
|- ∃f. ∀k. k ∈ FDOM fm ⇒ relrec h (fm ' k) (f k)

Number: 45
Status: Unsatisfiable
Info: bool num higher-order proof 
Thm list: 
Goal: 
[Abbrev (m1 = LENGTH (FILTER ($= x) l1)),
 Abbrev (m2 = LENGTH (FILTER ($= x) l2)), x' < m1,
 x = EL x' (FILTER ($= x) l1), x = EL x' (FILTER ($= x) l2), m1 ≥ m2,
 m2 ≥ m1, MEM (EL x' (FILTER ($= x) l1)) l1,
 MEM (EL x' (FILTER ($= x) l2)) l2]
|- EL x' (FILTER ($= x) l1) = EL x' (FILTER ($= x) l2)

Number: 46
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  []
|- ∀x'.
     x' ∈ FDOM b ∧ (x = f x' (b ' x')) ⇔
     (x' ∈ FDOM b ∧ (x = f x' (b ' x'))) ∧ x' ∈ FDOM b

Number: 47
Status: Unsatisfiable
Info: polymorph bool proof 
Thm list: 
 [] |- dimindex (:α) = if FINITE 𝕌(:α) then CARD 𝕌(:α) else 1
Goal:  [] |- INFINITE 𝕌(:α) ⇒ (dimindex (:α) = 1)

Number: 50
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE 𝕌(:α), FINITE 𝕌(:β), ¬(FINITE ISL ∧ FINITE ISR)]
|- 1 = CARD 𝕌(:α) + CARD 𝕌(:β)

Number: 51
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (FINITE ISL ⇔ FINITE 𝕌(:α)) ∧ (FINITE ISR ⇔ FINITE 𝕌(:β))
Goal:  [FINITE ISL, FINITE ISR, ¬(FINITE 𝕌(:α) ∧ FINITE 𝕌(:β))]
|- CARD (ISL ∪ ISR) = 1

Number: 52
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0B a) ∨ IS_BIT0B (BIT0B a)

Number: 53
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- (∀x. IS_BIT0A (BIT0A x) ⇔ T) ∧ ∀x. IS_BIT0A (BIT0B x) ⇔ F
 [] |- (∀x. IS_BIT0B (BIT0A x) ⇔ F) ∧ ∀x. IS_BIT0B (BIT0B x) ⇔ T
Goal:  [] |- IS_BIT0A (BIT0A a) ∨ IS_BIT0B (BIT0A a)

Number: 54
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT0A y = BIT0A a

Number: 55
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT0B y = BIT0B a

Number: 58
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), ¬(FINITE IS_BIT0A ∧ FINITE IS_BIT0B)] |- F

Number: 59
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT0A, FINITE IS_BIT0B, INFINITE 𝕌(:α)]
|- CARD (IS_BIT0A ∪ IS_BIT0B) = 1

Number: 60
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT0A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0A = CARD 𝕌(:α))
 [] |- FINITE IS_BIT0B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT0B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT0A, FINITE IS_BIT0B]
|- CARD IS_BIT0A + CARD IS_BIT0B = 2 * CARD 𝕌(:α)

Number: 61
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A BIT1C ∨ IS_BIT1B BIT1C ∨ IS_BIT1C BIT1C

Number: 62
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1B a) ∨ IS_BIT1B (BIT1B a) ∨ IS_BIT1C (BIT1B a)

Number: 63
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- (∀x. IS_BIT1A (BIT1A x) ⇔ T) ∧ (∀x. IS_BIT1A (BIT1B x) ⇔ F) ∧
   (IS_BIT1A BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1B (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1B (BIT1B x) ⇔ T) ∧
   (IS_BIT1B BIT1C ⇔ F)
 []
|- (∀x. IS_BIT1C (BIT1A x) ⇔ F) ∧ (∀x. IS_BIT1C (BIT1B x) ⇔ F) ∧
   (IS_BIT1C BIT1C ⇔ T)
Goal:  [] |- IS_BIT1A (BIT1A a) ∨ IS_BIT1B (BIT1A a) ∨ IS_BIT1C (BIT1A a)

Number: 64
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀x. IS_BIT1A x ∨ IS_BIT1B x ∨ IS_BIT1C x
Goal:  [] |- (IS_BIT1A x ∨ IS_BIT1B x) ∨ IS_BIT1C x

Number: 65
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT1A y = BIT1A a

Number: 66
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [T] |- ∃y. BIT1B y = BIT1B a

Number: 71
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal: 
[FINITE 𝕌(:α), ¬((FINITE IS_BIT1A ∧ FINITE IS_BIT1B) ∧ FINITE IS_BIT1C)]
|- 1 = 2 * CARD 𝕌(:α) + 1

Number: 72
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C, INFINITE 𝕌(:α)]
|- CARD (IS_BIT1A ∪ IS_BIT1B ∪ IS_BIT1C) = 1

Number: 73
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- FINITE IS_BIT1A ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1A = CARD 𝕌(:α))
 [] |- (CARD IS_BIT1C = 1) ∧ FINITE IS_BIT1C
 [] |- FINITE IS_BIT1B ⇔ FINITE 𝕌(:α)
 [] |- FINITE 𝕌(:α) ⇒ (CARD IS_BIT1B = CARD 𝕌(:α))
 [] |- ∀n. 2 * n = n + n
Goal:  [FINITE 𝕌(:α), FINITE IS_BIT1A, FINITE IS_BIT1B, FINITE IS_BIT1C]
|- CARD IS_BIT1A + CARD IS_BIT1B = 2 * CARD 𝕌(:α)

Number: 76
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- dimword (:α) = 2 ** dimindex (:α)
 [] |- 0 < dimindex (:α)
 [] |- (∀m. m ** 0 = 1) ∧ ∀m n. m ** SUC n = m * m ** n
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m < b ** n ⇔ m < n
 [] |- 1 < 2
Goal:  [] |- 1 < dimword (:α)

Number: 79
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- dimindex (:α) < dimword (:α)
 [] |- 0 < dimindex (:α)
Goal:  [] |- ∀n. n MOD dimindex (:α) < dimword (:α)

Number: 80
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal: 
[P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n)),
 n < dimword (:α) ⇒ P (n2w n)] |- SUC n < dimword (:α) ⇒ P (n2w (SUC n))

Number: 81
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- SUC n < m ⇒ n < m
Goal:  [P 0w, ∀n. SUC n < dimword (:α) ⇒ P (n2w n) ⇒ P (n2w (SUC n))]
|- 0 < dimword (:α) ⇒ P 0w

Number: 82
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n. 0 < n ⇒ ∀k. (k = k DIV n * n + k MOD n) ∧ k MOD n < n
Goal:  [Abbrev (WL = dimword (:α)), 0 < WL, WL = 2 * INT_MIN (:α)]
|- (n = n DIV WL * WL + n MOD WL) ∧ n MOD WL < WL

Number: 83
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀n r. r < n ⇒ ∀q. (q * n + r) DIV n = q
 [] |- ∀m n. m * n = n * m
 [] |- ∀m n p. m * (n * p) = m * n * p
Goal: 
[Abbrev (q = (q * (2 * INT_MIN (:α)) + r) DIV (2 * INT_MIN (:α))),
 Abbrev (r = (q * (2 * INT_MIN (:α)) + r) MOD (2 * INT_MIN (:α))),
 Abbrev (2 * INT_MIN (:α) = dimword (:α)), ¬(INT_MIN (:α) ≤ r),
 r < INT_MIN (:α), r < 2 * INT_MIN (:α), 0 < 2 * INT_MIN (:α),
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- (q * (2 * INT_MIN (:α)) + r) DIV INT_MIN (:α) = 2 * q

Number: 84
Status: Unsatisfiable
Info: polymorph bool num proof 
Thm list: 
 [] |- 0 ≠ 1 ∧ 0 < 2
 [] |- ∀n. 0 < n ⇒ ∀k. (k * n) MOD n = 0
 [] |- ∀m n. m * n = n * m
 [] |- INT_MIN (:α) = 2 ** (dimindex (:α) − 1)
Goal: 
[Abbrev (WL = dimword (:α)), Abbrev (q = n DIV WL),
 Abbrev (r = n MOD WL), ¬(INT_MIN (:α) ≤ r), r < WL, r < INT_MIN (:α),
 0 < WL, WL = 2 * INT_MIN (:α), n = q * WL + r,
 n DIV INT_MIN (:α) = 2 * q,
 ((q * (2 * INT_MIN (:α)) + r) DIV 2 ** (dimindex (:α) − 1)) MOD 2 = 1]
|- F

Number: 86
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- ∀w.
     ¬(dimindex (:β) < dimindex (:α) ∧ dimindex (:β) < dimindex (:γ)) ⇒
     (sw2sw (sw2sw w) = sw2sw w)
Goal:  [¬(dimindex (:β) < dimindex (:α) ∧ dimindex (:β) < dimindex (:γ))]
|- sw2sw (sw2sw w) = sw2sw w

Number: 87
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. n < m ⇒ ∃p. m = n + (p + 1)
 [] |- ∀m. SUC m = m + 1
 [] |- (∀n. 0 + n = n) ∧ ∀m n. SUC m + n = SUC (m + n)
Goal: 
[T, i < dimindex (:α), 0 < dimindex (:α) − l, l ≤ dimindex (:α) − 1,
 dimindex (:α) ≤ SUC h] |- ∃x. dimindex (:α) − l = SUC x

Number: 88
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[T, i < dimindex (:α), SUC x ≤ i, dimindex (:α) ≤ SUC h,
 dimindex (:α) ≤ i + (l + 1), l + x = dimindex (:α) − 1,
 dimindex (:α) − l = SUC x] |- BIT (dimindex (:α) − 1) n ⇔ BIT (l + x) n

Number: 89
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[T, i < SUC x, dimindex (:α) ≤ SUC h, dimindex (:α) ≤ i + (l + 1),
 i + l = dimindex (:α) − 1, dimindex (:α) − l = SUC x]
|- BIT (dimindex (:α) − 1) n ⇔ BIT (i + l) n

Number: 90
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[i < SUC (h − l), i < dimindex (:α), SUC h < dimindex (:α), h ≤ i + l,
 l ≤ h, i + l = h] |- BIT h n ⇔ BIT (i + l) n

Number: 91
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w. w2n (w2w w) ≤ w2n w
 [] |- ∀w. w2n w < dimword (:α)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal:  [] |- ∀w. w2n (w2w w) < dimword (:α)

Number: 92
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀b. 1 < b ⇒ ∀n m. b ** m ≤ b ** n ⇔ m ≤ n
 [] |- 1 < 2
 [] |- ∀n. (1 ** n = 1) ∧ (n ** 1 = n)
 [] |- 1 ≤ dimindex (:α)
Goal:  [] |- 2 ≤ 2 ** dimindex (:α)

Number: 93
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w. w2n (w2w w) < dimword (:α)
 [] |- ∀w. w2n (w2w w) ≤ w2n w
 [] |- ∀h l w. w2n ((h -- l) w) < 2 ** (SUC h − l)
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
Goal:  [] |- w2n (w2w ((h -- l) w)) < 2 ** (SUC h − l)

Number: 95
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- i + (l + n) ≤ h + n ⇔ i + l ≤ h
Goal: 
[i < dimindex (:α), i < dimindex (:β), i < dimindex (:γ),
 i + l < dimindex (:β), i + l < dimindex (:γ),
 i + (l + n) < dimindex (:γ)]
|- i + l ≤ h ∧ i + (l + n) ≤ m ∧ w ' (i + (l + n)) ⇔
   (i + (l + n) ≤ m ∧ i + (l + n) ≤ h + n) ∧ w ' (i + (l + n))

Number: 96
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀n. n ≠ 0 ⇔ 0 < n
Goal: 
[FINITE 𝕌(:β), FINITE 𝕌(:γ), i < dimindex (:α), i < dimindex (:δ),
 dimindex (:γ) ≤ i, m + 1 ≤ l, h = m + dimindex (:β), dimindex (:γ) = 0,
 h + 1 = l + dimindex (:δ)]
|- i + (m + 1) ≤ dimindex (:α) − 1 ∧ w ' (i + (m + 1)) ⇔
   i + l ≤ dimindex (:α) − 1 ∧ w ' (i + l)

Number: 97
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀m n. n ≤ m ⇒ ∃p. p + n = m
 [] |- ∀m n. m + n = n + m
Goal:  [Abbrev (A = dimindex (:α)), ¬(i < A), i < dimindex (:β), 0 < A]
|- ∃x. i = x + A

Number: 98
Status: Unsatisfiable
Info: num proof 
Thm list: 
 []
|- ∀a b n. n ≠ 0 ∧ 2 ** a ≤ n ∧ n < 2 ** b ⇒ ∃i. a ≤ i ∧ i < b ∧ BIT i n
Goal: 
[∀m. m < n' ⇒ ¬BIT (dimindex (:α) − (m + 1)) n, n ≠ 0,
 n MOD 2 ** dimindex (:α) ≠ 0, n < 2 ** dimindex (:α),
 2 ** SUC (dimindex (:α) − (n' + 1)) ≤ n,
 BIT (dimindex (:α) − (n' + 1)) n]
|- ∃i. SUC (dimindex (:α) − (n' + 1)) ≤ i ∧ i < dimindex (:α) ∧ BIT i n

Number: 100
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀n i. i < dimindex (:α) ⇒ (n2w n ' i ⇔ BIT i n)
Goal:  [n ≠ 0, i < dimindex (:α), n < 2 ** dimindex (:α), BIT i n]
|- ∃n'. n2w n ' n'

Number: 101
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ UINT_MAXw, i ≠ n, ¬w ' i, i < n, i < dimindex (:α),
 n < i + (1 + n), 0 < n, 0 < 1 + n, dimindex (:α) = SUC n, w ' n,
 w ' (n − SUC (n − i − 1))] |- F

Number: 102
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- 0 < n ∧ i < n ⇒ (n − SUC (n − i − 1) = i)
Goal: 
[T, w ≠ 0w, i ≠ n, ¬w ' n, ¬w ' (n − SUC (n − i − 1)), i < n,
 i < dimindex (:α), n < i + (1 + n), 0 < n, 0 < 1 + n,
 dimindex (:α) = SUC n, w ' i] |- F

Number: 103
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v + w = w + v
 [] |- ∀w. -w + w = 0w
Goal:  [] |- ∀w. w + -w = 0w

Number: 104
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v + w − w = v
 [] |- ∀v w. v − w + w = v
Goal:  [] |- ∀v w x. (v + w = x) ⇔ (v = x − w)

Number: 105
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v + w = w + v
 [] |- ∀v w x. (v + w = v + x) ⇔ (w = x)
Goal:  [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)

Number: 106
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w. 0w = -w + w
 [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
Goal:  [-v + v + (-w + w) = 0w, -v + v + (-w + w) = -v + -w + (v + w)]
|- -(v + w) = -v + -w

Number: 107
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w x. (v + w = x + w) ⇔ (v = x)
Goal:  [- -w + -w = w + -w] |- - -w = w

Number: 108
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w. v − w = v + -w
 [] |- ∀v w x. v + (w + x) = v + w + x
 [] |- ∀w. -w + w = 0w
 [] |- ∀w. w + -w = 0w
 [] |- (∀w. w + 0w = w) ∧ ∀w. 0w + w = w
Goal:  [] |- ∀v w x. (v = w − x) ⇔ (v + x = w)

Number: 109
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀v w x. (v = w − x) ⇔ (v + x = w)
Goal:  [] |- ∀v w x. (v − w = x) ⇔ (v = x + w)

Number: 110
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w. - -w = w
Goal:  [] |- ∀w x. (-w = -x) ⇔ (w = x)

Number: 111
Status: Unsatisfiable
Info: polymorph higher-order proof 
Thm list: 
 [] |- ∀w. 0w − w = -w
 [] |- ∀v w x. (v − w = x − w) ⇔ (v = x)
 [] |- ∀v w. v + w − w = v
Goal:  [] |- ∀a b. (a + b = 0w) ⇔ (a = -b)

Number: 113
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀h l n. BITS h l n < 2 ** (SUC h − l)
 [] |- ∀m. SUC m − 1 = m
 [] |- ∀l h b. b < 2 ** l ⇒ (BITS h l (2 ** l + b) = BITS h l (2 ** l))
 [] |- ∀b n. BIT b n ⇔ (BITS b b n = 1)
 [] |- ∀b. BIT b (2 ** b)
Goal:  [T, dimindex (:α) = SUC m] |- BIT m (2 ** m + BITS m 1 a)

Number: 114
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [n < dimindex (:α)] |- 2 ** n < dimword (:α)

Number: 115
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀n d. 0 < n ∧ 1 < d ⇒ n DIV d < n
Goal: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 2 ** n < dimword (:α)] |- w2n m DIV 2 ** n < w2n m

Number: 116
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- ∀w. w2n w < dimword (:α)
Goal: 
[n ≠ 0, w2n m ≠ 0, n < dimindex (:α), 0 < n, 0 < w2n m, 1 < 2 ** n,
 w2n m DIV 2 ** n < w2n m, 2 ** n < dimword (:α)]
|- w2n m DIV 2 ** n < dimword (:α)

Number: 117
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [a < dimword (:α), n < dimindex (:α)] |- 2 ** n < dimword (:α)

Number: 118
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- dimindex (:α) < dimword (:α)
Goal:  [] |- n MOD dimindex (:α) < dimword (:α)

Number: 119
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- 0 < dimindex (:α)
 [] |- ∀m n. 0 < n ⇒ m MOD n < n
 [] |- ∀m n p. m < n ∧ n < p ⇒ m < p
 [] |- dimindex (:α) < dimword (:α)
Goal:  [] |- n MOD dimindex (:α) < dimword (:α)

Number: 120
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- a − b ≤ a ∧ a < SUC a
 [] |- ∀a b. a < b ⇒ 2 ** a < 2 ** b
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal: 
[1 ≤ m, dimindex (:α) = SUC m, BITS m 0 n = 2 ** m + BITS (m − 1) 0 n,
 BIT m n] |- 2 ** m − n MOD 2 ** m < 2 ** SUC m

Number: 121
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- SUC m ≤ 1 ⇔ (m = 0)
 [] |- ∀b n. BIT b n ⇔ (BITS b b n = 1)
 [] |- ∀n a. BITS n n a ≠ 1 ⇔ (BITS n n a = 0)
Goal:  [¬BIT m n, SUC m ≤ 1, dimindex (:α) = SUC m] |- BITS m 0 n = 0

Number: 122
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀a. (dimindex (:α) − 1 = 0) ∧ word_msb a ⇒ (a = 1w)
 [] |- (dimindex (:α) − 1 = 0) ⇒ (dimindex (:α) = 1)
 [] |- ∀n. (1 ** n = 1) ∧ (n ** 1 = n)
 [] |- ∀n k. k < n ⇒ (k MOD n = k)
 [] |- 1 < 2
 [] |- ∀n. w2n (n2w n) = n MOD dimword (:α)
 [] |- dimword (:α) = 2 ** dimindex (:α)
Goal:  [] |- ∀a. (dimindex (:α) − 1 = 0) ∧ word_msb a ⇒ (w2n a = 1)

Number: 123
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- ∀a. ¬word_msb a ⇒ if a = 0w then ¬word_msb (-a) else word_msb (-a)
Goal:  [¬word_msb a, ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))]
|- word_msb (-a)

Number: 124
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- -INT_MINw = INT_MINw
 [] |- ∀w v. (-v = w) ⇔ (v = -w)
 [] |- ∀w. - -w = w
 []
|- ∀a.
     word_msb a ⇒
     if (dimindex (:α) − 1 = 0) ∨ (a = INT_MINw) then word_msb (-a)
     else ¬word_msb (-a)
Goal: 
[word_msb a, word_msb (-a),
 ¬((dimindex (:α) − 1 = 0) ∨ (a = 0w) ∨ (a = INT_MINw))] |- F

Number: 125
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀b n. b ≠ 0 ⇒ (SLICE b b n + SLICE (b − 1) 0 n = SLICE b 0 n)
 [] |- ∀n. n ≠ 0 ⇒ (SUC n − 2 = n − 1)
Goal:  [m ≠ 0, dimindex (:α) − 1 ≠ 0, n < dimword (:α), dimindex (:α) = SUC m]
|- SLICE m 0 n = SLICE m m n + SLICE (m − 1) 0 n

Number: 126
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a < 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), word_msb a,
 word_msb b, dimindex (:α) − 1 ≠ 0, x < y, y = x + (p + 1),
 w2n a = 2 ** (dimindex (:α) − 1) + x,
 w2n b = 2 ** (dimindex (:α) − 1) + y,
 w2n (-b) = 2 ** (dimindex (:α) − 1) − y]
|- y < 2 ** (dimindex (:α) − 1)

Number: 127
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a ≤ 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, ¬(w2n a < w2n b), b ≠ 0w, dimindex (:α) − 1 ≠ 0,
 w2n a = x, w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)

Number: 128
Status: Unsatisfiable
Info: polymorph bool num proof 
Thm list: 
 [] |- 2 ** (dimindex (:α) − 1) < 2 ** dimindex (:α)
 [] |- ∀m n. m < n ⇒ m ≤ n
 [] |- ∀m n p. m ≤ n ∧ n ≤ p ⇒ m ≤ p
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, ¬(w2n a < w2n b), b ≠ 0w, dimindex (:α) − 1 ≠ 0,
 y ≤ 2 ** (dimindex (:α) − 1), w2n a = x, w2n b = y,
 w2n (-b) = 2 ** dimindex (:α) − y] |- y ≤ 2 ** dimindex (:α)

Number: 129
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a < 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, y ≤ x,
 y ≤ 2 ** dimindex (:α), y ≤ 2 ** (dimindex (:α) − 1), w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- x < 2 ** (dimindex (:α) − 1)

Number: 130
Status: Unsatisfiable
Info: bool num proof 
Thm list: 
 [] |- ∀b a. b ≠ 0 ⇒ BITS (b − 1) 0 a ≤ 2 ** b
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, w2n a < w2n b, w2n a = x,
 w2n b = y, w2n (-b) = 2 ** dimindex (:α) − y]
|- y ≤ 2 ** (dimindex (:α) − 1)

Number: 131
Status: Unsatisfiable
Info: polymorph bool num proof 
Thm list: 
 [] |- 2 ** (dimindex (:α) − 1) < 2 ** dimindex (:α)
 [] |- ∀m n. m < n ⇒ m ≤ n
 [] |- ∀m n p. m ≤ n ∧ n ≤ p ⇒ m ≤ p
Goal: 
[Abbrev (x = BITS (dimindex (:α) − 1 − 1) 0 (w2n a)),
 Abbrev (y = BITS (dimindex (:α) − 1 − 1) 0 (w2n b)), ¬word_msb a,
 ¬word_msb b, b ≠ 0w, dimindex (:α) − 1 ≠ 0, w2n a < w2n b,
 y ≤ 2 ** (dimindex (:α) − 1), w2n a = x, w2n b = y,
 w2n (-b) = 2 ** dimindex (:α) − y] |- y ≤ 2 ** dimindex (:α)

Number: 132
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 []
|- ∀a b.
     a < b ⇔
     (word_msb (a − b) ⇎
      (word_msb a ⇎ word_msb b) ∧ (word_msb (a − b) ⇎ word_msb a))
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ word_msb a ∧ word_msb b ∧
     word_msb (a − b) ⇒
     w2n a < w2n b
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ word_msb a ∧ word_msb b ∧
     ¬word_msb (a − b) ⇒
     ¬(w2n a < w2n b)
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ ¬word_msb a ∧ ¬word_msb b ∧
     word_msb (a − b) ⇒
     w2n a < w2n b
 []
|- ∀a b.
     dimindex (:α) − 1 ≠ 0 ∧ ¬word_msb a ∧ ¬word_msb b ∧
     ¬word_msb (a − b) ⇒
     ¬(w2n a < w2n b)
Goal:  [dimindex (:α) − 1 ≠ 0]
|- a < b ⇔
   (word_msb a ⇔ word_msb b) ∧ w2n a < w2n b ∨ word_msb a ∧ ¬word_msb b

Number: 133
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. n < m ⇒ n ≤ m − 1
 [] |- ∀b a. b ≠ 0 ⇒ SLICE (b − 1) 0 a < 2 ** b
 [] |- (∀n. 0 + n = n) ∧ ∀m n. SUC m + n = SUC (m + n)
Goal: 
[m ≠ 0, ¬BIT m n, 1 ≤ m, dimindex (:α) = SUC m,
 SLICE m m n + SLICE (m − 1) 0 n = SLICE m 0 n, SLICE m m n = 0]
|- SLICE m 0 n ≤ 2 ** m − 1

Number: 134
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w v. -(v − w) = w − v
 [] |- ∀w. word_abs (-w) = word_abs w
Goal:  [] |- ∀a b. word_abs (a − b) = word_abs (b − a)

Number: 137
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  []
|- (word_msb x ⇔ ¬word_msb y) ∧ (word_msb x ⇎ word_msb (x + ¬y + 1w)) ⇔
   (word_msb x ⇎ word_msb y) ∧ (word_msb (x + ¬y + 1w) ⇎ word_msb x)

Number: 138
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀n a b. a < 2 ** n ∧ b < 2 ** n ⇒ a + b < 2 ** (n + 1)
 [] |- 0 < n ⇒ (n − 1 + 1 = n)
 [] |- 0 < dimindex (:α)
Goal: 
[n < dimword (:α), n < 2 ** (dimindex (:α) − 1), n' < dimword (:α),
 n' < 2 ** (dimindex (:α) − 1)] |- n + n' < 2 ** dimindex (:α)

Number: 140
Status: Unsatisfiable
Info: proof 
Thm list: 
Goal:  [] |- ∀n. (UINT_MAXw = n) ⇔ (n = UINT_MAXw)

Number: 141
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w n. word_reverse (w ≪ n) = word_reverse w ⋙ n
 [] |- ∀w. word_reverse (word_reverse w) = w
Goal:  [] |- ∀w n. word_reverse (w ⋙ n) = word_reverse w ≪ n

Number: 142
Status: Unsatisfiable
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- ∃n'. (n2w n = n2w n') ∧ (n' < k ∨ (n' = k))

Number: 143
Status: Unsatisfiable
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, x = n2w k, {n2w n | F} = ∅]
|- ∃n. (n2w k = n2w n) ∧ (n < k ∨ (n = k))

Number: 144
Status: Unsatisfiable
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal:  [FINITE {n2w n | n < k}, n < k, x = n2w n, {n2w n' | F} = ∅]
|- (n2w n = n2w k) ∨ ∃n'. (n2w n = n2w n') ∧ n' < k

Number: 145
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m. 0 < 2 ** m
Goal:  [] |- 0 < 2 ** n

Number: 146
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 [] |- ∀w. n2w (w2n w) = w
Goal:  [y ≠ 0w, 0 < m] |- w2n y ≠ 0

Number: 147
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀n d. 0 < n ∧ 1 < d ⇒ n DIV d < n
 [] |- ∀m. 0 < m ⇒ 1 < 2 ** m
 [] |- 0 < x ⇔ x ≠ 0
Goal:  [y ≠ 0w, w2n y ≠ 0, 0 < m] |- w2n y DIV 2 ** m < w2n y

Number: 148
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. m ≤ n ⇔ ∃p. n = m + p
 [] |- ∀m n. m + n = n + m
Goal:  [n < dimword (:α), n' < dimword (:α), n' ≤ n] |- ∃k. n = k + n'

Number: 149
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w v. (v − w = 0w) ⇔ (v = w)
 [] |- ∀a b. a < b ⇒ a ≠ b
Goal: 
[0w = x − y, 0w ≤ 0w ⇒ 0w ≤ y − 0w, y ≤ x, 0w ≤ y, 0w ≤ x − y, y < x,
 0w < y] |- 0w < x − y

Number: 150
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w. w − 0w = w
Goal:  [0w = y, y ≤ x, 0w ≤ y, y < x] |- x − y < x ∨ (x − y = x)

Number: 151
Status: Unsatisfiable
Info: polymorph proof 
Thm list: 
 [] |- ∀w. w − 0w = w
Goal:  [y = x, y ≤ x, 0w ≤ y, 0w < y] |- 0w < x ∨ (0w = x)

Number: 152
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) x,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) y]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n

Number: 153
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y ≠ 0, ¬BIT (SUC n) y,
 ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y),
 BITS n 0 x + BITS n 0 y < 2 ** SUC (SUC n), BITS n 0 x < 2 ** SUC n,
 BITS n 0 y < 2 ** SUC n, BIT (SUC n) x]
|- BITS n 0 x + BITS n 0 y < 2 ** SUC n

Number: 154
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y + 1 ≠ 0, BITS n 0 x + BITS n 0 y ≠ 0,
 ¬BIT (SUC n) x, ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y + 1),
 BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC (SUC n),
 BITS n 0 x < 2 ** SUC n, BITS n 0 y < 2 ** SUC n, BIT (SUC n) y]
|- BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC n

Number: 155
Status: Unsatisfiable
Info: num proof 
Thm list: 
 [] |- ∀m n. ¬(m < n) ⇔ n ≤ m
 [] |- ∀n p. 2 ** p ≤ n ∧ n < 2 ** SUC p ⇒ (LOG2 n = p)
 [] |- ∀n. n ≠ 0 ⇒ BIT (LOG2 n) n
Goal: 
[BITS n 0 x + BITS n 0 y + 1 ≠ 0, BITS n 0 x + BITS n 0 y ≠ 0,
 ¬BIT (SUC n) y, ¬BIT (SUC n) (BITS n 0 x + BITS n 0 y + 1),
 BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC (SUC n),
 BITS n 0 x < 2 ** SUC n, BITS n 0 y < 2 ** SUC n, BIT (SUC n) x]
|- BITS n 0 x + BITS n 0 y + 1 < 2 ** SUC n

Number: 160
Status: Unsatisfiable
Info: lambda-lift bool num higher-order proof 
Thm list: 
Goal: 
[P i,
 ∀f P i.
   i < n ∧ P i ∧ (∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j)) ⇒
   (FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i),
 ∀i j. P i ∧ P j ∧ i < n ∧ j < n ⇒ (i = j), i < n, i < SUC n,
 FOLDL (λa j. a ∨ P j ∧ f j) F (COUNT_LIST n) ⇔ f i, P n ⇒ (n = i)]
|- f i ∨ P n ∧ f n ⇔ f i

Number: 161
Status: Unsatisfiable
Info: num proof 
Thm list: 
Goal: 
[∀i.
   i < dimindex (:α) ⇒
   ¬(h + (i + 1) ≤ dimindex (:α) − 1) ∨ ¬w ' (h + (i + 1)),
 i < dimindex (:α), h + 1 ≤ dimindex (:α) − 1,
 h + (i + 1) ≤ dimindex (:α) − 1, a ' (h + (i + 1))]
|- ¬w ' (h + (i + 1))

Number: 162
Status: Unsatisfiable
Info: num higher-order proof 
Thm list: 
 [] |- LOG2 = LOG 2
 [] |- ∀m. SUC m = m + 1
 [] |- ∀m n p. m ≤ n ∧ n < p ⇒ m < p
Goal: 
[P x, x < n, 0 < n − 1, 1 < n, n − 1 < 2 ** SUC (LOG 2 (n − 1)),
 n ≤ dimindex (:α), x ≤ n − 1, 2 ** LOG 2 (n − 1) ≤ n − 1]
|- x < 2 ** (LOG2 (n − 1) + 1)

Number: 163
Status: Unsatisfiable
Info: polymorph num proof 
Thm list: 
 []
|- ∀h w P a.
     ((dimindex (:α) − 1 -- h + 1) w = 0w) ⇒
     (((h -- 0) a = w) ∧ ((dimindex (:α) − 1 -- h + 1) a = 0w) ⇔
      (a = w))
Goal: 
[P x, x < n, x < 2 ** (LOG2 (n − 1) + 1), 0 < n − 1, 1 < n,
 n − 1 < 2 ** SUC (LOG 2 (n − 1)), n ≤ dimindex (:α), x ≤ n − 1,
 2 ** LOG 2 (n − 1) ≤ n − 1,
 (dimindex (:α) − 1 -- LOG2 (n − 1) + 1) (n2w x) = 0w]
|- (m = n2w x) ⇔
   ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w) ∧
   ((LOG2 (n − 1) -- 0) m = n2w x)

Number: 164
Status: Unsatisfiable
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ j ≤ i ∧ w ' (i − j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ j ≤ i ∧
        w ' (i − j)) F (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)

Number: 165
Status: Unsatisfiable
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ⇔
   FOLDL
     (λa j.
        a ∨
        ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧
        i + j < dimindex (:α) ∧ w ' (i + j)) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w)

Number: 166
Status: Unsatisfiable
Info: polymorph lambda-lift bool num higher-order proof 
Thm list: 
 [] |- ∀m. m ≤ m
 []
|- ∀P n m.
     1 < n ∧ n ≤ dimindex (:α) ⇒
     (FOLDL (λa j. a ∨ (m = n2w j) ∧ P j) F (COUNT_LIST n) ⇔
      FOLDL (λa j. a ∨ ((LOG2 (n − 1) -- 0) m = n2w j) ∧ P j) F
        (COUNT_LIST n) ∧
      ((dimindex (:α) − 1 -- LOG2 (n − 1) + 1) m = 0w))
Goal:  [dimindex (:α) ≠ 1, i < dimindex (:α), 1 < dimindex (:α)]
|- FOLDL (λa j. a ∨ (m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w ⇔
   FOLDL
     (λa j.
        a ∨ ((LOG2 (dimindex (:α) − 1) -- 0) m = n2w j) ∧ (w ≫ j) ' i) F
     (COUNT_LIST (dimindex (:α))) ∧
   ((dimindex (:α) − 1 -- LOG2 (dimindex (:α) − 1) + 1) m = 0w) ∨
   n2w (dimindex (:α) − 1) <₊ m ∧ word_msb w

